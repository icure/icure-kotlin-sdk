{
  "openapi": "3.0.1",
  "info": {
    "title": "iCure Data Stack API Documentation",
    "description": "The iCure Data Stack Application API is the native interface to iCure.",
    "version": "v2"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:16043",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "calendarItemType"
    },
    {
      "name": "classification"
    },
    {
      "name": "bekmehr"
    },
    {
      "name": "applicationsettings"
    },
    {
      "name": "medicalLocation"
    },
    {
      "name": "contact"
    },
    {
      "name": "place"
    },
    {
      "name": "code"
    },
    {
      "name": "frontEndMigration"
    },
    {
      "name": "accessLog"
    },
    {
      "name": "tarification"
    },
    {
      "name": "medex"
    },
    {
      "name": "user"
    },
    {
      "name": "anonymousAccess"
    },
    {
      "name": "entityref"
    },
    {
      "name": "form"
    },
    {
      "name": "group"
    },
    {
      "name": "healthcareParty"
    },
    {
      "name": "auth"
    },
    {
      "name": "message"
    },
    {
      "name": "calendarItem"
    },
    {
      "name": "device"
    },
    {
      "name": "permission"
    },
    {
      "name": "keyword"
    },
    {
      "name": "article"
    },
    {
      "name": "insurance"
    },
    {
      "name": "beresultimport"
    },
    {
      "name": "patient"
    },
    {
      "name": "besamv2"
    },
    {
      "name": "classificationTemplate"
    },
    {
      "name": "invoice"
    },
    {
      "name": "entityTemplate"
    },
    {
      "name": "beefact"
    },
    {
      "name": "document"
    },
    {
      "name": "tmp"
    },
    {
      "name": "agenda"
    },
    {
      "name": "timeTable"
    },
    {
      "name": "healthElement"
    },
    {
      "name": "icure"
    },
    {
      "name": "receipt"
    },
    {
      "name": "documentTemplate"
    },
    {
      "name": "beresultexport"
    }
  ],
  "paths": {
    "/rest/v2/device/batch": {
      "put": {
        "tags": [
          "device"
        ],
        "summary": "Modify devices in bulk",
        "description": "Returns the id and _rev of modified devices",
        "operationId": "updateDevices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Create devices in bulk",
        "description": "Returns the id and _rev of created devices",
        "operationId": "createDevices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/bulk": {
      "put": {
        "tags": [
          "device"
        ],
        "summary": "Modify devices in bulk",
        "description": "Returns the id and _rev of modified devices",
        "operationId": "updateDevices_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Create devices in bulk",
        "description": "Returns the id and _rev of created devices",
        "operationId": "createDevices_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List users with(out) pagination",
        "description": "Returns a list of users.",
        "operationId": "listUsersBy",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "description": "An user email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "An user document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListUserDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Modify a user.",
        "description": "No particular return value. It's just a message.",
        "operationId": "modifyUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a user",
        "description": "Create a user. HealthcareParty ID should be set. Email or Login have to be set. If login hasn't been set, Email will be used for Login instead.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/{userId}/properties": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Modify a User property",
        "description": "Modify a User properties based on his/her ID. The return value is the modified user.",
        "operationId": "modifyProperties",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertyStubDto"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/inGroup/{groupId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List users with(out) pagination",
        "description": "Returns a list of users.",
        "operationId": "listUsersInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "An user login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "An user document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListUserDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Modify a user.",
        "description": "No particular return value. It's just a message.",
        "operationId": "modifyUserInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a user",
        "description": "Create a user. HealthcareParty ID should be set. Email has to be set and the Login has to be null. On server-side, Email will be used for Login.",
        "operationId": "createUserInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/current/hcparty/{healthcarePartyId}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Assign a healthcare party ID to current user",
        "description": "UserDto gets returned.",
        "operationId": "assignHealthcareParty",
        "parameters": [
          {
            "name": "healthcarePartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/patient": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a patient",
        "description": "Returns the modified patient.",
        "operationId": "modifyTmpPatient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a patient with the current user",
        "description": "Returns an instance of created patient.",
        "operationId": "createTmpPatient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/patient/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpPatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a patient with the current user",
        "description": "Returns an instance of created patient.",
        "operationId": "createTmpPatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/message": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a message",
        "description": "Returns the modified message.",
        "operationId": "modifyTmpMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a message with the current user",
        "description": "Returns an instance of created message.",
        "operationId": "createTmpMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/message/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpMessages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a message with the current user",
        "description": "Returns an instance of created message.",
        "operationId": "createTmpMessages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/invoice": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a invoice",
        "description": "Returns the modified invoice.",
        "operationId": "modifyTmpInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a invoice with the current user",
        "description": "Returns an instance of created invoice.",
        "operationId": "createTmpInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/invoice/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a invoice with the current user",
        "description": "Returns an instance of created invoice.",
        "operationId": "createTmpInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/healthElement": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a healthElement",
        "description": "Returns the modified healthElement.",
        "operationId": "modifyTmpHealthElement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthElementDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a healthElement with the current user",
        "description": "Returns an instance of created healthElement.",
        "operationId": "createTmpHealthElement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthElementDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/healthElement/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a healthElement with the current user",
        "description": "Returns an instance of created healthElement.",
        "operationId": "createTmpHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/form": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a form",
        "description": "Returns the modified form.",
        "operationId": "modifyTmpForm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a form with the current user",
        "description": "Returns an instance of created form.",
        "operationId": "createTmpForm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/form/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a form with the current user",
        "description": "Returns an instance of created form.",
        "operationId": "createTmpForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/entityTemplate": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a entityTemplate",
        "description": "Returns the modified entityTemplate.",
        "operationId": "modifyTmpEntityTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a entityTemplate with the current user",
        "description": "Returns an instance of created entityTemplate.",
        "operationId": "createTmpEntityTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/entityTemplate/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpEntityTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a entityTemplate with the current user",
        "description": "Returns an instance of created entityTemplate.",
        "operationId": "createTmpEntityTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/document": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a document",
        "description": "Returns the modified document.",
        "operationId": "modifyTmpDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a document with the current user",
        "description": "Returns an instance of created document.",
        "operationId": "createTmpDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/document/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a document with the current user",
        "description": "Returns an instance of created document.",
        "operationId": "createTmpDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/contact": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a contact",
        "description": "Returns the modified contact.",
        "operationId": "modifyTmpContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a contact with the current user",
        "description": "Returns an instance of created contact.",
        "operationId": "createTmpContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/contact/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a contact with the current user",
        "description": "Returns an instance of created contact.",
        "operationId": "createTmpContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/classification": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a classification",
        "description": "Returns the modified classification.",
        "operationId": "modifyTmpClassification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a classification with the current user",
        "description": "Returns an instance of created classification.",
        "operationId": "createTmpClassification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/classification/batch": {
      "put": {
        "tags": [
          "tmp"
        ],
        "summary": "Modify a batch of healthcare elements",
        "description": "Returns the modified healthcare elements.",
        "operationId": "modifyTmpClassifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create a classification with the current user",
        "description": "Returns an instance of created classification.",
        "operationId": "createTmpClassifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/timeTable": {
      "put": {
        "tags": [
          "timeTable"
        ],
        "summary": "Modifies an timeTable",
        "operationId": "modifyTimeTable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeTableDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTableDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "timeTable"
        ],
        "summary": "Creates a timeTable",
        "operationId": "createTimeTable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeTableDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTableDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tarification": {
      "get": {
        "tags": [
          "tarification"
        ],
        "summary": "Finding tarifications by tarification, type and version with pagination.",
        "description": "Returns a list of tarifications matched with given input.",
        "operationId": "findTarificationsBy",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tarification",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A tarification document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListTarificationDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tarification"
        ],
        "summary": "Modify a tarification",
        "description": "Modification of (type, tarification, version) is not allowed.",
        "operationId": "modifyTarification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TarificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TarificationDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tarification"
        ],
        "summary": "Create a Tarification",
        "description": "Type, Tarification and Version are required.",
        "operationId": "createTarification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TarificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TarificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/receipt": {
      "put": {
        "tags": [
          "receipt"
        ],
        "summary": "Updates a receipt",
        "operationId": "modifyReceipt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "receipt"
        ],
        "summary": "Creates a receipt",
        "operationId": "createReceipt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReceiptDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/receipt/{receiptId}/attachment/{blobType}": {
      "put": {
        "tags": [
          "receipt"
        ],
        "summary": "Creates a receipt's attachment",
        "operationId": "setReceiptAttachment",
        "parameters": [
          {
            "name": "receiptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blobType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/place": {
      "get": {
        "tags": [
          "place"
        ],
        "summary": "Gets all places",
        "operationId": "getPlaces",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlaceDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "place"
        ],
        "summary": "Modifies an place",
        "operationId": "modifyPlace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "place"
        ],
        "summary": "Creates a place",
        "operationId": "createPlace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/permissions/{userId}": {
      "put": {
        "tags": [
          "permission"
        ],
        "summary": "Add / Revoke permissions to user",
        "description": "Add a list of granted and revoked permissions to user.",
        "operationId": "modifyUserPermissions",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "List patients for a specific HcParty",
        "description": "Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "findPatientsByHealthcareParty",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "description": "Healthcare party id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "Optional value for sorting results by a given field ('name', 'ssin', 'dateOfBirth'). Specifying this deactivates filtering",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Optional value for providing a sorting direction ('asc', 'desc'). Set to 'asc' by default.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "patient"
        ],
        "summary": "Modify a patient",
        "description": "No particular return value. It's just a message.",
        "operationId": "modifyPatient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Create a patient",
        "description": "Name, last name, date of birth, and gender are required. After creation of the patient and obtaining the ID, you need to create an initial delegation.",
        "operationId": "createPatient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/{patientId}/referral/{referralId}": {
      "put": {
        "tags": [
          "patient"
        ],
        "summary": "Set a patient referral doctor",
        "operationId": "modifyPatientReferral",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referralId",
            "in": "path",
            "description": "The referal id. Accepts 'none' for referral removal.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Optional value for start of referral",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "Optional value for end of referral",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/undelete/{patientIds}": {
      "put": {
        "tags": [
          "patient"
        ],
        "summary": "undelete previously deleted patients",
        "description": "Response is an array containing the ID of undeleted patient..",
        "operationId": "undeletePatient",
        "parameters": [
          {
            "name": "patientIds",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/mergeInto/{toId}/from/{fromIds}": {
      "put": {
        "tags": [
          "patient"
        ],
        "summary": "Merge a series of patients into another patient",
        "operationId": "mergeInto",
        "parameters": [
          {
            "name": "toId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromIds",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/batch": {
      "put": {
        "tags": [
          "patient"
        ],
        "summary": "Modify patients in bulk",
        "description": "Returns the id and _rev of modified patients",
        "operationId": "modifyPatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Create patients in bulk",
        "description": "Returns the id and _rev of created patients",
        "operationId": "createPatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Get all messages (paginated) for current HC Party",
        "operationId": "findMessages",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListMessageDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "message"
        ],
        "summary": "Updates a message",
        "operationId": "modifyMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Creates a message",
        "operationId": "createMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/{messageId}/delegate": {
      "put": {
        "tags": [
          "message"
        ],
        "summary": "Adds a delegation to a message",
        "operationId": "newMessageDelegations",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/status/{status}": {
      "put": {
        "tags": [
          "message"
        ],
        "summary": "Set status bits for given list of messages",
        "operationId": "setMessagesStatusBits",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/readstatus": {
      "put": {
        "tags": [
          "message"
        ],
        "summary": "Set read status for given list of messages",
        "operationId": "setMessagesReadStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagesReadStatusUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/medicallocation": {
      "get": {
        "tags": [
          "medicalLocation"
        ],
        "summary": "Gets all medical locations",
        "operationId": "getMedicalLocations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MedicalLocationDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "medicalLocation"
        ],
        "summary": "Modifies a medical location",
        "operationId": "modifyMedicalLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalLocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalLocationDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "medicalLocation"
        ],
        "summary": "Creates a medical location",
        "operationId": "createMedicalLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalLocationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalLocationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/keyword": {
      "get": {
        "tags": [
          "keyword"
        ],
        "summary": "Gets all keywords",
        "operationId": "getKeywords",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeywordDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "keyword"
        ],
        "summary": "Modify a keyword",
        "description": "Returns the modified keyword.",
        "operationId": "modifyKeyword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeywordDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "keyword"
        ],
        "summary": "Create a keyword with the current user",
        "description": "Returns an instance of created keyword.",
        "operationId": "createKeyword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeywordDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Modifies an invoice",
        "operationId": "modifyInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Creates an invoice",
        "operationId": "createInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/{invoiceId}/delegate": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Adds a delegation to a invoice",
        "operationId": "newInvoiceDelegations",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/batch": {
      "put": {
        "tags": [
          "invoice"
        ],
        "summary": "Modify a batch of invoices",
        "description": "Returns the modified invoices.",
        "operationId": "modifyInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Create a batch of invoices",
        "description": "Returns the created invoices.",
        "operationId": "createInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/insurance": {
      "put": {
        "tags": [
          "insurance"
        ],
        "summary": "Modifies an insurance",
        "operationId": "modifyInsurance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "insurance"
        ],
        "summary": "Creates an insurance",
        "operationId": "createInsurance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsuranceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement": {
      "put": {
        "tags": [
          "healthElement"
        ],
        "summary": "Modify a health element",
        "description": "Returns the modified health element.",
        "operationId": "modifyHealthElement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthElementDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Create a health element with the current user",
        "description": "Returns an instance of created health element.",
        "operationId": "createHealthElement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthElementDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/batch": {
      "put": {
        "tags": [
          "healthElement"
        ],
        "summary": "Modify a batch of health elements",
        "description": "Returns the modified health elements.",
        "operationId": "modifyHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Create a batch of healthcare elements",
        "description": "Returns the created healthcare elements.",
        "operationId": "createHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "List healthcare parties with(out) pagination",
        "description": "Returns a list of healthcare parties.",
        "operationId": "findHealthcarePartiesBy",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "description": "A healthcare party Last name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A healthcare party document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthcarePartyDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Modify a Healthcare Party.",
        "description": "No particular return value. It's just a message.",
        "operationId": "modifyHealthcareParty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthcarePartyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcarePartyDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Create a healthcare party",
        "description": "One of Name or Last name+First name, Nihii, and Public key are required.",
        "operationId": "createHealthcareParty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HealthcarePartyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/properties": {
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update group properties",
        "description": "Update existing group properties",
        "operationId": "modifyGroupProperties",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfPropertiesDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/password": {
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Set group password",
        "description": "Update password for provided group",
        "operationId": "setGroupPassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "header",
            "description": "The new password for the group (can only contain digits, letters, - and _)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/name/{name}": {
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Update group name",
        "description": "Update existing group name",
        "operationId": "modifyGroupName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The new name for the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/dd": {
      "put": {
        "tags": [
          "group"
        ],
        "summary": "Init design docs",
        "description": "Init design docs for provided group",
        "operationId": "initDesignDocs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clazz",
            "in": "query",
            "description": "The class of the design doc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "warmup",
            "in": "query",
            "description": "Warmup the design doc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/frontendmigration": {
      "get": {
        "tags": [
          "frontEndMigration"
        ],
        "summary": "Gets a front end migration",
        "operationId": "getFrontEndMigrations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FrontEndMigrationDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "frontEndMigration"
        ],
        "summary": "Modifies a front end migration",
        "operationId": "modifyFrontEndMigration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrontEndMigrationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrontEndMigrationDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "frontEndMigration"
        ],
        "summary": "Creates a front end migration",
        "operationId": "createFrontEndMigration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FrontEndMigrationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrontEndMigrationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form": {
      "put": {
        "tags": [
          "form"
        ],
        "summary": "Modify a form",
        "description": "Returns the modified form.",
        "operationId": "modifyForm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Create a form with the current user",
        "description": "Returns an instance of created form.",
        "operationId": "createForm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/template/{formTemplateId}/attachment/multipart": {
      "put": {
        "tags": [
          "form"
        ],
        "summary": "Update a form template's layout",
        "operationId": "setTemplateAttachmentMulti",
        "parameters": [
          {
            "name": "formTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "attachment"
                ],
                "type": "object",
                "properties": {
                  "attachment": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/template/{formTemplateId}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets a form template by guid",
        "operationId": "getFormTemplate",
        "parameters": [
          {
            "name": "formTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormTemplateDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "form"
        ],
        "summary": "Modify a form template with the current user",
        "description": "Returns an instance of created form template.",
        "operationId": "updateFormTemplate",
        "parameters": [
          {
            "name": "formTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormTemplateDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "form"
        ],
        "summary": "Delete a form template",
        "operationId": "deleteFormTemplate",
        "parameters": [
          {
            "name": "formTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocIdentifier"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/batch": {
      "put": {
        "tags": [
          "form"
        ],
        "summary": "Modify a batch of forms",
        "description": "Returns the modified forms.",
        "operationId": "modifyForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Create a batch of forms",
        "description": "Returns the created forms.",
        "operationId": "createForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate": {
      "put": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Modify a entityTemplate",
        "description": "Modification of (type, entityTemplate, version) is not allowed.",
        "operationId": "modifyEntityTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Create a EntityTemplate",
        "description": "Type, EntityTemplate and Version are required.",
        "operationId": "createEntityTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/batch": {
      "put": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Modify a batch of entityTemplates",
        "description": "Returns the modified entityTemplates.",
        "operationId": "modifyEntityTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Create a batch of entityTemplates",
        "description": "Returns the modified entityTemplates.",
        "operationId": "createEntityTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document": {
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Updates a document",
        "operationId": "modifyDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Creates a document",
        "operationId": "createDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/{documentId}/attachment/multipart": {
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Creates a document's attachment",
        "operationId": "setDocumentAttachmentMulti",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "attachment"
                ],
                "type": "object",
                "properties": {
                  "attachment": {
                    "type": "string",
                    "format": "byte"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/{documentId}/attachment": {
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Creates a document's attachment",
        "operationId": "setDocumentAttachment",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "document"
        ],
        "summary": "Deletes a document's attachment",
        "operationId": "deleteAttachment",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/batch": {
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Updates a batch of documents",
        "description": "Returns the modified documents.",
        "operationId": "modifyDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/attachment": {
      "put": {
        "tags": [
          "document"
        ],
        "summary": "Creates a document's attachment",
        "operationId": "setSafeDocumentAttachment",
        "parameters": [
          {
            "name": "documentId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/{documentTemplateId}": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Gets a document template",
        "operationId": "getDocumentTemplate",
        "parameters": [
          {
            "name": "documentTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTemplateDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Modify a document template with the current user",
        "description": "Returns an instance of created document template.",
        "operationId": "modifyDocumentTemplate",
        "parameters": [
          {
            "name": "documentTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/{documentTemplateId}/attachmentJson": {
      "put": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Creates a document's attachment",
        "operationId": "setDocumentTemplateAttachmentJson",
        "parameters": [
          {
            "name": "documentTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "$ref": "#/components/schemas/ByteArrayDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/{documentTemplateId}/attachment": {
      "put": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Creates a document's attachment",
        "operationId": "setDocumentTemplateAttachment",
        "parameters": [
          {
            "name": "documentTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device": {
      "put": {
        "tags": [
          "device"
        ],
        "summary": "Modify a device",
        "description": "Returns the updated device",
        "operationId": "updateDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Create a device",
        "description": "Name, last name, date of birth, and gender are required. After creation of the device and obtaining the ID, you need to create an initial delegation.",
        "operationId": "createDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact": {
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "Modify a contact",
        "description": "Returns the modified contact.",
        "operationId": "modifyContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Create a contact with the current user",
        "description": "Returns an instance of created contact.",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/delegations": {
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "Update delegations in healthElements.",
        "description": "Keys must be delimited by coma",
        "operationId": "modifyContactsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Update delegations in healthElements.",
        "description": "Keys must be delimited by coma",
        "operationId": "setContactsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartySecretForeignKeys/close": {
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "Close contacts for Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "closeForHCPartyPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/batch": {
      "put": {
        "tags": [
          "contact"
        ],
        "summary": "Modify a batch of contacts",
        "description": "Returns the modified contacts.",
        "operationId": "modifyContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Create a batch of contacts",
        "description": "Returns the modified contacts.",
        "operationId": "createContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Finding codes by code, type and version with pagination.",
        "description": "Returns a list of codes matched with given input.",
        "operationId": "findCodesByType",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A code document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListCodeDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "code"
        ],
        "summary": "Modify a code",
        "description": "Modification of (type, code, version) is not allowed.",
        "operationId": "modifyCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CodeDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "code"
        ],
        "summary": "Create a Code",
        "description": "Type, Code and Version are required.",
        "operationId": "createCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CodeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification": {
      "put": {
        "tags": [
          "classification"
        ],
        "summary": "Modify a classification Template",
        "description": "Returns the modified classification Template.",
        "operationId": "modifyClassification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "classification"
        ],
        "summary": "Create a classification with the current user",
        "description": "Returns an instance of created classification Template.",
        "operationId": "createClassification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classificationTemplate": {
      "get": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "List all classification templates with pagination",
        "description": "Returns a list of classification templates.",
        "operationId": "findClassificationTemplatesBy",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "description": "A label",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "An classification template document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListClassificationTemplateDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "Modify a classification Template",
        "description": "Returns the modified classification Template.",
        "operationId": "modifyClassificationTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationTemplateDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "Create a classification Template with the current user",
        "description": "Returns an instance of created classification Template.",
        "operationId": "createClassificationTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem": {
      "get": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Gets all calendarItems",
        "operationId": "getCalendarItems",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Modifies an calendarItem",
        "operationId": "modifyCalendarItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarItemDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarItemDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Creates a calendarItem",
        "operationId": "createCalendarItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarItemDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarItemDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItemType": {
      "get": {
        "tags": [
          "calendarItemType"
        ],
        "summary": "Gets all calendarItemTypes",
        "operationId": "getCalendarItemTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemTypeDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "calendarItemType"
        ],
        "summary": "Modifies an calendarItemType",
        "operationId": "modifyCalendarItemType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarItemTypeDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarItemTypeDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendarItemType"
        ],
        "summary": "Creates a calendarItemType",
        "operationId": "createCalendarItemType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarItemTypeDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarItemTypeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/article": {
      "get": {
        "tags": [
          "article"
        ],
        "summary": "Gets all articles",
        "operationId": "getArticles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArticleDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "article"
        ],
        "summary": "Modifies an article",
        "operationId": "modifyArticle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "article"
        ],
        "summary": "Creates a article",
        "operationId": "createArticle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArticleDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/agenda": {
      "get": {
        "tags": [
          "agenda"
        ],
        "summary": "Gets all agendas",
        "operationId": "getAgendas",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgendaDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "agenda"
        ],
        "summary": "Modifies an agenda",
        "operationId": "modifyAgenda",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgendaDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgendaDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agenda"
        ],
        "summary": "Creates a agenda",
        "operationId": "createAgenda",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AgendaDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgendaDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/accesslog": {
      "get": {
        "tags": [
          "accessLog"
        ],
        "summary": "Get Paginated List of Access logs",
        "operationId": "findAccessLogsBy",
        "parameters": [
          {
            "name": "fromEpoch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "toEpoch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "descending",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAccessLogDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "accessLog"
        ],
        "summary": "Modifies an access log",
        "operationId": "modifyAccessLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessLogDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AccessLogDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "accessLog"
        ],
        "summary": "Creates an access log",
        "operationId": "createAccessLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessLogDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AccessLogDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/token/{userId}/{key}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Request a new temporary token for authentication",
        "operationId": "getToken",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The token key. Only one instance of a token with a defined key can exist at the same time",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenValidity",
            "in": "query",
            "description": "The token validity in seconds",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/match": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Get ids of healthcare party matching the provided filter for the current user (HcParty) ",
        "operationId": "matchUsersBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/forgottenPassword/{email}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Send a forgotten email message to an user",
        "operationId": "forgottenPassword",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "the email of the user ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/filter": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Filter users for the current user (HcParty)",
        "description": "Returns a list of users along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterUsersBy",
        "parameters": [
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A User document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListUserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Create tmp database for current user",
        "description": "Nothing happens if the database already exists",
        "operationId": "createTmpDatabase",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tmp"
        ],
        "summary": "Destroy tmp database for current user",
        "description": "Nothing happens if the database does not exists",
        "operationId": "destroyTmpDatabase",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/replicate/from/{from}": {
      "post": {
        "tags": [
          "tmp"
        ],
        "operationId": "replicateToTmpDatabase",
        "parameters": [
          {
            "name": "from",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicatorDocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/patient/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get patients by ids with the current user",
        "description": "Returns an instance of created patient.",
        "operationId": "getTmpPatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/message/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get messages by ids with the current user",
        "description": "Returns an instance of created message.",
        "operationId": "getTmpMessages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/invoice/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get invoices by ids with the current user",
        "description": "Returns an instance of created invoice.",
        "operationId": "getTmpInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/healthElement/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get healthElements by ids with the current user",
        "description": "Returns an instance of created healthElement.",
        "operationId": "getTmpHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/form/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get forms by ids with the current user",
        "description": "Returns an instance of created form.",
        "operationId": "getTmpForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/entityTemplate/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get entityTemplates by ids with the current user",
        "description": "Returns an instance of created entityTemplate.",
        "operationId": "getTmpEntityTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/document/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get documents by ids with the current user",
        "description": "Returns an instance of created document.",
        "operationId": "getTmpDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/contact/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get contacts by ids with the current user",
        "description": "Returns an instance of created contact.",
        "operationId": "getTmpContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/classification/get": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Get classifications by ids with the current user",
        "description": "Returns an instance of created classification.",
        "operationId": "getTmpClassifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/batch/purge": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Hard delete items.",
        "description": "Response is a set containing the ID's of deleted items.",
        "operationId": "purgeTmpItems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/batch/delete": {
      "post": {
        "tags": [
          "tmp"
        ],
        "summary": "Soft delete items.",
        "description": "Response is a set containing the ID's of deleted items.",
        "operationId": "deleteTmpItems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/timeTable/delete/batch": {
      "post": {
        "tags": [
          "timeTable"
        ],
        "summary": "Deletes an timeTable",
        "operationId": "deleteTimeTable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/timeTable/byPeriodAndAgendaId": {
      "post": {
        "tags": [
          "timeTable"
        ],
        "summary": "Get TimeTables by Period and AgendaId",
        "operationId": "getTimeTablesByPeriodAndAgendaId",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "agendaId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTableDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/timeTable/byAgendaId": {
      "post": {
        "tags": [
          "timeTable"
        ],
        "summary": "Get TimeTables by AgendaId",
        "operationId": "getTimeTablesByAgendaId",
        "parameters": [
          {
            "name": "agendaId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTableDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tarification/byIds": {
      "post": {
        "tags": [
          "tarification"
        ],
        "summary": "Get a list of tarifications by ids",
        "description": "Keys must be delimited by coma",
        "operationId": "getTarifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TarificationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/receipt/delete/batch": {
      "post": {
        "tags": [
          "receipt"
        ],
        "summary": "Deletes receipts",
        "operationId": "deleteReceipts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/place/delete/batch": {
      "post": {
        "tags": [
          "place"
        ],
        "summary": "Deletes places",
        "operationId": "deletePlaces",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/{patientId}/delegate": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Delegates a patients to a healthcare party",
        "description": "It delegates a patient to a healthcare party (By current healthcare party). A modified patient with new delegation gets returned.",
        "operationId": "newPatientDelegations",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/register/forHcp/{hcPartyId}/inGroup/{groupId}": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Register a patient",
        "description": "Register a new patient into the system",
        "operationId": "registerPatient",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useShortToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatientDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientRegistrationSuccessDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/match": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Get ids of patients matching the provided filter for the current user (HcParty) ",
        "operationId": "matchPatientsBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoPatient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/filter": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Filter patients for the current user (HcParty) ",
        "description": "Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterPatientsBy",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination, depends on the filters used",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainPatient"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/duplicates/ssin": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Provides a paginated list of patients with duplicate ssin for an hecparty",
        "operationId": "findDuplicatesBySsin",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "description": "Healthcare party id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination, depends on the filters used",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/duplicates/name": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Provides a paginated list of patients with duplicate name for an hecparty",
        "operationId": "findDuplicatesByName",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "description": "Healthcare party id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination, depends on the filters used",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/delete/batch": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Delete patients.",
        "description": "Response is an array containing the ID of deleted patient..",
        "operationId": "deletePatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/byIds": {
      "post": {
        "tags": [
          "patient"
        ],
        "summary": "Get patients by id",
        "description": "It gets patient administrative data.",
        "operationId": "getPatients",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/delete/batch": {
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Deletes multiple messages",
        "operationId": "deleteMessages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/children/batch": {
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Get children messages of provided message",
        "operationId": "getMessagesChildren",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byTransportGuid/list": {
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Get all messages for current HC Party and provided transportGuids",
        "operationId": "listMessagesByTransportGuids",
        "parameters": [
          {
            "name": "hcpId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byInvoice": {
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Get children messages of provided message",
        "operationId": "listMessagesByInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/medicallocation/delete/batch": {
      "post": {
        "tags": [
          "medicalLocation"
        ],
        "summary": "Deletes medical locations",
        "operationId": "deleteMedicalLocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/medex/generate": {
      "post": {
        "tags": [
          "medex"
        ],
        "summary": "Generate a Medex XML String",
        "operationId": "generateMedex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedexInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/keyword/delete/batch": {
      "post": {
        "tags": [
          "keyword"
        ],
        "summary": "Delete keywords.",
        "description": "Response is a set containing the ID's of deleted keywords.",
        "operationId": "deleteKeywords",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/validate/{invoiceId}": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "validate",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scheme",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forcedValue",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/reassign": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Modifies an invoice",
        "operationId": "reassignInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/mergeTo/{invoiceId}": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "mergeTo",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/filter": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Filter invoices for the current user (HcParty)",
        "description": "Returns a list of invoices along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterInvoicesBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/delegations": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Update delegations in healthElements.",
        "description": "Keys must be delimited by coma",
        "operationId": "setInvoicesDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byauthor/{userId}/service/{serviceId}": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Remove an invoice of an user",
        "operationId": "removeCodes",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byauthor/{userId}/append/{type}/{sentMediumType}": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "appendCodes",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sentMediumType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "insuranceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gracePeriod",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvoicingCodeDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byIds": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets an invoice",
        "operationId": "getInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byContacts": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listInvoicesByContactIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/allHcpsByStatus/{status}": {
      "post": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices per status",
        "operationId": "listAllHcpsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/insurance/byIds": {
      "post": {
        "tags": [
          "insurance"
        ],
        "summary": "Gets insurances by id",
        "operationId": "getInsurances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsuranceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/dd/{entityName}": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "Force update design doc",
        "operationId": "updateDesignDoc",
        "parameters": [
          {
            "name": "entityName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "warmup",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/patient": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "Resolve patients conflicts",
        "operationId": "resolvePatientsConflicts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/message": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "resolve messages conflicts",
        "operationId": "resolveMessagesConflicts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/invoice": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "resolve invoices conflicts",
        "operationId": "resolveInvoicesConflicts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/healthelement": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "resolve healthcare elements conflicts",
        "operationId": "resolveHealthElementsConflicts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/form": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "resolve forms conflicts",
        "operationId": "resolveFormsConflicts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/document": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "resolve documents conflicts",
        "operationId": "resolveDocumentsConflicts",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/conflicts/contact": {
      "post": {
        "tags": [
          "icure"
        ],
        "summary": "Resolve contacts conflicts",
        "operationId": "resolveContactsConflicts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/{healthElementId}/delegate": {
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Delegates a health element to a healthcare party",
        "description": "It delegates a health element to a healthcare party (By current healthcare party). Returns the element with new delegations.",
        "operationId": "newHealthElementDelegations",
        "parameters": [
          {
            "name": "healthElementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/match": {
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Get ids of health element matching the provided filter for the current user (HcParty) ",
        "operationId": "matchHealthElementsBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoHealthElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/filter": {
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Filter health elements for the current user (HcParty)",
        "description": "Returns a list of health elements along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterHealthElementsBy",
        "parameters": [
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A HealthElement document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainHealthElement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/delete/batch": {
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Delete health elements.",
        "description": "Response is a set containing the ID's of deleted health elements.",
        "operationId": "deleteHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/delegations": {
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Update delegations in healthElements.",
        "description": "Keys must be delimited by coma",
        "operationId": "setHealthElementsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/byIds": {
      "post": {
        "tags": [
          "healthElement"
        ],
        "summary": "Get healthElements by batch",
        "description": "Get a list of healthElement by ids/keys.",
        "operationId": "getHealthElements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/match": {
      "post": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Get ids of healthcare party matching the provided filter for the current user (HcParty) ",
        "operationId": "matchHealthcarePartiesBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoHealthcareParty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/filter": {
      "post": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Filter healthcare parties for the current user (HcParty)",
        "description": "Returns a list of healthcare party along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterHealthPartiesBy",
        "parameters": [
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A HealthcareParty document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainHealthcareParty"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/delete/batch": {
      "post": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Delete healthcare parties",
        "description": "Deleting healthcareParties. Response is an array containing the id of deleted healthcare parties.",
        "operationId": "deleteHealthcareParties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/byIds": {
      "post": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Get healthcareParties by their IDs",
        "description": "General information about the healthcare Party",
        "operationId": "getHealthcareParties",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthcarePartyDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get a group by id",
        "description": "Get a group by id",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create a group",
        "description": "Create a new group and associated dbs. \nThe created group will be manageable by the users that belong to the same group as the one that called createGroup.\nSeveral tasks can be executed during the group creation like DB replications towards the created DBs, users creation and healthcare parties creation",
        "operationId": "createGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group, also used for subsequent authentication against the db (can only contain digits, letters, - and _)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "header",
            "description": "The password of the group (can only contain digits, letters, - and _)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "The server on which the group dbs will be created",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The number of shards for patient and healthdata dbs : 3-8 is a recommended range of value",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of replications for dbs : 3 is a recommended value",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseInitialisationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/reset/storage": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Reset storage for group",
        "description": "Reset storage",
        "operationId": "resetStorage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The number of shards for patient and healthdata dbs : 3-8 is a recommended range of value",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "n",
            "in": "query",
            "description": "The number of replications for dbs : 3 is a recommended value",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/conflicts": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Solve conflicts for group",
        "description": "Solve conflicts for group",
        "operationId": "solveConflicts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Solve at most limit conflicts",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "warmup",
            "in": "query",
            "description": "Warmup the design doc",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdWithRevDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/register/trial": {
      "post": {
        "tags": [
          "group"
        ],
        "summary": "Create a group",
        "description": "Create a new group and associated dbs. \nThe created group will be manageable by the users that belong to the same group as the one that called createGroup.\nSeveral tasks can be executed during the group creation like DB replications towards the created DBs, users creation and healthcare parties creation",
        "operationId": "registerNewGroupAdministrator",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationInformationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationSuccessDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/template": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets all form templates for current user",
        "operationId": "getFormTemplates",
        "parameters": [
          {
            "name": "loadLayout",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormTemplateDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Create a form template with the current user",
        "description": "Returns an instance of created form template.",
        "operationId": "createFormTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/delete/batch": {
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Delete forms.",
        "description": "Response is a set containing the ID's of deleted forms.",
        "operationId": "deleteForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/delegations": {
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Update delegations in form.",
        "description": "Keys must be delimited by coma",
        "operationId": "setFormsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/delegate/{formId}": {
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Delegates a form to a healthcare party",
        "description": "It delegates a form to a healthcare party. Returns the form with the new delegations.",
        "operationId": "newFormDelegations",
        "parameters": [
          {
            "name": "formId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/byIds": {
      "post": {
        "tags": [
          "form"
        ],
        "summary": "Get a list of forms by ids",
        "description": "Keys must be delimited by coma",
        "operationId": "getForms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/delete/batch": {
      "post": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Delete entity templates",
        "operationId": "deleteEntityTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/byIds": {
      "post": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Get a list of entityTemplates by ids",
        "description": "Keys must be delimited by coma",
        "operationId": "getEntityTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entityref": {
      "post": {
        "tags": [
          "entityref"
        ],
        "summary": "Create an entity reference",
        "operationId": "createEntityReference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityReferenceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReferenceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/delete/batch": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Deletes documents",
        "operationId": "deleteDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/delegations": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Update delegations in healthElements.",
        "description": "Keys must be delimited by coma",
        "operationId": "setDocumentsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/byIds": {
      "post": {
        "tags": [
          "document"
        ],
        "summary": "Gets a document",
        "operationId": "getDocuments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Gets all document templates for current user",
        "operationId": "listDocumentTemplates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTemplateDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Create a document template with the current user",
        "description": "Returns an instance of created document template.",
        "operationId": "createDocumentTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentTemplateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/delete/batch": {
      "post": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Deletes document templates",
        "operationId": "deleteDocumentTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/match": {
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Get ids of devices matching the provided filter for the current user (HcParty) ",
        "operationId": "matchDevicesBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/filter": {
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Filter devices for the current user (HcParty) ",
        "description": "Returns a list of devices along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterDevicesBy",
        "parameters": [
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A device document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListDeviceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/delete/batch": {
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Delete devices.",
        "description": "Response is an array containing the id/rev of deleted devices.",
        "operationId": "deleteDevices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/byIds": {
      "post": {
        "tags": [
          "device"
        ],
        "summary": "Get devices by id",
        "description": "It gets device administrative data.",
        "operationId": "getDevices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/{contactId}/delegate": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Delegates a contact to a healthcare party",
        "description": "It delegates a contact to a healthcare party (By current healthcare party). Returns the contact with new delegations.",
        "operationId": "newContactDelegations",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List services with provided ids ",
        "description": "Returns a list of services",
        "operationId": "getServices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/match": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Get ids of services matching the provided filter for the current user",
        "operationId": "matchServicesBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/linkedTo": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List services linked to provided ids ",
        "description": "Returns a list of services",
        "operationId": "getServicesLinkedTo",
        "parameters": [
          {
            "name": "linkType",
            "in": "query",
            "description": "The type of the link",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/filter": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List services for the current user (HcParty) or the given hcparty in the filter ",
        "description": "Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterServicesBy",
        "parameters": [
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A Contact document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListServiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/match": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Get ids of contacts matching the provided filter for the current user (HcParty) ",
        "operationId": "matchContactsBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/filter": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts for the current user (HcParty) or the given hcparty in the filter ",
        "description": "Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterContactsBy",
        "parameters": [
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A Contact document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/delete/batch": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Delete contacts.",
        "description": "Response is a set containing the ID's of deleted contacts.",
        "operationId": "deleteContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byIds": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "Get contacts",
        "operationId": "getContacts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartyPatientForeignKeys": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By Healthcare Party and Patient foreign keys.",
        "operationId": "listContactsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartyFormIds": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By Healthcare Party and form Id.",
        "operationId": "listContactsByHCPartyAndFormIds",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byExternalId": {
      "post": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By externalId.",
        "operationId": "listContactsByExternalId",
        "parameters": [
          {
            "name": "externalId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/{codeType}": {
      "post": {
        "tags": [
          "code"
        ],
        "summary": "Import codes",
        "description": "Import codes from the resources XML file depending on the passed pathVariable",
        "operationId": "importCodes",
        "parameters": [
          {
            "name": "codeType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/match": {
      "post": {
        "tags": [
          "code"
        ],
        "summary": "Get ids of code matching the provided filter for the current user (HcParty) ",
        "operationId": "matchCodesBy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbstractFilterDtoCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/filter": {
      "post": {
        "tags": [
          "code"
        ],
        "summary": "Filter codes ",
        "description": "Returns a list of codes along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "filterCodesBy",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination, depends on the filters used",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Skip rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort key",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterChainCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListCodeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/byIds": {
      "post": {
        "tags": [
          "code"
        ],
        "summary": "Get a list of codes by ids",
        "description": "Keys must be delimited by coma",
        "operationId": "getCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CodeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classificationTemplate/{classificationTemplateId}/delegate": {
      "post": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "Delegates a classification Template to a healthcare party",
        "description": "It delegates a classification Template to a healthcare party (By current healthcare party). Returns the element with new delegations.",
        "operationId": "newClassificationTemplateDelegations",
        "parameters": [
          {
            "name": "classificationTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classificationTemplate/delete/batch": {
      "post": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "Delete classification Templates.",
        "description": "Response is a set containing the ID's of deleted classification Templates.",
        "operationId": "deleteClassificationTemplates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification/{classificationId}/delegate": {
      "post": {
        "tags": [
          "classification"
        ],
        "summary": "Delegates a classification to a healthcare party",
        "description": "It delegates a classification to a healthcare party (By current healthcare party). Returns the element with new delegations.",
        "operationId": "newClassificationDelegations",
        "parameters": [
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegationDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification/delete/batch": {
      "post": {
        "tags": [
          "classification"
        ],
        "summary": "Delete classification Templates.",
        "description": "Response is a set containing the ID's of deleted classification Templates.",
        "operationId": "deleteClassifications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification/delegations": {
      "post": {
        "tags": [
          "classification"
        ],
        "summary": "Update delegations in classification",
        "description": "Keys must be delimited by coma",
        "operationId": "setClassificationsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItemType/delete/batch": {
      "post": {
        "tags": [
          "calendarItemType"
        ],
        "summary": "Deletes calendarItemTypes",
        "operationId": "deleteCalendarItemTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/{calendarItemIds}": {
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Deletes an calendarItem",
        "operationId": "deleteCalendarItem",
        "parameters": [
          {
            "name": "calendarItemIds",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/rest/v2/calendarItem/delete/batch": {
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Deletes calendarItems",
        "operationId": "deleteCalendarItems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/delegations": {
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Update delegations in calendarItems",
        "operationId": "setCalendarItemsDelegations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IcureStubDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/byPeriodAndHcPartyId": {
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Get CalendarItems by Period and HcPartyId",
        "operationId": "getCalendarItemsByPeriodAndHcPartyId",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/byPeriodAndAgendaId": {
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Get CalendarItems by Period and AgendaId",
        "operationId": "getCalendarsByPeriodAndAgendaId",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "agendaId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/byIds": {
      "post": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Get calendarItems by ids",
        "operationId": "getCalendarItemsWithIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmpgroup/byGroupCodes": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by group.",
        "description": "Returns a list of group codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listVmpGroupsByVmpGroupCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VmpGroupDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp/byVmpCodes": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMPs by group.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listVmpsByVmpCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp/byGroupIds": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMPs by group.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listVmpsByGroupIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/nmp/byCnks": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding NMPs by cnk id.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listNmpsByCnks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byVmpIds": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by vmp id.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listAmpsByVmpIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byVmpCodes": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by vmp code.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listAmpsByVmpCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byGroupIds": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by group.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listAmpsByGroupIds",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byGroupCodes": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by group.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listAmpsByGroupCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byDmppCodes": {
      "post": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by dmpp code",
        "description": "Returns a list of amps matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "listAmpsByDmppCodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_result_export/medidoc/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}": {
      "post": {
        "tags": [
          "beresultexport"
        ],
        "summary": "Export data",
        "operationId": "exportMedidoc",
        "parameters": [
          {
            "name": "fromHcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toHcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_result_export/kmehrreport/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}": {
      "post": {
        "tags": [
          "beresultexport"
        ],
        "summary": "Export data",
        "operationId": "exportKmehrReport",
        "parameters": [
          {
            "name": "fromHcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toHcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_result_export/hl1/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}": {
      "post": {
        "tags": [
          "beresultexport"
        ],
        "summary": "Export data",
        "operationId": "exportHealthOne",
        "parameters": [
          {
            "name": "fromHcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toHcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehrv2/{patientId}/valid": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get sumehr validity",
        "operationId": "isSumehrV2Valid",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SumehrValidityDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehrv2/{patientId}/validate": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Validate sumehr",
        "operationId": "validateSumehrV2",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehrv2/{patientId}/md5": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Check sumehr signature",
        "operationId": "getSumehrV2Md5",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehrv2/{patientId}/export": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Generate sumehr",
        "operationId": "generateSumehrV2",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehrv2/{patientId}/content": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get sumehr elements",
        "operationId": "getSumehrV2Content",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SumehrContentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{patientId}/valid": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get sumehr validity",
        "operationId": "isSumehrValid",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SumehrValidityDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{patientId}/validate": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Validate sumehr",
        "operationId": "validateSumehr",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{patientId}/md5": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Check sumehr signature",
        "operationId": "getSumehrMd5",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{patientId}/export": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Generate sumehr",
        "operationId": "generateSumehr",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{patientId}/content": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get sumehr elements",
        "operationId": "getSumehrContent",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SumehrExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SumehrContentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{documentId}/import": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Import sumehr into patient(s) using existing document",
        "operationId": "importSumehr",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "description": "Dry run: do not save in database",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportMapping"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/sumehr/{documentId}/importbyitemid": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Import sumehr into patient(s) using existing document",
        "operationId": "importSumehrByItemId",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "description": "Dry run: do not save in database",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportMapping"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/smf/{patientId}/export": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get SMF (Software Medical File) export",
        "operationId": "generateSmfExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SoftwareMedicalFileExportDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/smf/{documentId}/import": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Import SMF into patient(s) using existing document",
        "operationId": "importSmf",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportMapping"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/smf/{documentId}/checkIfSMFPatientsExists": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Check whether patients in SMF already exists in DB",
        "operationId": "checkIfSMFPatientsExists",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportMapping"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CheckSMFPatientResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/result/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr result",
        "operationId": "generateResultExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/request/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr request",
        "operationId": "generateRequestExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/report/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr report",
        "operationId": "generateReportExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/prescription/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr prescription",
        "operationId": "generatePrescriptionExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/patientinfo/{patientId}/export": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get KMEHR Patient Info export",
        "operationId": "generatePatientInfoExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/note/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr note",
        "operationId": "generateNoteExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/medicationscheme/{patientId}/export": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Medicationscheme export",
        "operationId": "generateMedicationSchemeExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSafe",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicationSchemeExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/medicationscheme/{documentId}/import": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Import MedicationScheme into patient(s) using existing document",
        "operationId": "importMedicationScheme",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "description": "Dry run: do not save in database",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "patientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportMapping"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportResultDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/labresult/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr labresult",
        "operationId": "generateLabresultExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/diarynote/{patientId}/export": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Generate diarynote",
        "operationId": "generateDiaryNote",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiaryNoteExportInfoDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_kmehr/contactreport/{patientId}/export/{id}": {
      "post": {
        "tags": [
          "bekmehr"
        ],
        "summary": "Get Kmehr contactreport",
        "operationId": "generateContactreportExport",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientNihii",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientSsin",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientFirstName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipientLastName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mimeType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_efact/{insuranceId}/{newMessageId}/{numericalRef}": {
      "post": {
        "tags": [
          "beefact"
        ],
        "summary": "create batch and message",
        "operationId": "createBatchAndMessage",
        "parameters": [
          {
            "name": "insuranceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newMessageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numericalRef",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageWithBatch"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/auth/logout": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "logout",
        "description": "Logout",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "logout",
        "description": "Logout",
        "operationId": "logoutPost",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "login",
        "description": "Login using username and password",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/article/delete/batch": {
      "post": {
        "tags": [
          "article"
        ],
        "summary": "Deletes articles",
        "operationId": "deleteArticles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/agenda/delete/batch": {
      "post": {
        "tags": [
          "agenda"
        ],
        "summary": "Deletes agendas",
        "operationId": "deleteAgendas",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/accesslog/delete/batch": {
      "post": {
        "tags": [
          "accessLog"
        ],
        "summary": "Deletes an access log",
        "operationId": "deleteAccessLogs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListOfIdsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocIdentifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user by his ID",
        "description": "General information about the user",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a User based on his/her ID.",
        "description": "Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocIdentifier"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/token/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Check token validity",
        "operationId": "checkTokenValidity",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/session": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get Currently logged-in user session.",
        "description": "Get current user.",
        "operationId": "getCurrentSession",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/matches": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get presently logged-in user.",
        "description": "Get current user.",
        "operationId": "getMatchingUsers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/encodePassword": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "encodePassword",
        "parameters": [
          {
            "name": "password",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/current": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get presently logged-in user.",
        "description": "Get current user.",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/checkPassword": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "checkPassword",
        "parameters": [
          {
            "name": "password",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/byHealthcarePartyId/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the list of users by healthcare party id",
        "operationId": "findByHcpartyId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/byEmail/{email}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user by his Email/Login",
        "description": "General information about the user",
        "operationId": "getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/patient/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List patients with the current user",
        "description": "Returns paginated patients.",
        "operationId": "listTmpPatients",
        "parameters": [
          {
            "name": "firstPatientId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/patient/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a patient by id",
        "description": "Returns an instance of patient.",
        "operationId": "getTmpPatient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/message/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List messages with the current user",
        "description": "Returns paginated messages.",
        "operationId": "listTmpMessages",
        "parameters": [
          {
            "name": "firstMessageId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListInvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/message/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a message by id",
        "description": "Returns an instance of message.",
        "operationId": "getTmpMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/invoice/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List invoices with the current user",
        "description": "Returns paginated invoices.",
        "operationId": "listTmpInvoices",
        "parameters": [
          {
            "name": "firstInvoiceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListInvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/invoice/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a invoice by id",
        "description": "Returns an instance of invoice.",
        "operationId": "getTmpInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/healthElement/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List healthElements with the current user",
        "description": "Returns paginated healthElements.",
        "operationId": "listTmpHealthElements",
        "parameters": [
          {
            "name": "firstHealthElementId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/healthElement/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a healthElement by id",
        "description": "Returns an instance of healthElement.",
        "operationId": "getTmpHealthElement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/form/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List forms with the current user",
        "description": "Returns paginated forms.",
        "operationId": "listTmpForms",
        "parameters": [
          {
            "name": "firstFormId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListFormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/form/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a form by id",
        "description": "Returns an instance of form.",
        "operationId": "getTmpForm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/entityTemplate/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List entityTemplates with the current user",
        "description": "Returns paginated entityTemplates.",
        "operationId": "listTmpEntityTemplates",
        "parameters": [
          {
            "name": "firstEntityTemplateId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListEntityTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/entityTemplate/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a entityTemplate by id",
        "description": "Returns an instance of entityTemplate.",
        "operationId": "getTmpEntityTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/document/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List documents with the current user",
        "description": "Returns paginated documents.",
        "operationId": "listTmpDocuments",
        "parameters": [
          {
            "name": "firstDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListDocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/document/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a document by id",
        "description": "Returns an instance of document.",
        "operationId": "getTmpDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/contact/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List contacts with the current user",
        "description": "Returns paginated contacts.",
        "operationId": "listTmpContacts",
        "parameters": [
          {
            "name": "firstContactId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListInvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/contact/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a contact by id",
        "description": "Returns an instance of contact.",
        "operationId": "getTmpContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/classification/list": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "List classifications with the current user",
        "description": "Returns paginated classifications.",
        "operationId": "listTmpClassifications",
        "parameters": [
          {
            "name": "firstClassificationId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListClassificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tmp/classification/byId/{id}": {
      "get": {
        "tags": [
          "tmp"
        ],
        "summary": "Get a classification by id",
        "description": "Returns an instance of classification.",
        "operationId": "getTmpClassification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/timeTable/{timeTableId}": {
      "get": {
        "tags": [
          "timeTable"
        ],
        "summary": "Gets a timeTable",
        "operationId": "getTimeTable",
        "parameters": [
          {
            "name": "timeTableId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTableDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tarification/{type}/{tarification}/{version}": {
      "get": {
        "tags": [
          "tarification"
        ],
        "summary": "Get a tarification",
        "description": "Get a tarification based on ID or (tarification,type,version) as query strings. (tarification,type,version) is unique.",
        "operationId": "getTarificationWithParts",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Tarification type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tarification",
            "in": "path",
            "description": "Tarification tarification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Tarification version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TarificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tarification/{tarificationId}": {
      "get": {
        "tags": [
          "tarification"
        ],
        "summary": "Get a tarification",
        "description": "Get a tarification based on ID or (tarification,type,version) as query strings. (tarification,type,version) is unique.",
        "operationId": "getTarification",
        "parameters": [
          {
            "name": "tarificationId",
            "in": "path",
            "description": "Tarification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TarificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tarification/byRegionTypeTarification": {
      "get": {
        "tags": [
          "tarification"
        ],
        "summary": "Finding tarifications by tarification, type and version",
        "description": "Returns a list of tarifications matched with given input.",
        "operationId": "findTarificationsBy_1",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "Tarification region",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Tarification type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tarification",
            "in": "query",
            "description": "Tarification tarification",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Tarification version",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TarificationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/tarification/byLabel": {
      "get": {
        "tags": [
          "tarification"
        ],
        "summary": "Finding tarifications by tarification, type and version with pagination.",
        "description": "Returns a list of tarifications matched with given input.",
        "operationId": "findTarificationsByLabel",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A tarification document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListTarificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/receipt/{receiptId}": {
      "get": {
        "tags": [
          "receipt"
        ],
        "summary": "Gets a receipt",
        "operationId": "getReceipt",
        "parameters": [
          {
            "name": "receiptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/receipt/{receiptId}/attachment/{attachmentId}": {
      "get": {
        "tags": [
          "receipt"
        ],
        "summary": "Get an attachment",
        "operationId": "getReceiptAttachment",
        "parameters": [
          {
            "name": "receiptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/receipt/byRef/{ref}": {
      "get": {
        "tags": [
          "receipt"
        ],
        "summary": "Gets a receipt",
        "operationId": "listByReference",
        "parameters": [
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReceiptDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/place/{placeId}": {
      "get": {
        "tags": [
          "place"
        ],
        "summary": "Gets an place",
        "operationId": "getPlace",
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/{patientId}": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Get patient",
        "description": "It gets patient administrative data.",
        "operationId": "getPatient",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/{patientId}/keys": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Get the patient (identified by patientId) hcparty keys. Those keys are AES keys (encrypted) used to share information between HCPs and a patient.",
        "description": "This endpoint is used to recover all keys that have already been created and that can be used to share information with this patient. It returns a map with the following structure: ID of the owner of the encrypted AES key -> encrypted AES key. The returned encrypted AES keys will have to be decrypted using the patient's private key.",
        "operationId": "getPatientHcPartyKeysForDelegate",
        "parameters": [
          {
            "name": "patientId",
            "in": "path",
            "description": "The patient Id for which information is shared",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HcPartyKeyForDelegate"
                },
                "example": "{\n    \"hcparty 1 delegator ID\": \"AES hcparty key (encrypted using patient public RSA key)\"\n    \"hcparty 2 delegator ID\": \"other AES hcparty key (encrypted using patient public RSA key)\"\n}"
              }
            }
          },
          "401": {
            "description": "Unauthorized operation: the provided credentials are invalid",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/{hcPartyId}/{id}": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Get patient by identifier",
        "description": "It gets patient administrative data based on the identifier (root & extension) parameters.",
        "operationId": "getPatientByHealthcarepartyAndIdentifier",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "system",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/modifiedAfter/{date}": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "List patients that have been modified after the provided date",
        "description": "Returns a list of patients that have been modified after the provided date",
        "operationId": "findPatientsModifiedAfter",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination the date of the first element of the new page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/merges/{date}": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "List patients that have been merged towards another patient ",
        "description": "Returns a list of patients that have been merged after the provided date",
        "operationId": "listOfMergesAfter",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/hcParty/{hcPartyId}/count": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Get count of patients for a specific HcParty or for the current HcParty ",
        "description": "Returns the count of patients",
        "operationId": "countOfPatients",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "description": "Healthcare party id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/fuzzy": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Filter patients for the current user (HcParty) ",
        "description": "Returns a list of patients",
        "operationId": "fuzzySearch",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "The first name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "The last name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "description": "The date of birth",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/deleted/by_name": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Find deleted patients",
        "description": "Returns a list of deleted patients, by name and/or firstname prefix, if any.",
        "operationId": "listDeletedPatientsByName",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "description": "First name prefix",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last name prefix",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PatientDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/deleted/byDate": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Find deleted patients",
        "description": "Returns a list of deleted patients, within the specified time period, if any.",
        "operationId": "findDeletedPatients",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter deletions after this date (unix epoch), included",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter deletions before this date (unix epoch), included",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/byNameBirthSsinAuto": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Find patients for the current user (HcParty) ",
        "description": "Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "findPatientsByNameBirthSsinAuto",
        "parameters": [
          {
            "name": "healthcarePartyId",
            "in": "query",
            "description": "HealthcareParty Id, if unset will user user's hcpId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filterValue",
            "in": "query",
            "description": "Optional value for filtering results",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Optional value for providing a sorting direction ('asc', 'desc'). Set to 'asc' by default.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/byHcPartyId": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "List patients by pages for a specific HcParty",
        "description": "Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.",
        "operationId": "findPatientsIdsByHealthcareParty",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "description": "Healthcare party id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The page first id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListString"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/byExternalId/{externalId}": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Get the patient having the provided externalId",
        "operationId": "getPatientByExternalId",
        "parameters": [
          {
            "name": "externalId",
            "in": "path",
            "description": "A external ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/patient/byAccess/{userId}": {
      "get": {
        "tags": [
          "patient"
        ],
        "summary": "Get Paginated List of Patients sorted by Access logs descending",
        "operationId": "findPatientsByAccessLogUserAfterDate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "A User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessType",
            "in": "query",
            "description": "The type of access (COMPUTER or USER)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start search epoch",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListPatientDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/{messageId}": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Gets a message",
        "operationId": "getMessage",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/{messageId}/children": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Get children messages of provided message",
        "operationId": "getChildrenMessages",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byTransportGuid": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Get all messages (paginated) for current HC Party and provided transportGuid",
        "operationId": "findMessagesByTransportGuid",
        "parameters": [
          {
            "name": "transportGuid",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "received",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hcpId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byTransportGuidSentDate": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Get all messages starting by a prefix between two date",
        "operationId": "findMessagesByTransportGuidSentDate",
        "parameters": [
          {
            "name": "transportGuid",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hcpId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byToAddress": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Get all messages (paginated) for current HC Party and provided to address",
        "operationId": "findMessagesByToAddress",
        "parameters": [
          {
            "name": "toAddress",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reverse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hcpId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "List messages found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "findMessagesByHCPartyPatientForeignKeys",
        "parameters": [
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/byFromAddress": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Get all messages (paginated) for current HC Party and provided from address",
        "operationId": "findMessagesByFromAddress",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "hcpId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListMessageDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/medicallocation/{locationId}": {
      "get": {
        "tags": [
          "medicalLocation"
        ],
        "summary": "Gets a medical location",
        "operationId": "getMedicalLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalLocationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/keyword/{keywordId}": {
      "get": {
        "tags": [
          "keyword"
        ],
        "summary": "Get a keyword",
        "operationId": "getKeyword",
        "parameters": [
          {
            "name": "keywordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/keyword/byUser/{userId}": {
      "get": {
        "tags": [
          "keyword"
        ],
        "summary": "Get keywords by user",
        "operationId": "getKeywordsByUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KeywordDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/{invoiceId}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets an invoice",
        "operationId": "getInvoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "invoice"
        ],
        "summary": "Deletes an invoice",
        "operationId": "deleteInvoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocIdentifier"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/toPatients": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listToPatients",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/toPatients/unsent": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listToPatientsUnsent",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/toInsurances": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listToInsurances",
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/toInsurances/unsent": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listToInsurancesUnsent",
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/to/{recipientIds}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listInvoicesByRecipientsIds",
        "parameters": [
          {
            "name": "recipientIds",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/codes/{minOccurences}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get the list of all used tarifications frequencies in invoices",
        "operationId": "getTarificationsCodesOccurences",
        "parameters": [
          {
            "name": "minOccurences",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LabelledOccurenceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byauthor/{hcPartyId}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "findInvoicesByAuthor",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListInvoiceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byServiceIds/{serviceIds}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listInvoicesByServiceIds",
        "parameters": [
          {
            "name": "serviceIds",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byIds/{invoiceIds}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Gets all invoices for author at date",
        "operationId": "listInvoicesByIds",
        "parameters": [
          {
            "name": "invoiceIds",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byHcpartySendingModeStatusDate/{hcPartyId}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "Get all invoices by author, by sending mode, by status and by date",
        "operationId": "listInvoicesByHcpartySendingModeStatusDate",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendingMode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List invoices found By Healthcare Party and secret foreign patient keys.",
        "description": "Keys have to delimited by coma",
        "operationId": "listInvoicesByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byHcPartySecretForeignKeys/delegations": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List helement stubs found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listInvoicesDelegationsStubsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byHcPartyGroupId/{hcPartyId}/{groupId}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List invoices by groupId",
        "description": "Keys have to delimited by coma",
        "operationId": "listInvoicesByHcPartyAndGroupId",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/invoice/byHcParty/{hcPartyId}/mediumType/{sentMediumType}/invoiceType/{invoiceType}/sent/{sent}": {
      "get": {
        "tags": [
          "invoice"
        ],
        "summary": "List invoices by type, sent or unsent",
        "description": "Keys have to delimited by coma",
        "operationId": "listInvoicesByHcPartySentMediumTypeInvoiceTypeSentDate",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sentMediumType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "cdrom",
                "eattest",
                "efact",
                "email",
                "mediprima",
                "paper",
                "stat"
              ]
            }
          },
          {
            "name": "invoiceType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "patient",
                "mutualfund",
                "payingagency",
                "insurance",
                "efact",
                "other"
              ]
            }
          },
          {
            "name": "sent",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/insurance/{insuranceId}": {
      "get": {
        "tags": [
          "insurance"
        ],
        "summary": "Gets an insurance",
        "operationId": "getInsurance",
        "parameters": [
          {
            "name": "insuranceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/InsuranceDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "insurance"
        ],
        "summary": "Deletes an insurance",
        "operationId": "deleteInsurance",
        "parameters": [
          {
            "name": "insuranceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocIdentifier"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/insurance/byName/{insuranceName}": {
      "get": {
        "tags": [
          "insurance"
        ],
        "summary": "Gets an insurance",
        "operationId": "listInsurancesByName",
        "parameters": [
          {
            "name": "insuranceName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsuranceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/insurance/byCode/{insuranceCode}": {
      "get": {
        "tags": [
          "insurance"
        ],
        "summary": "Gets an insurance",
        "operationId": "listInsurancesByCode",
        "parameters": [
          {
            "name": "insuranceCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsuranceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/v": {
      "get": {
        "tags": [
          "icure"
        ],
        "summary": "Get version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/r": {
      "get": {
        "tags": [
          "icure"
        ],
        "summary": "Get replication info",
        "operationId": "getReplicationInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicationInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/r/{id}": {
      "get": {
        "tags": [
          "icure"
        ],
        "summary": "Get replication info",
        "operationId": "getReplicatorInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicatorDocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/p": {
      "get": {
        "tags": [
          "icure"
        ],
        "summary": "Get process info",
        "operationId": "getProcessInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/ok": {
      "get": {
        "tags": [
          "icure"
        ],
        "summary": "Check if a user exists",
        "operationId": "isReady",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/icure/i": {
      "get": {
        "tags": [
          "icure"
        ],
        "summary": "Get index info",
        "operationId": "getIndexingInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IndexingInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/{healthElementId}": {
      "get": {
        "tags": [
          "healthElement"
        ],
        "summary": "Get a health element",
        "operationId": "getHealthElement",
        "parameters": [
          {
            "name": "healthElementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthElementDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "healthElement"
        ],
        "summary": "List health elements found By Healthcare Party and secret foreign keyelementIds.",
        "description": "Keys hast to delimited by coma",
        "operationId": "listHealthElementsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthElementDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/helement/byHcPartySecretForeignKeys/delegations": {
      "get": {
        "tags": [
          "healthElement"
        ],
        "summary": "List helement stubs found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listHealthElementsDelegationsStubsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/{parentId}/children": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Find children of an healthcare parties",
        "description": "Return a list of children hcp.",
        "operationId": "listHealthcarePartiesByParentId",
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthcarePartyDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/{healthcarePartyId}": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Get a healthcareParty by his ID",
        "description": "General information about the healthcare Party",
        "operationId": "getHealthcareParty",
        "parameters": [
          {
            "name": "healthcarePartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/{healthcarePartyId}/publicKey": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Get public key of a healthcare party",
        "description": "Returns the public key of a healthcare party in Hex",
        "operationId": "getPublicKey",
        "parameters": [
          {
            "name": "healthcarePartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PublicKeyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/current": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Get the current healthcare party if logged in.",
        "description": "General information about the current healthcare Party",
        "operationId": "getCurrentHealthcareParty",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/bySpecialityAndPostCode/{type}/{spec}/{firstCode}/to/{lastCode}": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Find healthcare parties by name with(out) pagination",
        "description": "Returns a list of healthcare parties.",
        "operationId": "findHealthcarePartiesBySpecialityAndPostCode",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The type of the HCP (persphysician)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "spec",
            "in": "path",
            "description": "The speciality of the HCP",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstCode",
            "in": "path",
            "description": "The first postCode for the HCP",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastCode",
            "in": "path",
            "description": "The last postCode for the HCP",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/byNihiiOrSsin/{searchValue}": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Find healthcare parties by nihii or ssin with(out) pagination",
        "description": "Returns a list of healthcare parties.",
        "operationId": "findHealthcarePartiesBySsinOrNihii",
        "parameters": [
          {
            "name": "searchValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "A healthcare party Last name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A healthcare party document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/byName": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Find healthcare parties by name with(out) pagination",
        "description": "Returns a list of healthcare parties.",
        "operationId": "findHealthcarePartiesByName",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The Last name search value",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "A healthcare party Last name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A healthcare party document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "desc",
            "in": "query",
            "description": "Descending",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListHealthcarePartyDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/byNameStrict/{name}": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Find healthcare parties by name with(out) pagination",
        "description": "Returns a list of healthcare parties.",
        "operationId": "listHealthcarePartiesByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The Last name search value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthcarePartyDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/hcparty/byKeys/{healthcarePartyId}": {
      "get": {
        "tags": [
          "healthcareParty"
        ],
        "summary": "Get the HcParty encrypted AES keys indexed by owner",
        "description": "(key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)",
        "operationId": "getHcPartyKeysForDelegate",
        "parameters": [
          {
            "name": "healthcarePartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "List groups",
        "description": "List existing groups",
        "operationId": "listGroups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/group/{id}/r": {
      "get": {
        "tags": [
          "group"
        ],
        "summary": "Get index info",
        "operationId": "getReplicationInfo_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicationInfoDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/frontendmigration/{frontEndMigrationId}": {
      "get": {
        "tags": [
          "frontEndMigration"
        ],
        "summary": "Gets a front end migration",
        "operationId": "getFrontEndMigration",
        "parameters": [
          {
            "name": "frontEndMigrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrontEndMigrationDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "frontEndMigration"
        ],
        "summary": "Deletes a front end migration",
        "operationId": "deleteFrontEndMigration",
        "parameters": [
          {
            "name": "frontEndMigrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocIdentifier"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/frontendmigration/byName/{frontEndMigrationName}": {
      "get": {
        "tags": [
          "frontEndMigration"
        ],
        "summary": "Gets an front end migration",
        "operationId": "getFrontEndMigrationByName",
        "parameters": [
          {
            "name": "frontEndMigrationName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FrontEndMigrationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/{formId}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets a form",
        "operationId": "getForm",
        "parameters": [
          {
            "name": "formId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/uniqueId/{uniqueId}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets the most recent form with the given uniqueId",
        "operationId": "getFormByUniqueId",
        "parameters": [
          {
            "name": "uniqueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/template/{specialityCode}/guid/{formTemplateGuid}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets a form template",
        "operationId": "getFormTemplatesByGuid",
        "parameters": [
          {
            "name": "formTemplateGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "specialityCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/template/bySpecialty/{specialityCode}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets all form templates",
        "operationId": "listFormTemplatesBySpeciality",
        "parameters": [
          {
            "name": "specialityCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadLayout",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/logicalUuid/{logicalUuid}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets the most recent form with the given logicalUuid",
        "operationId": "getFormByLogicalUuid",
        "parameters": [
          {
            "name": "logicalUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FormDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/childrenOf/{formId}/{hcPartyId}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Get a list of forms by parents ids",
        "description": "Keys must be delimited by coma",
        "operationId": "getChildrenForms",
        "parameters": [
          {
            "name": "formId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hcPartyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "List forms found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listFormsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "healthElementId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planOfActionId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formTemplateId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/byHcPartySecretForeignKeys/delegations": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "List form stubs found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listFormsDelegationsStubsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/all/uniqueId/{uniqueId}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets all forms by uniqueId",
        "operationId": "getFormsByUniqueId",
        "parameters": [
          {
            "name": "uniqueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/form/all/logicalUuid/{logicalUuid}": {
      "get": {
        "tags": [
          "form"
        ],
        "summary": "Gets all forms with given logicalUuid",
        "operationId": "getFormsByLogicalUuid",
        "parameters": [
          {
            "name": "logicalUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/{entityTemplateId}": {
      "get": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Get a entityTemplate",
        "description": "Get a entityTemplate based on ID or (entityTemplate,type,version) as query strings. (entityTemplate,type,version) is unique.",
        "operationId": "getEntityTemplate",
        "parameters": [
          {
            "name": "entityTemplateId",
            "in": "path",
            "description": "EntityTemplate id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/findAll/{type}": {
      "get": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Finding entityTemplates by entityTemplate, type and version with pagination.",
        "description": "Returns a list of entityTemplates matched with given input.",
        "operationId": "listAllEntityTemplatesBy",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEntities",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/findAll/{type}/keyword/{keyword}": {
      "get": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Finding entityTemplates by entityTemplate, type and version with pagination.",
        "description": "Returns a list of entityTemplates matched with given input.",
        "operationId": "findAllEntityTemplatesByKeyword",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEntities",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/find/{userId}/{type}": {
      "get": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Finding entityTemplates by userId, entityTemplate, type and version with pagination.",
        "description": "Returns a list of entityTemplates matched with given input.",
        "operationId": "listEntityTemplatesBy",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEntities",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entitytemplate/find/{userId}/{type}/keyword/{keyword}": {
      "get": {
        "tags": [
          "entityTemplate"
        ],
        "summary": "Finding entityTemplates by userId, type and keyword.",
        "description": "Returns a list of entityTemplates matched with given input.",
        "operationId": "listEntityTemplatesByKeyword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyword",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeEntities",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/entityref/latest/{prefix}": {
      "get": {
        "tags": [
          "entityref"
        ],
        "summary": "Find latest reference for a prefix ",
        "operationId": "getLatest",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReferenceDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/{documentId}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Gets a document",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/{documentId}/attachment/{attachmentId}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Load document's attachment",
        "operationId": "getDocumentAttachment",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/woDelegation": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "List documents with no delegation",
        "description": "Keys must be delimited by coma",
        "operationId": "findWithoutDelegation",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/externaluuid/{externalUuid}": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Gets a document",
        "operationId": "getDocumentByExternalUuid",
        "parameters": [
          {
            "name": "externalUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/externaluuid/{externalUuid}/all": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "Get all documents with externalUuid",
        "operationId": "getDocumentsByExternalUuid",
        "parameters": [
          {
            "name": "externalUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/byTypeHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "List documents found By type, By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listDocumentByTypeHCPartyMessageSecretFKeys",
        "parameters": [
          {
            "name": "documentTypeCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/document/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "document"
        ],
        "summary": "List documents found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listDocumentsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/{documentTemplateId}/attachmentText/{attachmentId}": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Download a the document template attachment",
        "operationId": "getAttachmentText",
        "parameters": [
          {
            "name": "documentTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/{documentTemplateId}/attachment/{attachmentId}": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Download a the document template attachment",
        "operationId": "getDocumentTemplateAttachment",
        "parameters": [
          {
            "name": "documentTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/find/all": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Gets all document templates for all users",
        "operationId": "listAllDocumentTemplates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/bySpecialty/{specialityCode}": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Gets all document templates",
        "operationId": "listDocumentTemplatesBySpeciality",
        "parameters": [
          {
            "name": "specialityCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/byDocumentTypeForCurrentUser/{documentTypeCode}": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Gets all document templates by Type For currentUser",
        "operationId": "listDocumentTemplatesByDocumentTypeForCurrentUser",
        "parameters": [
          {
            "name": "documentTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/doctemplate/byDocumentType/{documentTypeCode}": {
      "get": {
        "tags": [
          "documentTemplate"
        ],
        "summary": "Gets all document templates by Type",
        "operationId": "listDocumentTemplatesByDocumentType",
        "parameters": [
          {
            "name": "documentTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/{deviceId}": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "Get Device",
        "description": "It gets device administrative data.",
        "operationId": "getDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "device"
        ],
        "summary": "Delete device.",
        "description": "Response contains the id/rev of deleted device.",
        "operationId": "deleteDevice",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocIdentifier"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/device/{deviceId}/keys": {
      "get": {
        "tags": [
          "device"
        ],
        "summary": "Get the HcParty encrypted AES keys indexed by owner",
        "description": "(key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)",
        "operationId": "getDeviceHcPartyKeysForDelegate",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "The deviceId Id for which information is shared",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/{contactId}": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Get a contact",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/healthElementId/{healthElementId}": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List services linked to a health element",
        "description": "Returns the list of services linked to the provided health element id",
        "operationId": "listServicesByHealthElementId",
        "parameters": [
          {
            "name": "healthElementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/content/empty": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Get an empty content",
        "operationId": "getEmptyContent",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/codes/{codeType}/{minOccurences}": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "Get the list of all used codes frequencies in services",
        "operationId": "getServiceCodesOccurences",
        "parameters": [
          {
            "name": "codeType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minOccurences",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LabelledOccurenceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/service/associationId": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List services by related association id",
        "description": "Returns a list of services",
        "operationId": "listServicesByAssociationId",
        "parameters": [
          {
            "name": "associationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byOpeningDate": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts by opening date parties with(out) pagination",
        "description": "Returns a list of contacts.",
        "operationId": "findContactsByOpeningDate",
        "parameters": [
          {
            "name": "startKey",
            "in": "query",
            "description": "The contact openingDate",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endKey",
            "in": "query",
            "description": "The contact max openingDate",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hcpartyid",
            "in": "query",
            "description": "hcpartyid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A contact party document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartyServiceId": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By Healthcare Party and service Id.",
        "operationId": "listContactByHCPartyServiceId",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listContactsByHCPartyAndPatientSecretFKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planOfActionsIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skipClosedContacts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartySecretForeignKeys/delegations": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By Healthcare Party and secret foreign keys.",
        "description": "Keys must be delimited by coma",
        "operationId": "listContactsDelegationsStubsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IcureStubDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/contact/byHcPartyFormId": {
      "get": {
        "tags": [
          "contact"
        ],
        "summary": "List contacts found By Healthcare Party and form Id.",
        "operationId": "listContactsByHCPartyAndFormId",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/{type}/{code}/{version}": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Get a code",
        "description": "Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.",
        "operationId": "getCodeWithParts",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Code type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "path",
            "description": "Code code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Code version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CodeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/{codeId}": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Get a code",
        "description": "Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.",
        "operationId": "getCode",
        "parameters": [
          {
            "name": "codeId",
            "in": "path",
            "description": "Code id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CodeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/tagtype/byRegionType": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Finding tag types.",
        "description": "Returns a list of tag types matched with given input.",
        "operationId": "listTagTypesBy",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "Code region",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Code type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/codetype/byRegionType": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Finding code types.",
        "description": "Returns a list of code types matched with given input.",
        "operationId": "listCodeTypesBy",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "Code region",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Code type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/byRegionTypeCode": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Finding codes by code, type and version",
        "description": "Returns a list of codes matched with given input.",
        "operationId": "listCodesByRegionTypeCodeVersion",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "description": "Code region",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Code type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Code code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Code version",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CodeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/byLink/{linkType}": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Finding codes by code, type and version with pagination.",
        "description": "Returns a list of codes matched with given input.",
        "operationId": "findCodesByLink",
        "parameters": [
          {
            "name": "linkType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkedId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A code document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListCodeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/code/byLabel": {
      "get": {
        "tags": [
          "code"
        ],
        "summary": "Finding codes by code, type and version with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, pagination is not supported",
        "operationId": "findCodesByLabel",
        "parameters": [
          {
            "name": "region",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A code document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListCodeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classificationTemplate/{classificationTemplateId}": {
      "get": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "Get a classification Template",
        "operationId": "getClassificationTemplate",
        "parameters": [
          {
            "name": "classificationTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationTemplateDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classificationTemplate/byIds/{ids}": {
      "get": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "Get a list of classifications Templates",
        "description": "Ids are seperated by a coma",
        "operationId": "getClassificationTemplateByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classificationTemplate/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "classificationTemplate"
        ],
        "summary": "List classification Templates found By Healthcare Party and secret foreign keyelementIds.",
        "description": "Keys hast to delimited by coma",
        "operationId": "listClassificationTemplatesByHCPartyPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationTemplateDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification/{classificationId}": {
      "get": {
        "tags": [
          "classification"
        ],
        "summary": "Get a classification Template",
        "operationId": "getClassification",
        "parameters": [
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ClassificationDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification/byIds/{ids}": {
      "get": {
        "tags": [
          "classification"
        ],
        "summary": "Get a list of classifications",
        "description": "Ids are seperated by a coma",
        "operationId": "getClassificationByHcPartyId",
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/classification/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "classification"
        ],
        "summary": "List classification Templates found By Healthcare Party and secret foreign keyelementIds.",
        "description": "Keys hast to delimited by coma",
        "operationId": "findClassificationsByHCPartyPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClassificationDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItemType/{calendarItemTypeId}": {
      "get": {
        "tags": [
          "calendarItemType"
        ],
        "summary": "Gets a calendarItemType",
        "operationId": "getCalendarItemType",
        "parameters": [
          {
            "name": "calendarItemTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarItemTypeDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItemType/includeDeleted": {
      "get": {
        "tags": [
          "calendarItemType"
        ],
        "summary": "Gets all calendarItemTypes include deleted",
        "operationId": "getCalendarItemTypesIncludeDeleted",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemTypeDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/{calendarItemId}": {
      "get": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Gets an calendarItem",
        "operationId": "getCalendarItem",
        "parameters": [
          {
            "name": "calendarItemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarItemDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/byRecurrenceId": {
      "get": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Find CalendarItems by recurrenceId",
        "operationId": "findCalendarItemsByRecurrenceId",
        "parameters": [
          {
            "name": "recurrenceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/calendarItem/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "calendarItem"
        ],
        "summary": "Find CalendarItems by hcparty and patient",
        "operationId": "findCalendarItemsByHCPartyPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarItemDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/v": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Get Samv2 version.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "getSamVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SamVersionDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMPs by label with pagination.",
        "description": "Returns a paginated list of VMPs by matching label. Matches occur per word",
        "operationId": "findPaginatedVmpsByLabel",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "label",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListVmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmpgroup": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMP groups by language label with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedVmpGroupsByLabel",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "label",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmpgroup document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListVmpGroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmpgroup/byGroupCode/{vmpgCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMP groups by cmpgCode with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedVmpGroupsByVmpGroupCode",
        "parameters": [
          {
            "name": "vmpgCode",
            "in": "path",
            "description": "vmpgCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmpgroup document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListVmpGroupDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp/byVmpCode/{vmpCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMPs by group with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedVmpsByVmpCode",
        "parameters": [
          {
            "name": "vmpCode",
            "in": "path",
            "description": "vmpCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListVmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp/byGroupId/{vmpgId}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMPs by group with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedVmpsByGroupId",
        "parameters": [
          {
            "name": "vmpgId",
            "in": "path",
            "description": "vmpgId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListVmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp/byGroupCode/{vmpgCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding VMPs by group with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedVmpsByGroupCode",
        "parameters": [
          {
            "name": "vmpgCode",
            "in": "path",
            "description": "vmpgCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListVmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/vmp/byAtc/{atcCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by atc code with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedAmpsByAtc",
        "parameters": [
          {
            "name": "atcCode",
            "in": "path",
            "description": "atcCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A amp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/substance": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "List all substances.",
        "operationId": "listSubstances",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubstanceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/pharmaform": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "List all pharmaceutical forms.",
        "operationId": "listPharmaceuticalForms",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PharmaceuticalFormDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/nmp": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding NMPs by label with pagination.",
        "description": "Returns a paginated list of NMPs by matching label. Matches occur per word",
        "operationId": "findPaginatedNmpsByLabel",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "label",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListNmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/chap/{chapterName}/{paragraphName}/{verseSeq}/addeddoc/{docSeq}/{language}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "operationId": "getAddedDocument",
        "parameters": [
          {
            "name": "chapterName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paragraphName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verseSeq",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "docSeq",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response",
            "in": "query",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "format": "int32"
                },
                "headerNames": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "locale": {
                  "type": "object",
                  "properties": {
                    "language": {
                      "type": "string"
                    },
                    "unicodeLocaleAttributes": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "unicodeLocaleKeys": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "displayLanguage": {
                      "type": "string"
                    },
                    "displayScript": {
                      "type": "string"
                    },
                    "displayCountry": {
                      "type": "string"
                    },
                    "displayVariant": {
                      "type": "string"
                    },
                    "extensionKeys": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "iso3Language": {
                      "type": "string"
                    },
                    "iso3Country": {
                      "type": "string"
                    },
                    "displayName": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "variant": {
                      "type": "string"
                    }
                  }
                },
                "writer": {
                  "type": "object"
                },
                "committed": {
                  "type": "boolean"
                },
                "characterEncoding": {
                  "type": "string"
                },
                "bufferSize": {
                  "type": "integer",
                  "format": "int32"
                },
                "contentLengthLong": {
                  "type": "integer",
                  "format": "int64",
                  "writeOnly": true
                },
                "contentType": {
                  "type": "string"
                },
                "outputStream": {
                  "type": "object",
                  "properties": {
                    "writeListener": {
                      "type": "object",
                      "writeOnly": true
                    },
                    "ready": {
                      "type": "boolean"
                    }
                  }
                },
                "contentLength": {
                  "type": "integer",
                  "format": "int32",
                  "writeOnly": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "short": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "char": {
                        "type": "string"
                      },
                      "int": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "long": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "float": {
                        "type": "number",
                        "format": "float"
                      },
                      "double": {
                        "type": "number",
                        "format": "double"
                      },
                      "direct": {
                        "type": "boolean"
                      },
                      "readOnly": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/chap/vtms/{chapterName}/{paragraphName}/{language}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "operationId": "getVtmNamesForParagraph",
        "parameters": [
          {
            "name": "chapterName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paragraphName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/chap/verse/{chapterName}/{paragraphName}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "operationId": "getVersesHierarchy",
        "parameters": [
          {
            "name": "chapterName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paragraphName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VerseDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/chap/search/{searchString}/{language}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "operationId": "findParagraphs",
        "parameters": [
          {
            "name": "searchString",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParagraphDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/chap/bycnk/{cnk}/{language}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "operationId": "findParagraphsWithCnk",
        "parameters": [
          {
            "name": "cnk",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParagraphDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/chap/amps/{chapterName}/{paragraphName}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "operationId": "getAmpsForParagraph",
        "parameters": [
          {
            "name": "chapterName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paragraphName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by label with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedAmpsByLabel",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "label",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "An amp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byVmpId/{vmpId}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by vmp id with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedAmpsByVmpId",
        "parameters": [
          {
            "name": "vmpId",
            "in": "path",
            "description": "vmpgCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A amp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byVmpCode/{vmpCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by vmp code with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedAmpsByVmpCode",
        "parameters": [
          {
            "name": "vmpCode",
            "in": "path",
            "description": "vmpCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A amp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byGroupId/{vmpgId}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by group with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedAmpsByGroupId",
        "parameters": [
          {
            "name": "vmpgId",
            "in": "path",
            "description": "vmpgCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byGroupCode/{vmpgCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by group with pagination.",
        "description": "Returns a list of codes matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findPaginatedAmpsByGroupCode",
        "parameters": [
          {
            "name": "vmpgCode",
            "in": "path",
            "description": "vmpgCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key's startKey",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A vmp document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAmpDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_samv2/amp/byDmppCode/{dmppCode}": {
      "get": {
        "tags": [
          "besamv2"
        ],
        "summary": "Finding AMPs by dmpp code",
        "description": "Returns a list of amps matched with given input. If several types are provided, paginantion is not supported",
        "operationId": "findAmpsByDmppCode",
        "parameters": [
          {
            "name": "dmppCode",
            "in": "path",
            "description": "dmppCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AmpDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_result_import/infos/{id}": {
      "get": {
        "tags": [
          "beresultimport"
        ],
        "summary": "Extract general infos from document",
        "operationId": "getInfos",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "full",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultInfoDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_result_import/import/{documentId}/{hcpId}/{language}": {
      "get": {
        "tags": [
          "beresultimport"
        ],
        "summary": "import document",
        "operationId": "doImport",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hcpId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocolIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planOfActionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ctc",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContactDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/be_result_import/canhandle/{id}": {
      "get": {
        "tags": [
          "beresultimport"
        ],
        "summary": "Can we handle this document",
        "operationId": "canHandle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enckeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/auth/token/{method}/{path}": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "token",
        "description": "Get token for subsequent operation",
        "operationId": "token",
        "parameters": [
          {
            "name": "method",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/article/{articleId}": {
      "get": {
        "tags": [
          "article"
        ],
        "summary": "Gets an article",
        "operationId": "getArticle",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ArticleDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/appsettings": {
      "get": {
        "tags": [
          "applicationsettings"
        ],
        "summary": "Gets all application settings",
        "operationId": "getApplicationSettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationSettingsDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/agenda/{agendaId}": {
      "get": {
        "tags": [
          "agenda"
        ],
        "summary": "Gets an agenda",
        "operationId": "getAgenda",
        "parameters": [
          {
            "name": "agendaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgendaDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/agenda/readableForUser": {
      "get": {
        "tags": [
          "agenda"
        ],
        "summary": "Gets readable agendas for user",
        "operationId": "getReadableAgendasForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgendaDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/agenda/byUser": {
      "get": {
        "tags": [
          "agenda"
        ],
        "summary": "Gets all agendas for user",
        "operationId": "getAgendasForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AgendaDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/accesslog/{accessLogId}": {
      "get": {
        "tags": [
          "accessLog"
        ],
        "summary": "Gets an access log",
        "operationId": "getAccessLog",
        "parameters": [
          {
            "name": "accessLogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AccessLogDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/accesslog/byUser": {
      "get": {
        "tags": [
          "accessLog"
        ],
        "summary": "Get Paginated List of Access logs by user after date",
        "operationId": "findAccessLogsByUserAfterDate",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "A User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accessType",
            "in": "query",
            "description": "The type of access (COMPUTER or USER)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start search epoch",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "startKey",
            "in": "query",
            "description": "The start key for pagination",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDocumentId",
            "in": "query",
            "description": "A patient document ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "descending",
            "in": "query",
            "description": "Descending order",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListAccessLogDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/accesslog/byHcPartySecretForeignKeys": {
      "get": {
        "tags": [
          "accessLog"
        ],
        "summary": "List access logs found By Healthcare Party and secret foreign keyelementIds.",
        "operationId": "listAccessLogsByHCPartyAndPatientForeignKeys",
        "parameters": [
          {
            "name": "hcPartyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secretFKeys",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessLogDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/aa/hcparty/inGroup/{groupId}": {
      "get": {
        "tags": [
          "anonymousAccess"
        ],
        "summary": "List healthcare parties for a provided group id",
        "description": "Returns a list of Users/healthcare parties contained in the group owning the providing id. In order to be returned, a healthcare party needs to be linked to a user an this user must have a property 'org.taktik.icure.public' set to a boolean true.",
        "operationId": "listHealthcarePartiesInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Healthcare parties group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAndHealthcarePartyDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/aa/available/inGroup/{groupId}/forUser/{userId}/type/{calendarItemTypeId}": {
      "get": {
        "tags": [
          "anonymousAccess"
        ],
        "summary": "Get Availabilities for HCP and appointmentType",
        "description": "The start of the slot is returned in YYYYDDMMHHmmss format and only slots belonging to public time tables are returned.",
        "operationId": "getAvailabilitiesByPeriodAndCalendarItemTypeId",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calendarItemTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNewPatient",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "hcpId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "placeId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/aa/appointmentType/inGroup/{groupId}/forUser/{userId}": {
      "get": {
        "tags": [
          "anonymousAccess"
        ],
        "summary": "List Calendar Item types for a provided group id and user id",
        "description": "Returns a list of Calendar Item types. In order to be returned, the Calendar Item Type must be linked to a time table enclosed in an Agenda for which an anonymous right has been set (a Right with read permission and null user)",
        "operationId": "listAppointmentTypesForUser",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Healthcare parties group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Healthcare party user id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentTypeAndPlaceDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/user/inGroup/{groupId}/{userId}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a User based on his/her ID.",
        "description": "Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.",
        "operationId": "deleteUserInGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Unit"
                }
              }
            }
          }
        }
      }
    },
    "/rest/v2/message/{messageId}/delegate/{delegateId}": {
      "delete": {
        "tags": [
          "message"
        ],
        "summary": "Deletes a message delegation",
        "operationId": "deleteDelegation",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MessageDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HcPartyKeyForDelegate": {
        "type": "<String, String>"
      },
      "CodeStubDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes"
      },
      "DeviceDto": {
        "required": [
          "aesExchangeKeys",
          "codes",
          "hcPartyKeys",
          "id",
          "identifiers",
          "lostHcPartyKeys",
          "privateKeyShamirPartitions",
          "properties",
          "tags",
          "transferKeys"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierDto"
            }
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "externalId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "brand": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "serialNumber": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "picture": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          },
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          },
          "hcPartyKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself.",
              "items": {
                "type": "string",
                "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself."
              }
            },
            "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself."
          },
          "aesExchangeKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }",
                "items": {
                  "type": "string",
                  "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
                }
              },
              "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
            },
            "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
          },
          "transferKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
              },
              "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
            },
            "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
          },
          "lostHcPartyKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey.",
            "items": {
              "type": "string",
              "description": "The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey."
            }
          },
          "privateKeyShamirPartitions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"threshold⎮partition in hex\" encrypted using the the partition's holder's public RSA key"
            },
            "description": "The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"threshold⎮partition in hex\" encrypted using the the partition's holder's public RSA key"
          },
          "publicKey": {
            "type": "string",
            "description": "The public key of this hcp"
          }
        },
        "description": "This entity is a root level object. It represents a device. It is serialized in JSON and saved in the underlying icure-device CouchDB database."
      },
      "IdentifierDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "assigner": {
            "type": "string"
          },
          "start": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "system": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "use": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PropertyStubDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/PropertyTypeStubDto"
          },
          "typedValue": {
            "$ref": "#/components/schemas/TypedValueDtoObject"
          },
          "deletionDate": {
            "type": "integer",
            "format": "int64"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "PropertyTypeStubDto": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "INTEGER",
              "DOUBLE",
              "STRING",
              "DATE",
              "CLOB",
              "JSON"
            ]
          }
        }
      },
      "TypedValueDtoObject": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "BOOLEAN",
              "INTEGER",
              "DOUBLE",
              "STRING",
              "DATE",
              "CLOB",
              "JSON"
            ]
          },
          "booleanValue": {
            "type": "boolean"
          },
          "integerValue": {
            "type": "integer",
            "format": "int32"
          },
          "doubleValue": {
            "type": "number",
            "format": "double"
          },
          "stringValue": {
            "type": "string"
          },
          "dateValue": {
            "type": "string",
            "format": "date-time"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "IdWithRevDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          }
        }
      },
      "AuthenticationTokenDto": {
        "required": [
          "creationTime",
          "token",
          "validity"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Encrypted token"
          },
          "creationTime": {
            "type": "integer",
            "description": "Validity starting time of the token",
            "format": "int64"
          },
          "validity": {
            "type": "integer",
            "description": "Token validity in seconds",
            "format": "int64"
          }
        },
        "description": "Encrypted and time-limited Authentication tokens used for inter-applications authentication"
      },
      "PermissionDto": {
        "required": [
          "grants",
          "revokes"
        ],
        "type": "object",
        "properties": {
          "grants": {
            "uniqueItems": true,
            "type": "array",
            "description": "Granted permissions.",
            "items": {
              "$ref": "#/components/schemas/PermissionItemDto"
            }
          },
          "revokes": {
            "uniqueItems": true,
            "type": "array",
            "description": "Revoked permissions.",
            "items": {
              "$ref": "#/components/schemas/PermissionItemDto"
            }
          }
        },
        "description": "If permission to modify patient data is granted or revoked"
      },
      "PermissionItemDto": {
        "required": [
          "predicate",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "AUTHENTICATE",
              "ADMIN",
              "PATIENT_VIEW",
              "PATIENT_CREATE",
              "PATIENT_CHANGE_DELETE",
              "MEDICAL_DATA_VIEW",
              "MEDICAL_DATA_CREATE",
              "MEDICAL_CHANGE_DELETE",
              "FINANCIAL_DATA_VIEW",
              "FINANCIAL_DATA_CREATE",
              "FINANCIAL_CHANGE_DELETE"
            ]
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        },
        "description": "Revoked permissions."
      },
      "Predicate": {
        "type": "object"
      },
      "UserDto": {
        "required": [
          "applicationTokens",
          "authenticationTokens",
          "autoDelegations",
          "id",
          "permissions",
          "properties",
          "roles"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the Id of the user. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "the revision of the user in the database, used for conflict management / optimistic locking."
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "created": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Last name of the user. This is the official last name that should be used for official administrative purposes."
          },
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "description": "Extra properties for the user. Those properties are typed (see class Property)",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          },
          "permissions": {
            "uniqueItems": true,
            "type": "array",
            "description": "If permission to modify patient data is granted or revoked",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "description": "Roles specified for the user",
            "items": {
              "type": "string",
              "description": "Roles specified for the user"
            }
          },
          "type": {
            "type": "string",
            "description": "Authorization source for user. 'Database', 'ldap' or 'token'",
            "enum": [
              "database",
              "ldap",
              "token"
            ]
          },
          "status": {
            "type": "string",
            "description": "State of user's activeness: 'Active', 'Disabled' or 'Registering'",
            "enum": [
              "ACTIVE",
              "DISABLED",
              "REGISTERING"
            ]
          },
          "login": {
            "type": "string",
            "description": "Username for this user. We encourage using an email address"
          },
          "passwordHash": {
            "type": "string",
            "description": "Hashed version of the password (BCrypt is used for hashing)"
          },
          "secret": {
            "type": "string",
            "description": "Secret token used to verify 2fa"
          },
          "use2fa": {
            "type": "boolean",
            "description": "Whether the user has activated two factors authentication"
          },
          "groupId": {
            "type": "string",
            "description": "id of the group (practice/hospital) the user is member of"
          },
          "healthcarePartyId": {
            "type": "string",
            "description": "Id of the healthcare party if the user is a healthcare party."
          },
          "patientId": {
            "type": "string",
            "description": "Id of the patient if the user is a patient"
          },
          "deviceId": {
            "type": "string",
            "description": "Id of the device if the user is a device"
          },
          "autoDelegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "Delegations that are automatically generated client side when a new database object is created by this user",
              "items": {
                "type": "string",
                "description": "Delegations that are automatically generated client side when a new database object is created by this user"
              }
            },
            "description": "Delegations that are automatically generated client side when a new database object is created by this user"
          },
          "createdDate": {
            "type": "string",
            "description": "the timestamp (unix epoch in ms) of creation of the user, will be filled automatically if missing. Not enforced by the application server.",
            "format": "date-time"
          },
          "termsOfUseDate": {
            "type": "string",
            "description": "the timestamp (unix epoch in ms) of the latest validation of the terms of use of the application",
            "format": "date-time"
          },
          "email": {
            "type": "string",
            "description": "email address of the user (used for token exchange or password recovery)."
          },
          "mobilePhone": {
            "type": "string",
            "description": "mobile phone of the user (used for token exchange or password recovery)."
          },
          "applicationTokens": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "deprecated": true
          },
          "authenticationTokens": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AuthenticationTokenDto"
            },
            "description": "Encrypted and time-limited Authentication tokens used for inter-applications authentication"
          }
        },
        "description": "This entity is a root level object. It represents an user that can log in to the iCure platform. It is serialized in JSON and saved in the underlying icure-base CouchDB database."
      },
      "AddressDto": {
        "required": [
          "telecoms"
        ],
        "type": "object",
        "properties": {
          "addressType": {
            "type": "string",
            "description": "The type of place the address represents, ex: home, office, hospital, clinic, etc. ",
            "enum": [
              "home",
              "work",
              "vacation",
              "hospital",
              "clinic",
              "hq",
              "other",
              "temporary",
              "postal",
              "diplomatic",
              "reference"
            ]
          },
          "descr": {
            "type": "string",
            "description": "Descriptive notes about the address"
          },
          "street": {
            "type": "string",
            "description": "Street name"
          },
          "houseNumber": {
            "type": "string",
            "description": "Building / house number"
          },
          "postboxNumber": {
            "type": "string",
            "description": "Post / PO box number"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/PIN/ZIP/Area code"
          },
          "city": {
            "type": "string",
            "description": "Name of city in the address"
          },
          "state": {
            "type": "string",
            "description": "Name of state in the Address"
          },
          "country": {
            "type": "string",
            "description": "Name / code of country in the address"
          },
          "note": {
            "type": "string",
            "description": "Additional notes"
          },
          "telecoms": {
            "type": "array",
            "description": "List of other contact details available through telecom services, ex: email, phone number, fax, etc.",
            "items": {
              "$ref": "#/components/schemas/TelecomDto"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity represents an Address"
      },
      "DelegationDto": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string"
          },
          "delegatedTo": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
      },
      "EmployerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "addresse": {
            "$ref": "#/components/schemas/AddressDto"
          }
        }
      },
      "EmploymentInfoDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "professionType": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "employer": {
            "$ref": "#/components/schemas/EmployerDto"
          }
        }
      },
      "FinancialInstitutionInformationDto": {
        "required": [
          "preferredFiiForPartners"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "bankAccount": {
            "type": "string"
          },
          "bic": {
            "type": "string"
          },
          "proxyBankAccount": {
            "type": "string"
          },
          "proxyBic": {
            "type": "string"
          },
          "preferredFiiForPartners": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "Financial information (Bank, bank account) used to reimburse the patient."
      },
      "InsurabilityDto": {
        "required": [
          "parameters"
        ],
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Insurance extra parameters."
            },
            "description": "Insurance extra parameters."
          },
          "hospitalisation": {
            "type": "boolean",
            "description": "Is hospitalization covered."
          },
          "ambulatory": {
            "type": "boolean",
            "description": "Is outpatient care covered."
          },
          "dental": {
            "type": "boolean",
            "description": "Is dental care covered."
          },
          "identificationNumber": {
            "type": "string",
            "description": "Identification number of the patient at the insurance."
          },
          "insuranceId": {
            "type": "string",
            "description": "Id of the Insurance."
          },
          "startDate": {
            "type": "integer",
            "description": "Start date of the coverage (YYYYMMDD).",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "description": "End date of the coverage (YYYYMMDD).",
            "format": "int64"
          },
          "titularyId": {
            "type": "string",
            "description": "UUID of the contact person who is the policyholder of the insurance (when the patient is covered by the insurance of a third person)."
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This class represents a coverage of a patient by an insurance during a period or time."
      },
      "MedicalHouseContractDto": {
        "required": [
          "forcedSuspension",
          "gp",
          "kine",
          "noGp",
          "noKine",
          "noNurse",
          "nurse",
          "options",
          "ptd",
          "receipts"
        ],
        "type": "object",
        "properties": {
          "contractId": {
            "type": "string"
          },
          "validFrom": {
            "type": "integer",
            "format": "int64"
          },
          "validTo": {
            "type": "integer",
            "format": "int64"
          },
          "mmNihii": {
            "type": "string"
          },
          "hcpId": {
            "type": "string"
          },
          "changeType": {
            "type": "string",
            "enum": [
              "inscriptionStart",
              "inscriptionEnd",
              "suspension",
              "coverageChange"
            ]
          },
          "parentContractId": {
            "type": "string"
          },
          "changedBy": {
            "type": "string"
          },
          "startOfContract": {
            "type": "integer",
            "format": "int64"
          },
          "startOfCoverage": {
            "type": "integer",
            "format": "int64"
          },
          "endOfContract": {
            "type": "integer",
            "format": "int64"
          },
          "endOfCoverage": {
            "type": "integer",
            "format": "int64"
          },
          "kine": {
            "type": "boolean",
            "default": false
          },
          "gp": {
            "type": "boolean",
            "default": false
          },
          "ptd": {
            "type": "boolean",
            "default": false
          },
          "nurse": {
            "type": "boolean",
            "default": false
          },
          "noKine": {
            "type": "boolean",
            "default": false
          },
          "noGp": {
            "type": "boolean",
            "default": false
          },
          "noNurse": {
            "type": "boolean",
            "default": false
          },
          "unsubscriptionReasonId": {
            "type": "integer",
            "format": "int32"
          },
          "ptdStart": {
            "type": "integer",
            "format": "int64"
          },
          "ptdEnd": {
            "type": "integer",
            "format": "int64"
          },
          "ptdLastInvoiced": {
            "type": "integer",
            "format": "int64"
          },
          "startOfSuspension": {
            "type": "integer",
            "format": "int64"
          },
          "endOfSuspension": {
            "type": "integer",
            "format": "int64"
          },
          "suspensionReason": {
            "type": "string",
            "enum": [
              "notInsured",
              "noReasonGiven",
              "isHospitalized",
              "outsideOfCountry",
              "changeOfMutuality"
            ]
          },
          "suspensionSource": {
            "type": "string"
          },
          "forcedSuspension": {
            "type": "boolean",
            "default": false
          },
          "signatureType": {
            "type": "string",
            "enum": [
              "holderEid",
              "holderPaper",
              "legalrepresentativeEid",
              "legalrepresentativePaper"
            ]
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "receipts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "Contracts between the patient and the healthcare entity."
      },
      "PartnershipDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of relationship.",
            "enum": [
              "primary_contact",
              "primary_contact_for",
              "family",
              "friend",
              "counselor",
              "contact",
              "brother",
              "brotherinlaw",
              "child",
              "daughter",
              "employer",
              "father",
              "grandchild",
              "grandparent",
              "husband",
              "lawyer",
              "mother",
              "neighbour",
              "notary",
              "partner",
              "sister",
              "sisterinlaw",
              "son",
              "spouse",
              "stepdaughter",
              "stepfather",
              "stepmother",
              "stepson",
              "tutor",
              "next_of_kin",
              "federal_agency",
              "insurance_company",
              "state_agency",
              "unknown",
              "seealso",
              "refer"
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the relationship.",
            "enum": [
              "active",
              "complicated",
              "past"
            ]
          },
          "partnerId": {
            "type": "string",
            "description": "UUID of the contact person or patient in this relationship."
          },
          "meToOtherRelationshipDescription": {
            "type": "string",
            "deprecated": true
          },
          "otherToMeRelationshipDescription": {
            "type": "string",
            "deprecated": true
          }
        },
        "description": "A relationship between this patient and another person."
      },
      "PatientDto": {
        "required": [
          "active",
          "addresses",
          "aesExchangeKeys",
          "codes",
          "cryptedForeignKeys",
          "deactivationReason",
          "delegations",
          "employementInfos",
          "encryptedAdministrativesDocuments",
          "encryptionKeys",
          "financialInstitutionInformation",
          "hcPartyKeys",
          "id",
          "identifier",
          "insurabilities",
          "languages",
          "lostHcPartyKeys",
          "medicalHouseContracts",
          "mergedIds",
          "names",
          "nonDuplicateIds",
          "parameters",
          "partnerships",
          "patientHealthCareParties",
          "patientProfessions",
          "privateKeyShamirPartitions",
          "properties",
          "schoolingInfos",
          "secretForeignKeys",
          "tags",
          "transferKeys"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the Id of the patient. We encourage using either a v4 UUID or a HL7 Id."
          },
          "identifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierDto"
            }
          },
          "rev": {
            "type": "string",
            "description": "the revision of the patient in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "the firstname (name) of the patient."
          },
          "lastName": {
            "type": "string",
            "description": "the lastname (surname) of the patient. This is the official lastname that should be used for official administrative purposes."
          },
          "names": {
            "type": "array",
            "description": "the list of all names of the patient, also containing the official full name information. Ordered by preference of use. First element is therefore the official name used for the patient in the application",
            "items": {
              "$ref": "#/components/schemas/PersonNameDto"
            }
          },
          "companyName": {
            "type": "string",
            "description": "the name of the company this patient is member of."
          },
          "languages": {
            "type": "array",
            "description": "the list of languages spoken by the patient ordered by fluency (alpha-2 code http://www.loc.gov/standards/iso639-2/ascii_8bits.html).",
            "items": {
              "type": "string",
              "description": "the list of languages spoken by the patient ordered by fluency (alpha-2 code http://www.loc.gov/standards/iso639-2/ascii_8bits.html)."
            }
          },
          "addresses": {
            "type": "array",
            "description": "the list of addresses (with address type).",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          },
          "civility": {
            "type": "string",
            "description": "Mr., Ms., Pr., Dr. ..."
          },
          "gender": {
            "type": "string",
            "description": "the gender of the patient: male, female, indeterminate, changed, changedToMale, changedToFemale, unknown",
            "enum": [
              "male",
              "female",
              "indeterminate",
              "changed",
              "changedToMale",
              "changedToFemale",
              "unknown"
            ]
          },
          "birthSex": {
            "type": "string",
            "description": "the birth sex of the patient: male, female, indeterminate, unknown",
            "enum": [
              "male",
              "female",
              "indeterminate",
              "changed",
              "changedToMale",
              "changedToFemale",
              "unknown"
            ]
          },
          "mergeToPatientId": {
            "type": "string",
            "description": "The id of the patient this patient has been merged with."
          },
          "mergedIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "The ids of the patients that have been merged inside this patient.",
            "items": {
              "type": "string",
              "description": "The ids of the patients that have been merged inside this patient."
            }
          },
          "alias": {
            "type": "string",
            "description": "An alias of the person, nickname, ..."
          },
          "active": {
            "type": "boolean",
            "description": "Is the patient active (boolean).",
            "default": true
          },
          "deactivationReason": {
            "type": "string",
            "description": "When not active, the reason for deactivation.",
            "default": "DeactivationReason.none",
            "enum": [
              "deceased",
              "moved",
              "other_doctor",
              "retired",
              "no_contact",
              "unknown",
              "none"
            ]
          },
          "ssin": {
            "type": "string",
            "description": "Social security inscription number."
          },
          "maidenName": {
            "type": "string",
            "description": "Lastname at birth (can be different of the current name), depending on the country, must be used to design the patient ."
          },
          "spouseName": {
            "type": "string",
            "description": "Lastname of the spouse for a married woman, depending on the country, can be used to design the patient."
          },
          "partnerName": {
            "type": "string",
            "description": "Lastname of the partner, should not be used to design the patient."
          },
          "personalStatus": {
            "type": "string",
            "description": "any of `single`, `in_couple`, `married`, `separated`, `divorced`, `divorcing`, `widowed`, `widower`, `complicated`, `unknown`, `contract`, `other`.",
            "enum": [
              "single",
              "in_couple",
              "married",
              "separated",
              "divorced",
              "divorcing",
              "widowed",
              "widower",
              "complicated",
              "unknown",
              "contract",
              "other",
              "annulled",
              "polygamous"
            ]
          },
          "dateOfBirth": {
            "type": "integer",
            "description": "The birthdate encoded as a fuzzy date on 8 positions (YYYYMMDD) MM and/or DD can be set to 00 if unknown (19740000 is a valid date).",
            "format": "int32"
          },
          "dateOfDeath": {
            "type": "integer",
            "description": "The date of death encoded as a fuzzy date on 8 positions (YYYYMMDD) MM and/or DD can be set to 00 if unknown (19740000 is a valid date).",
            "format": "int32"
          },
          "timestampOfLatestEidReading": {
            "type": "integer",
            "description": "Timestamp of the latest validation of the eID of the person..",
            "format": "int64"
          },
          "placeOfBirth": {
            "type": "string",
            "description": "The place of birth."
          },
          "placeOfDeath": {
            "type": "string",
            "description": "The place of death."
          },
          "deceased": {
            "type": "boolean",
            "description": "Is the patient deceased."
          },
          "education": {
            "type": "string",
            "description": "The level of education (college degree, undergraduate, phd)."
          },
          "profession": {
            "type": "string",
            "description": "The current professional activity."
          },
          "note": {
            "type": "string",
            "description": "A text note (can be confidential, encrypted by default)."
          },
          "administrativeNote": {
            "type": "string",
            "description": "An administrative note, not confidential."
          },
          "nationality": {
            "type": "string",
            "description": "The nationality of the patient."
          },
          "race": {
            "type": "string",
            "description": "The race of the patient."
          },
          "ethnicity": {
            "type": "string",
            "description": "The ethnicity of the patient."
          },
          "preferredUserId": {
            "type": "string",
            "description": "The id of the user that usually handles this patient."
          },
          "picture": {
            "type": "string",
            "description": "A picture usually saved in JPEG format.",
            "format": "byte"
          },
          "externalId": {
            "type": "string",
            "description": "An external (from another source) id with no guarantee or requirement for unicity ."
          },
          "insurabilities": {
            "type": "array",
            "description": "List of insurance coverages (of class Insurability, see below).",
            "items": {
              "$ref": "#/components/schemas/InsurabilityDto"
            }
          },
          "partnerships": {
            "type": "array",
            "description": "List of partners, or persons of contact (of class Partnership, see below).",
            "items": {
              "$ref": "#/components/schemas/PartnershipDto"
            }
          },
          "patientHealthCareParties": {
            "type": "array",
            "description": "Links (usually for therapeutic reasons) between this patient and healthcare parties (of class PatientHealthcareParty).",
            "items": {
              "$ref": "#/components/schemas/PatientHealthCarePartyDto"
            }
          },
          "financialInstitutionInformation": {
            "type": "array",
            "description": "Financial information (Bank, bank account) used to reimburse the patient.",
            "items": {
              "$ref": "#/components/schemas/FinancialInstitutionInformationDto"
            }
          },
          "medicalHouseContracts": {
            "type": "array",
            "description": "Contracts between the patient and the healthcare entity.",
            "items": {
              "$ref": "#/components/schemas/MedicalHouseContractDto"
            }
          },
          "patientProfessions": {
            "type": "array",
            "description": "Codified list of professions exercised by this patient.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "Extra parameters",
              "items": {
                "type": "string",
                "description": "Extra parameters"
              }
            },
            "description": "Extra parameters"
          },
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "description": "Extra properties",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          },
          "hcPartyKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself.",
              "items": {
                "type": "string",
                "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself."
              }
            },
            "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself."
          },
          "aesExchangeKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }",
                "items": {
                  "type": "string",
                  "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
                }
              },
              "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
            },
            "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
          },
          "transferKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
              },
              "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
            },
            "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
          },
          "lostHcPartyKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey.",
            "items": {
              "type": "string",
              "description": "The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey."
            }
          },
          "privateKeyShamirPartitions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"threshold⎮partition in hex\" encrypted using the the partition's holder's public RSA key"
            },
            "description": "The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"threshold⎮partition in hex\" encrypted using the the partition's holder's public RSA key"
          },
          "publicKey": {
            "type": "string",
            "description": "The public key of this hcp"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "nonDuplicateIds": {
            "uniqueItems": true,
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "encryptedAdministrativesDocuments": {
            "uniqueItems": true,
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string",
            "deprecated": true
          },
          "warning": {
            "type": "string",
            "deprecated": true
          },
          "fatherBirthCountry": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "birthCountry": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "nativeCountry": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "socialStatus": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "mainSourceOfIncome": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "schoolingInfos": {
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/SchoolingInfoDto"
            }
          },
          "employementInfos": {
            "type": "array",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/EmploymentInfoDto"
            }
          }
        },
        "description": "This entity is a root level object. It represents a patient It is serialized in JSON and saved in the underlying icure-patient CouchDB database.",
        "x-is-deprecated": {
          "nativeCountry": "true",
          "mainSourceOfIncome": "true",
          "birthCountry": "true",
          "socialStatus": "true",
          "fatherBirthCountry": "true"
        }
      },
      "PatientHealthCarePartyDto": {
        "required": [
          "referral",
          "referralPeriods",
          "sendFormats"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of care/relationship.",
            "enum": [
              "doctor",
              "referral",
              "medicalhouse",
              "retirementhome",
              "hospital",
              "other",
              "referringphysician",
              "managingorganization"
            ]
          },
          "healthcarePartyId": {
            "type": "string",
            "description": "UUID of the hcp."
          },
          "sendFormats": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Preferred format of exchange for diverse means of communication"
            },
            "description": "Preferred format of exchange for diverse means of communication"
          },
          "referralPeriods": {
            "uniqueItems": true,
            "type": "array",
            "description": "Time periods",
            "items": {
              "$ref": "#/components/schemas/ReferralPeriodDto"
            }
          },
          "referral": {
            "type": "boolean",
            "deprecated": true,
            "default": false
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "One or several periods of care by an hcp for this patient"
      },
      "PersonNameDto": {
        "required": [
          "firstNames",
          "prefix",
          "suffix"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "description": "Family name (often called 'Surname')"
          },
          "firstNames": {
            "type": "array",
            "description": "Given names (not always 'first'). Includes middle names. This repeating element order: Given Names appear in the correct order for presenting the name",
            "items": {
              "type": "string",
              "description": "Given names (not always 'first'). Includes middle names. This repeating element order: Given Names appear in the correct order for presenting the name"
            }
          },
          "start": {
            "type": "integer",
            "description": "Starting date of time period when name is/was valid for use. Date encoded as a fuzzy date on 8 positions (YYYYMMDD)",
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "description": "Ending date of time period when name is/was valid for use. Date encoded as a fuzzy date on 8 positions (YYYYMMDD)",
            "format": "int64"
          },
          "prefix": {
            "type": "array",
            "description": "Parts that come before the name. This repeating element order: Prefixes appear in the correct order for presenting the name",
            "items": {
              "type": "string",
              "description": "Parts that come before the name. This repeating element order: Prefixes appear in the correct order for presenting the name"
            }
          },
          "suffix": {
            "type": "array",
            "description": "Parts that come after the name. This repeating element order: Suffixes appear in the correct order for presenting the name",
            "items": {
              "type": "string",
              "description": "Parts that come after the name. This repeating element order: Suffixes appear in the correct order for presenting the name"
            }
          },
          "text": {
            "type": "string",
            "description": "Text representation of the full name"
          },
          "use": {
            "type": "string",
            "description": "What is the use of this name",
            "enum": [
              "usual",
              "official",
              "temp",
              "nickname",
              "anonymous",
              "maiden",
              "old",
              "other"
            ]
          }
        },
        "description": "Non preferred name information of a person"
      },
      "ReferralPeriodDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The date (unix epoch in ms) when the referral period initiated, will be filled instantaneously.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The date (unix epoch in ms) the referral period ended, will be instantaneously filled.",
            "format": "date-time"
          },
          "comment": {
            "type": "string",
            "description": "Comments made during the referral."
          }
        },
        "description": "Time periods"
      },
      "SchoolingInfoDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "school": {
            "type": "string"
          },
          "typeOfEducation": {
            "$ref": "#/components/schemas/CodeStubDto"
          }
        }
      },
      "TelecomDto": {
        "type": "object",
        "properties": {
          "telecomType": {
            "type": "string",
            "description": "The type of telecom method being used, ex: landline phone, mobile phone, email, fax, etc.",
            "enum": [
              "mobile",
              "phone",
              "email",
              "fax",
              "skype",
              "im",
              "medibridge",
              "ehealthbox",
              "apicrypt",
              "web",
              "print",
              "disk",
              "other",
              "pager"
            ]
          },
          "telecomNumber": {
            "type": "string"
          },
          "telecomDescription": {
            "type": "string"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity represents available contact details of a user, reachable by telecom methods"
      },
      "MessageDto": {
        "required": [
          "assignedResults",
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "invoiceIds",
          "metas",
          "readStatus",
          "recipients",
          "secretForeignKeys",
          "senderReferences",
          "tags",
          "toAddresses",
          "unassignedResults"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the message. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "The revision of the message in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "fromAddress": {
            "type": "string",
            "description": "Address of the sender of the message"
          },
          "fromHealthcarePartyId": {
            "type": "string",
            "description": "ID of the healthcare party sending the message"
          },
          "formId": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "description": "Status of the message",
            "format": "int32"
          },
          "recipientsType": {
            "type": "string",
            "description": "The type of user who is the recipient of this message"
          },
          "recipients": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of IDs of healthcare parties to whom the message is addressed",
            "items": {
              "type": "string",
              "description": "List of IDs of healthcare parties to whom the message is addressed"
            }
          },
          "toAddresses": {
            "uniqueItems": true,
            "type": "array",
            "description": "The address of the recipient of the message. Format is of an email address with extra domains defined for mycarenet and ehealth: (efact.mycarenet.be/eattest.mycarenet.be/chapter4.mycarenet.be/ehbox.ehealth.fgov.be)",
            "items": {
              "type": "string",
              "description": "The address of the recipient of the message. Format is of an email address with extra domains defined for mycarenet and ehealth: (efact.mycarenet.be/eattest.mycarenet.be/chapter4.mycarenet.be/ehbox.ehealth.fgov.be)"
            }
          },
          "received": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) when the message was received",
            "format": "int64"
          },
          "sent": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) when the message was sent",
            "format": "int64"
          },
          "metas": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "readStatus": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MessageReadStatusDto"
            },
            "description": "Status showing whether the message is read or not and the time of reading"
          },
          "transportGuid": {
            "type": "string"
          },
          "remark": {
            "type": "string"
          },
          "conversationGuid": {
            "type": "string"
          },
          "subject": {
            "type": "string",
            "description": "Subject for the message"
          },
          "invoiceIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "Set of IDs for invoices in the message",
            "items": {
              "type": "string",
              "description": "Set of IDs for invoices in the message"
            }
          },
          "parentId": {
            "type": "string",
            "description": "ID of a parent in a message conversation"
          },
          "externalRef": {
            "type": "string"
          },
          "unassignedResults": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assignedResults": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "senderReferences": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity is a root level object. It represents a Message. It is serialized in JSON and saved in the underlying CouchDB database."
      },
      "MessageReadStatusDto": {
        "required": [
          "read"
        ],
        "type": "object",
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "read": {
            "type": "boolean",
            "default": false
          }
        },
        "description": "Status showing whether the message is read or not and the time of reading"
      },
      "IdentityDocumentReaderDto": {
        "required": [
          "eidDocumentSupportType",
          "reasonManualEncoding",
          "reasonUsingVignette"
        ],
        "type": "object",
        "properties": {
          "justificatifDocumentNumber": {
            "type": "string"
          },
          "supportSerialNumber": {
            "type": "string"
          },
          "timeReadingEIdDocument": {
            "type": "integer",
            "format": "int64"
          },
          "eidDocumentSupportType": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "reasonManualEncoding": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "reasonUsingVignette": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        }
      },
      "InvoiceDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "invoicingCodes",
          "options",
          "receipts",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the Invoice. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "The revision of the invoice in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "invoiceDate": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) when the invoice was drafted, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "sentDate": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) when the invoice was sent, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "printedDate": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) when the invoice is printed, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "invoicingCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicingCodeDto"
            }
          },
          "receipts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "recipientType": {
            "type": "string",
            "description": "The type of user that receives the invoice, a patient or a healthcare party"
          },
          "recipientId": {
            "type": "string",
            "description": "Id of the recipient of the invoice. For healthcare party and insurance, patient link happens through secretForeignKeys"
          },
          "invoiceReference": {
            "type": "string"
          },
          "thirdPartyReference": {
            "type": "string"
          },
          "thirdPartyPaymentJustification": {
            "type": "string"
          },
          "thirdPartyPaymentReason": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "invoiceType": {
            "type": "string",
            "description": "The format the invoice should follow based on the recipient which could be a patient, mutual fund or paying agency such as the CPAS",
            "enum": [
              "patient",
              "mutualfund",
              "payingagency",
              "insurance",
              "efact",
              "other"
            ]
          },
          "sentMediumType": {
            "type": "string",
            "description": "Medium of the invoice: CD ROM, Email, paper, etc.",
            "enum": [
              "cdrom",
              "eattest",
              "efact",
              "email",
              "mediprima",
              "paper",
              "stat"
            ]
          },
          "interventionType": {
            "type": "string",
            "enum": [
              "total",
              "userfees"
            ]
          },
          "groupId": {
            "type": "string"
          },
          "paymentType": {
            "type": "string",
            "description": "Type of payment, ex: cash, wired, insurance, debit card, etc.",
            "enum": [
              "cash",
              "wired",
              "insurance",
              "creditcard",
              "debitcard",
              "paypal",
              "bitcoin",
              "other"
            ]
          },
          "paid": {
            "type": "number",
            "format": "double"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentDto"
            }
          },
          "gnotionNihii": {
            "type": "string"
          },
          "gnotionSsin": {
            "type": "string"
          },
          "gnotionLastName": {
            "type": "string"
          },
          "gnotionFirstName": {
            "type": "string"
          },
          "gnotionCdHcParty": {
            "type": "string"
          },
          "invoicePeriod": {
            "type": "integer",
            "format": "int32"
          },
          "careProviderType": {
            "type": "string"
          },
          "internshipNihii": {
            "type": "string"
          },
          "internshipSsin": {
            "type": "string"
          },
          "internshipLastName": {
            "type": "string"
          },
          "internshipFirstName": {
            "type": "string"
          },
          "internshipCdHcParty": {
            "type": "string"
          },
          "internshipCbe": {
            "type": "string"
          },
          "supervisorNihii": {
            "type": "string"
          },
          "supervisorSsin": {
            "type": "string"
          },
          "supervisorLastName": {
            "type": "string"
          },
          "supervisorFirstName": {
            "type": "string"
          },
          "supervisorCdHcParty": {
            "type": "string"
          },
          "supervisorCbe": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "encounterLocationName": {
            "type": "string"
          },
          "encounterLocationNihii": {
            "type": "string"
          },
          "encounterLocationNorm": {
            "type": "integer",
            "format": "int32"
          },
          "longDelayJustification": {
            "type": "integer",
            "format": "int32"
          },
          "correctiveInvoiceId": {
            "type": "string"
          },
          "correctedInvoiceId": {
            "type": "string"
          },
          "creditNote": {
            "type": "boolean"
          },
          "creditNoteRelatedInvoiceId": {
            "type": "string"
          },
          "idDocument": {
            "$ref": "#/components/schemas/IdentityDocumentReaderDto"
          },
          "cancelReason": {
            "type": "string"
          },
          "cancelDate": {
            "type": "integer",
            "format": "int64"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity is a root level object. It represents an Invoice. It is serialized in JSON and saved in the underlying iCure CouchDB database."
      },
      "InvoicingCodeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "dateCode": {
            "type": "integer",
            "format": "int64"
          },
          "logicalId": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "contactId": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "tarificationId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "paymentType": {
            "type": "string",
            "enum": [
              "cash",
              "wired",
              "insurance",
              "creditcard",
              "debitcard",
              "paypal",
              "bitcoin",
              "other"
            ]
          },
          "paid": {
            "type": "number",
            "format": "double"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "reimbursement": {
            "type": "number",
            "format": "double"
          },
          "patientIntervention": {
            "type": "number",
            "format": "double"
          },
          "doctorSupplement": {
            "type": "number",
            "format": "double"
          },
          "conventionAmount": {
            "type": "number",
            "format": "double"
          },
          "vat": {
            "type": "number",
            "format": "double"
          },
          "error": {
            "type": "string"
          },
          "contract": {
            "type": "string"
          },
          "contractDate": {
            "type": "integer",
            "format": "int64"
          },
          "units": {
            "type": "integer",
            "format": "int32"
          },
          "side": {
            "type": "integer",
            "format": "int32"
          },
          "timeOfDay": {
            "type": "integer",
            "format": "int32"
          },
          "eidReadingHour": {
            "type": "integer",
            "format": "int32"
          },
          "eidReadingValue": {
            "type": "string"
          },
          "override3rdPayerCode": {
            "type": "integer",
            "format": "int32"
          },
          "override3rdPayerReason": {
            "type": "string"
          },
          "transplantationCode": {
            "type": "integer",
            "format": "int32"
          },
          "prescriberNorm": {
            "type": "integer",
            "format": "int32"
          },
          "percentNorm": {
            "type": "integer",
            "format": "int32"
          },
          "prescriberNihii": {
            "type": "string"
          },
          "relatedCode": {
            "type": "string"
          },
          "prescriptionDate": {
            "type": "integer",
            "format": "int64"
          },
          "derogationMaxNumber": {
            "type": "integer",
            "format": "int32"
          },
          "prescriberSsin": {
            "type": "string"
          },
          "prescriberLastName": {
            "type": "string"
          },
          "prescriberFirstName": {
            "type": "string"
          },
          "prescriberCdHcParty": {
            "type": "string"
          },
          "locationNihii": {
            "type": "string"
          },
          "locationCdHcParty": {
            "type": "string"
          },
          "locationService": {
            "type": "integer",
            "format": "int32"
          },
          "canceled": {
            "type": "boolean"
          },
          "accepted": {
            "type": "boolean"
          },
          "pending": {
            "type": "boolean"
          },
          "resent": {
            "type": "boolean"
          },
          "archived": {
            "type": "boolean"
          },
          "lost": {
            "type": "boolean"
          },
          "insuranceJustification": {
            "type": "integer",
            "format": "int32"
          },
          "cancelPatientInterventionReason": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "integer",
            "format": "int64"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "PaymentDto": {
        "required": [
          "paymentDate"
        ],
        "type": "object",
        "properties": {
          "paymentDate": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "paymentType": {
            "type": "string",
            "enum": [
              "cash",
              "wired",
              "insurance",
              "creditcard",
              "debitcard",
              "paypal",
              "bitcoin",
              "other"
            ]
          },
          "paid": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "CareTeamMemberDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "careTeamMemberType": {
            "type": "string",
            "enum": [
              "physician",
              "specialist",
              "other"
            ]
          },
          "healthcarePartyId": {
            "type": "string"
          },
          "quality": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "List of care team members assigned for the healthcare element."
      },
      "CareTeamMembershipDto": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "careTeamMemberId": {
            "type": "string"
          },
          "membershipType": {
            "type": "string",
            "enum": [
              "doctor",
              "mutuality",
              "patient",
              "specialist",
              "other"
            ]
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "Members of the careteam involved in this approach"
      },
      "EpisodeDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "List of episodes of occurrences of the healthcare element."
      },
      "HealthElementDto": {
        "required": [
          "careTeam",
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "episodes",
          "id",
          "identifiers",
          "plansOfAction",
          "relevant",
          "secretForeignKeys",
          "status",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the healthcare element. We encourage using either a v4 UUID or a HL7 Id."
          },
          "identifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierDto"
            }
          },
          "rev": {
            "type": "string",
            "description": "The revision of the patient in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "healthElementId": {
            "type": "string",
            "description": "The logical id of the healthcare element, used to link together different versions of the same healthcare element. We encourage using either a v4 UUID or a HL7 Id."
          },
          "valueDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) when the healthcare element is noted to have started and also closes on the same date",
            "format": "int64"
          },
          "openingDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the start of the healthcare element.",
            "format": "int64"
          },
          "closingDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) marking the end of the healthcare element.",
            "format": "int64"
          },
          "descr": {
            "type": "string",
            "description": "Description of the healthcare element."
          },
          "note": {
            "type": "string",
            "description": "A text note (can be confidential, encrypted by default)."
          },
          "relevant": {
            "type": "boolean",
            "description": "If the healthcare element is relevant or not (Set relevant by default)."
          },
          "idOpeningContact": {
            "type": "string",
            "description": "Id of the opening contact when the healthcare element was created."
          },
          "idClosingContact": {
            "type": "string",
            "description": "Id of the closing contact for the healthcare element."
          },
          "idService": {
            "type": "string",
            "description": "Id of the service when a service is used to create a healthcare element."
          },
          "status": {
            "type": "integer",
            "description": "bit 0: active/inactive, bit 1: relevant/irrelevant, bit 2 : present/absent, ex: 0 = active,relevant and present",
            "format": "int32"
          },
          "laterality": {
            "type": "string",
            "description": "Left or Right dominance/preference.",
            "enum": [
              "left",
              "right"
            ]
          },
          "plansOfAction": {
            "type": "array",
            "description": "List of healthcare approaches.",
            "items": {
              "$ref": "#/components/schemas/PlanOfActionDto"
            }
          },
          "episodes": {
            "type": "array",
            "description": "List of episodes of occurrences of the healthcare element.",
            "items": {
              "$ref": "#/components/schemas/EpisodeDto"
            }
          },
          "careTeam": {
            "type": "array",
            "description": "List of care team members assigned for the healthcare element.",
            "items": {
              "$ref": "#/components/schemas/CareTeamMemberDto"
            }
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity is a root level object. It represents a healthcare element. It is serialized in JSON and saved in the underlying CouchDB database."
      },
      "PlanOfActionDto": {
        "required": [
          "careTeamMemberships",
          "codes",
          "documentIds",
          "id",
          "relevant",
          "status",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "prescriberId": {
            "type": "string",
            "description": "The id of the hcp who prescribed this healthcare approach"
          },
          "valueDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) when the healthcare approach is noted to have started and also closes on the same date",
            "format": "int64"
          },
          "openingDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the start of the healthcare approach.",
            "format": "int64"
          },
          "closingDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) marking the end of the healthcare approach.",
            "format": "int64"
          },
          "deadlineDate": {
            "type": "integer",
            "description": "The date (unix epoch in ms) when the healthcare approach has to be carried out.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of the healthcare approach."
          },
          "descr": {
            "type": "string",
            "description": "Description of the healthcare approach."
          },
          "note": {
            "type": "string",
            "description": "Note about the healthcare approach."
          },
          "idOpeningContact": {
            "type": "string",
            "description": "Id of the opening contact when the healthcare approach was created."
          },
          "idClosingContact": {
            "type": "string",
            "description": "Id of the closing contact for the healthcare approach."
          },
          "status": {
            "type": "integer",
            "description": "bit 0: active/inactive, bit 1: relevant/irrelevant, bit 2 : present/absent, ex: 0 = active,relevant and present",
            "format": "int32",
            "default": 0
          },
          "documentIds": {
            "uniqueItems": true,
            "type": "array",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "numberOfCares": {
            "type": "integer",
            "description": "The number of individual cares already performed in the course of this healthcare approach",
            "format": "int32",
            "deprecated": true
          },
          "careTeamMemberships": {
            "type": "array",
            "description": "Members of the careteam involved in this approach",
            "items": {
              "$ref": "#/components/schemas/CareTeamMembershipDto"
            }
          },
          "relevant": {
            "type": "boolean",
            "deprecated": true,
            "default": true
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "List of healthcare approaches."
      },
      "FormDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the Id of the form. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "the revision of the form in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "openingDate": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          },
          "logicalUuid": {
            "type": "string"
          },
          "descr": {
            "type": "string",
            "description": "Name/basic description of the form"
          },
          "uniqueId": {
            "type": "string",
            "description": "A unique external id (from another external source)."
          },
          "formTemplateId": {
            "type": "string",
            "description": "Id of the form template being used to display the form"
          },
          "contactId": {
            "type": "string",
            "description": "Id of the contact for which the form is being used."
          },
          "healthElementId": {
            "type": "string",
            "description": "The healthcare element to which this form is attached."
          },
          "planOfActionId": {
            "type": "string",
            "description": "The healthcare approach to which this form is attached."
          },
          "parent": {
            "type": "string",
            "description": "The parent of this form, used to determine the forms hierarchy"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "EntityTemplateDto": {
        "required": [
          "entity",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "userId": {
            "type": "string"
          },
          "descr": {
            "type": "string"
          },
          "keywords": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "entityType": {
            "type": "string"
          },
          "subType": {
            "type": "string"
          },
          "defaultTemplate": {
            "type": "boolean"
          },
          "entity": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "DocumentDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "otherUtis",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the document. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "The revision of the document in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "objectStoreReference": {
            "type": "string",
            "description": "Reference in object store"
          },
          "documentLocation": {
            "type": "string",
            "description": "Location of the document",
            "enum": [
              "annex",
              "body"
            ]
          },
          "documentType": {
            "type": "string",
            "description": "The type of document, ex: admission, clinical path, document report,invoice, etc.",
            "enum": [
              "admission",
              "alert",
              "bvt_sample",
              "clinicalpath",
              "clinicalsummary",
              "contactreport",
              "quote",
              "invoice",
              "death",
              "discharge",
              "dischargereport",
              "ebirth_baby_medicalform",
              "ebirth_baby_notification",
              "ebirth_mother_medicalform",
              "ebirth_mother_notification",
              "ecare_safe_consultation",
              "epidemiology",
              "intervention",
              "labrequest",
              "labresult",
              "medicaladvisoragreement",
              "medicationschemeelement",
              "note",
              "notification",
              "pharmaceuticalprescription",
              "prescription",
              "productdelivery",
              "quickdischargereport",
              "radiationexposuremonitoring",
              "referral",
              "report",
              "request",
              "result",
              "sumehr",
              "telemonitoring",
              "template",
              "template_admin",
              "treatmentsuspension",
              "vaccination"
            ]
          },
          "documentStatus": {
            "type": "string",
            "description": "The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc.",
            "enum": [
              "draft",
              "finalized",
              "pending_review",
              "reviewed",
              "pending_signature",
              "signed",
              "canceled",
              "sent",
              "delivered"
            ]
          },
          "externalUri": {
            "type": "string",
            "description": "When the document is stored in an external repository, this is the uri of the document in that repository"
          },
          "mainUti": {
            "type": "string",
            "description": "The main Uniform Type Identifier of the document (https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE)"
          },
          "name": {
            "type": "string",
            "description": "Name of the document"
          },
          "version": {
            "type": "string",
            "description": "The document version"
          },
          "otherUtis": {
            "uniqueItems": true,
            "type": "array",
            "description": "Extra Uniform Type Identifiers",
            "items": {
              "type": "string",
              "description": "Extra Uniform Type Identifiers"
            }
          },
          "storedICureDocumentId": {
            "type": "string",
            "description": "The ICureDocument (Form, Contact, ...) that has been used to generate the document"
          },
          "externalUuid": {
            "type": "string",
            "description": "A unique external id (from another external source)."
          },
          "size": {
            "type": "integer",
            "description": "Size of the document file",
            "format": "int64"
          },
          "hash": {
            "type": "string",
            "description": "Hashed version of the document"
          },
          "openingContactId": {
            "type": "string",
            "description": "Id of the contact during which the document was created"
          },
          "attachmentId": {
            "type": "string",
            "description": "Id of attachment to this document"
          },
          "encryptedAttachment": {
            "type": "string",
            "format": "byte"
          },
          "decryptedAttachment": {
            "type": "string",
            "format": "byte"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity is a root level object. It represents a Document. It is serialized in JSON and saved in the underlying CouchDB database."
      },
      "AdministrationQuantity": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "administrationUnit": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "AgreementAppendixDto": {
        "type": "object",
        "properties": {
          "docSeq": {
            "type": "integer",
            "format": "int32"
          },
          "verseSeq": {
            "type": "integer",
            "format": "int32"
          },
          "documentId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        }
      },
      "AnnotationDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the Annotation. We encourage using either a v4 UUID or a HL7 Id."
          },
          "author": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this note, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of the latest modification of this note, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "description": "Text contained in the note, written as markdown."
          },
          "location": {
            "type": "string",
            "description": "Defines to which part of the corresponding information the note is related to."
          }
        },
        "description": "Text node with attribution. Could be written by a healthcare party, as a side node of a\n    |medical record. For example, after taking a temperature, the HCP adds a node explaining the\n    |thermometer is faulty."
      },
      "ContactDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "secretForeignKeys",
          "services",
          "subContacts",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the Id of the contact. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "the revision of the contact in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "groupId": {
            "type": "string",
            "description": "Separate contacts can merged in one logical contact if they share the same groupId. When a contact must be split to selectively assign rights to healthcare parties, the split contacts all share the same groupId"
          },
          "openingDate": {
            "type": "integer",
            "description": "The date (YYYYMMDDhhmmss) of the start of the contact.",
            "format": "int64"
          },
          "closingDate": {
            "type": "integer",
            "description": "The date (YYYYMMDDhhmmss) marking the end of the contact.",
            "format": "int64"
          },
          "descr": {
            "type": "string",
            "description": "Description of the contact"
          },
          "location": {
            "type": "string",
            "description": "Location where the contact was recorded."
          },
          "externalId": {
            "type": "string",
            "description": "An external (from another source) id with no guarantee or requirement for unicity."
          },
          "encounterType": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "subContacts": {
            "uniqueItems": true,
            "type": "array",
            "description": "Set of all sub-contacts recorded during the given contact. Sub-contacts are used to link services embedded inside this contact to healthcare elements, healthcare approaches and/or forms.",
            "items": {
              "$ref": "#/components/schemas/SubContactDto"
            }
          },
          "services": {
            "uniqueItems": true,
            "type": "array",
            "description": "Set of all services provided to the patient during the contact.",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          },
          "healthcarePartyId": {
            "type": "string",
            "deprecated": true
          },
          "modifiedContactId": {
            "type": "string",
            "deprecated": true
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity is a root-level object. It represents a contact. It is serialized in JSON and saved in the underlying icure-contact CouchDB database.\nThe contact is the entity that records the medical information about the patient chronologically. A visit to the patient's house, a consultation at the practice, a phone call between the patient and the healthcare party or integrating lab reports into the medical file are examples of when a contact can be recorded.\nA contact can occur with or without direct interaction between the patient and the healthcare party. For example, when a healthcare party encodes data received from laboratory's test result, this is done in the absence of a patient.\nA contact groups together pieces of information collected during one single event, for one single patient and for one or more healthcare parties. Patient's complaints, the diagnosis of a new problem, a surgical procedure, etc. are collected inside a contact.\nThe main sub-element of the contact is the service. Each atomic piece of information collected during a contact is a service and is stored inside the services list of a contact.\n"
      },
      "ContentDto": {
        "type": "object",
        "properties": {
          "stringValue": {
            "type": "string"
          },
          "numberValue": {
            "type": "number",
            "format": "double"
          },
          "booleanValue": {
            "type": "boolean"
          },
          "instantValue": {
            "type": "string",
            "format": "date-time"
          },
          "fuzzyDateValue": {
            "type": "integer",
            "description": "Value as date. The format could have a all three (day, month and year) or values on any of these three, whatever is known.",
            "format": "int64"
          },
          "binaryValue": {
            "type": "string",
            "format": "byte"
          },
          "documentId": {
            "type": "string",
            "description": "Linked document."
          },
          "measureValue": {
            "$ref": "#/components/schemas/MeasureDto"
          },
          "medicationValue": {
            "$ref": "#/components/schemas/MedicationDto"
          },
          "timeSeries": {
            "$ref": "#/components/schemas/TimeSeriesDto"
          },
          "compoundValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          },
          "ratio": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasureDto"
            }
          },
          "range": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeasureDto"
            }
          }
        },
        "description": "Information contained in the service. Content is localized, using ISO language code as key"
      },
      "DurationDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "$ref": "#/components/schemas/CodeStubDto"
          }
        }
      },
      "MeasureDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "double"
          },
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "ref": {
            "type": "number",
            "format": "double"
          },
          "severity": {
            "type": "integer",
            "format": "int32"
          },
          "severityCode": {
            "type": "string"
          },
          "evolution": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "type": "string"
          },
          "unitCodes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "comment": {
            "type": "string"
          },
          "comparator": {
            "type": "string"
          }
        }
      },
      "MedicationDto": {
        "type": "object",
        "properties": {
          "compoundPrescription": {
            "type": "string"
          },
          "substanceProduct": {
            "$ref": "#/components/schemas/SubstanceproductDto"
          },
          "medicinalProduct": {
            "$ref": "#/components/schemas/MedicinalproductDto"
          },
          "numberOfPackages": {
            "type": "integer",
            "format": "int32"
          },
          "batch": {
            "type": "string"
          },
          "instructionForPatient": {
            "type": "string"
          },
          "commentForDelivery": {
            "type": "string"
          },
          "drugRoute": {
            "type": "string"
          },
          "temporality": {
            "type": "string"
          },
          "frequency": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "reimbursementReason": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "substitutionAllowed": {
            "type": "boolean"
          },
          "beginMoment": {
            "type": "integer",
            "format": "int64"
          },
          "endMoment": {
            "type": "integer",
            "format": "int64"
          },
          "deliveryMoment": {
            "type": "integer",
            "format": "int64"
          },
          "endExecutionMoment": {
            "type": "integer",
            "format": "int64"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationDto"
          },
          "renewal": {
            "$ref": "#/components/schemas/RenewalDto"
          },
          "knownUsage": {
            "type": "boolean"
          },
          "regimen": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegimenItemDto"
            }
          },
          "posology": {
            "type": "string"
          },
          "agreements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ParagraphAgreementDto"
            }
          },
          "medicationSchemeIdOnSafe": {
            "type": "string"
          },
          "medicationSchemeSafeVersion": {
            "type": "integer",
            "format": "int32"
          },
          "medicationSchemeTimeStampOnSafe": {
            "type": "integer",
            "format": "int64"
          },
          "medicationSchemeDocumentId": {
            "type": "string"
          },
          "safeIdName": {
            "type": "string"
          },
          "idOnSafes": {
            "type": "string"
          },
          "timestampOnSafe": {
            "type": "integer",
            "format": "int64"
          },
          "changeValidated": {
            "type": "boolean"
          },
          "newSafeMedication": {
            "type": "boolean"
          },
          "medicationUse": {
            "type": "string"
          },
          "beginCondition": {
            "type": "string"
          },
          "endCondition": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "medicationChanged": {
            "type": "boolean"
          },
          "posologyChanged": {
            "type": "boolean"
          },
          "suspension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuspensionDto"
            }
          },
          "prescriptionRID": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "The details of prescribed or suggested medication"
      },
      "MedicinalproductDto": {
        "required": [
          "deliveredcds",
          "intendedcds"
        ],
        "type": "object",
        "properties": {
          "intendedcds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "deliveredcds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "intendedname": {
            "type": "string"
          },
          "deliveredname": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "ParagraphAgreementDto": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "paragraph": {
            "type": "string"
          },
          "accepted": {
            "type": "boolean"
          },
          "inTreatment": {
            "type": "boolean"
          },
          "canceled": {
            "type": "boolean"
          },
          "careProviderReference": {
            "type": "string"
          },
          "decisionReference": {
            "type": "string"
          },
          "start": {
            "type": "integer",
            "format": "int64"
          },
          "end": {
            "type": "integer",
            "format": "int64"
          },
          "cancelationDate": {
            "type": "integer",
            "format": "int64"
          },
          "quantityValue": {
            "type": "number",
            "format": "double"
          },
          "quantityUnit": {
            "type": "string"
          },
          "ioRequestReference": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          },
          "refusalJustification": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "verses": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "coverageType": {
            "type": "string"
          },
          "unitNumber": {
            "type": "number",
            "format": "double"
          },
          "strength": {
            "type": "number",
            "format": "double"
          },
          "strengthUnit": {
            "type": "string"
          },
          "agreementAppendices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgreementAppendixDto"
            }
          },
          "documentId": {
            "type": "string"
          }
        }
      },
      "RegimenItemDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "integer",
            "format": "int64"
          },
          "dayNumber": {
            "type": "integer",
            "format": "int32"
          },
          "weekday": {
            "$ref": "#/components/schemas/Weekday"
          },
          "dayPeriod": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "timeOfDay": {
            "type": "integer",
            "format": "int64"
          },
          "administratedQuantity": {
            "$ref": "#/components/schemas/AdministrationQuantity"
          }
        }
      },
      "RenewalDto": {
        "type": "object",
        "properties": {
          "decimal": {
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "$ref": "#/components/schemas/DurationDto"
          }
        }
      },
      "ServiceDto": {
        "required": [
          "codes",
          "content",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "identifier",
          "invoicingCodes",
          "notes",
          "qualifiedLinks",
          "tags",
          "textIndexes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the Service. We encourage using either a v4 UUID or a HL7 Id."
          },
          "transactionId": {
            "type": "string",
            "description": "The transactionId is used when a single service had to be split into parts for technical reasons. Several services with the same non null transaction id form one single service"
          },
          "identifier": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentifierDto"
            }
          },
          "contactId": {
            "type": "string",
            "description": "Id of the contact during which the service is provided"
          },
          "subContactIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of IDs of all sub-contacts that link the service to structural elements. Only used when the Service is emitted outside of its contact",
            "items": {
              "type": "string",
              "description": "List of IDs of all sub-contacts that link the service to structural elements. Only used when the Service is emitted outside of its contact"
            }
          },
          "plansOfActionIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of IDs of all plans of actions (healthcare approaches) as a part of which the Service is provided. Only used when the Service is emitted outside of its contact",
            "items": {
              "type": "string",
              "description": "List of IDs of all plans of actions (healthcare approaches) as a part of which the Service is provided. Only used when the Service is emitted outside of its contact"
            }
          },
          "healthElementsIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of IDs of all healthcare elements for which the service is provided. Only used when the Service is emitted outside of its contact",
            "items": {
              "type": "string",
              "description": "List of IDs of all healthcare elements for which the service is provided. Only used when the Service is emitted outside of its contact"
            }
          },
          "formIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of Ids of all forms linked to the Service. Only used when the Service is emitted outside of its contact.",
            "items": {
              "type": "string",
              "description": "List of Ids of all forms linked to the Service. Only used when the Service is emitted outside of its contact."
            }
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secret patient key, encrypted in the patient document, in clear here.",
            "items": {
              "type": "string",
              "description": "The secret patient key, encrypted in the patient document, in clear here."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The public patient key, encrypted here for separate Crypto Actors.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The public patient key, encrypted here for separate Crypto Actors."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The delegations giving access to connected healthcare information.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The delegations giving access to connected healthcare information."
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The contact secret encryption key used to encrypt the secured properties (like services for example), encrypted for separate Crypto Actors.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The contact secret encryption key used to encrypt the secured properties (like services for example), encrypted for separate Crypto Actors."
          },
          "label": {
            "type": "string",
            "description": "Description / Unambiguous qualification (LOINC code) of the type of information contained in the service. Could be a code to qualify temperature, complaint, diagnostic, ..."
          },
          "index": {
            "type": "integer",
            "description": "Used for sorting services inside an upper object (A contact, a transaction, a FHIR bundle, ...)",
            "format": "int64"
          },
          "content": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContentDto"
            },
            "description": "Information contained in the service. Content is localized, using ISO language code as key"
          },
          "encryptedContent": {
            "type": "string",
            "deprecated": true
          },
          "textIndexes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "valueDate": {
            "type": "integer",
            "description": "The date (YYYYMMDDhhmmss) when the Service is noted to have started and also closes on the same date",
            "format": "int64"
          },
          "openingDate": {
            "type": "integer",
            "description": "The date (YYYYMMDDhhmmss) of the start of the Service",
            "format": "int64"
          },
          "closingDate": {
            "type": "integer",
            "description": "The date (YYYYMMDDhhmmss) marking the end of the Service",
            "format": "int64"
          },
          "formId": {
            "type": "string",
            "description": "Id of the form used during the Service"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "comment": {
            "type": "string",
            "description": "Text, comments on the Service provided"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "invoicingCodes": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of invoicing codes",
            "items": {
              "type": "string",
              "description": "List of invoicing codes"
            }
          },
          "notes": {
            "type": "array",
            "description": "Comments - Notes recorded by a HCP about this service",
            "items": {
              "$ref": "#/components/schemas/AnnotationDto"
            }
          },
          "qualifiedLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "description": "Links towards related services (possibly in other contacts)"
              },
              "description": "Links towards related services (possibly in other contacts)"
            },
            "description": "Links towards related services (possibly in other contacts)"
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity represents a Service. A Service is created in the course a contact.\nServices include subjective information provided by the patient, such as complaints, reason for visit, feelings, etc. or objective information like bio-metric measures (blood pressure, temperature, heart beat, etc.), or physical exam description, diagnosis, prescription, integration of lab reports from another healthcare party, action plan, etc.\nAny action performed by the healthcare party which is relevant for the healthcare element of a patient is considered a service. The services can be linked to healthcare elements or other structuring elements of the medical record"
      },
      "ServiceLinkDto": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string"
          }
        },
        "description": "List of all services provided to the patient under a given contact which is linked by this sub-contact to other structuring elements."
      },
      "SubContactDto": {
        "required": [
          "codes",
          "services",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the sub-contact. We encourage using either a v4 UUID or a HL7 Id."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "descr": {
            "type": "string",
            "description": "Description of the sub-contact"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol based on which the sub-contact was used for linking services to structuring elements"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "formId": {
            "type": "string",
            "description": "Id of the form used in the sub-contact. Several sub-contacts with the same form ID can coexist as long as they are in different contacts or they relate to a different planOfActionID"
          },
          "planOfActionId": {
            "type": "string",
            "description": "Id of the plan of action (healthcare approach) that is linked by the sub-contact to a service."
          },
          "healthElementId": {
            "type": "string",
            "description": "Id of the healthcare element that is linked by the sub-contact to a service"
          },
          "classificationId": {
            "type": "string"
          },
          "services": {
            "type": "array",
            "description": "List of all services provided to the patient under a given contact which is linked by this sub-contact to other structuring elements.",
            "items": {
              "$ref": "#/components/schemas/ServiceLinkDto"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity represents a sub-contact. It is serialized in JSON and saved in the underlying icure-contact CouchDB database."
      },
      "SubstanceproductDto": {
        "required": [
          "deliveredcds",
          "intendedcds"
        ],
        "type": "object",
        "properties": {
          "intendedcds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "deliveredcds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "intendedname": {
            "type": "string"
          },
          "deliveredname": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "SuspensionDto": {
        "type": "object",
        "properties": {
          "beginMoment": {
            "type": "integer",
            "format": "int64"
          },
          "endMoment": {
            "type": "integer",
            "format": "int64"
          },
          "suspensionReason": {
            "type": "string"
          },
          "lifecycle": {
            "type": "string"
          }
        }
      },
      "TimeSeriesDto": {
        "required": [
          "fields",
          "max",
          "mean",
          "median",
          "min",
          "samples",
          "variance"
        ],
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "samples": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "min": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "max": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "mean": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "median": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "variance": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "description": "A high frequency time-series containing the ts in ms from the start (double) and the values"
      },
      "Weekday": {
        "type": "object",
        "properties": {
          "weekday": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "weekNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ClassificationDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "label",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "parentId": {
            "type": "string"
          },
          "label": {
            "type": "string",
            "default": "\"\""
          },
          "templateId": {
            "type": "string"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "TimeTableDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "items",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "agendaId": {
            "type": "string"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeTableItemDto"
            }
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "TimeTableHourDto": {
        "type": "object",
        "properties": {
          "startHour": {
            "type": "integer",
            "format": "int64"
          },
          "endHour": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TimeTableItemDto": {
        "required": [
          "acceptsNewPatient",
          "days",
          "homeVisit",
          "hours",
          "publicTimeTableItem",
          "recurrenceTypes",
          "unavailable"
        ],
        "type": "object",
        "properties": {
          "days": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeTableHourDto"
            }
          },
          "recurrenceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "calendarItemTypeId": {
            "type": "string"
          },
          "homeVisit": {
            "type": "boolean"
          },
          "placeId": {
            "type": "string"
          },
          "publicTimeTableItem": {
            "type": "boolean"
          },
          "acceptsNewPatient": {
            "type": "boolean"
          },
          "unavailable": {
            "type": "boolean"
          }
        }
      },
      "LetterValueDto": {
        "type": "object",
        "properties": {
          "letter": {
            "type": "string"
          },
          "index": {
            "type": "string"
          },
          "coefficient": {
            "type": "number",
            "format": "double"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "PeriodicityDto": {
        "type": "object",
        "properties": {
          "relatedCode": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "relatedPeriodicity": {
            "$ref": "#/components/schemas/CodeStubDto"
          }
        }
      },
      "TarificationDto": {
        "required": [
          "appendices",
          "category",
          "disabled",
          "flags",
          "id",
          "letterValues",
          "links",
          "periodicity",
          "qualifiedLinks",
          "regions",
          "relatedCodes",
          "searchTerms",
          "valorisations"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "context": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "regions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "periodicity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeriodicityDto"
            }
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "qualifiedLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "flags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "male_only",
                "female_only",
                "deptkinesitherapy",
                "deptnursing",
                "deptgeneralpractice",
                "deptsocialworker",
                "deptpsychology",
                "deptadministrative",
                "deptdietetics",
                "deptspeechtherapy",
                "deptdentistry",
                "deptoccupationaltherapy",
                "depthealthcare",
                "deptgynecology",
                "deptpediatry",
                "deptalgology",
                "deptanatomopathology",
                "deptanesthesiology",
                "deptbacteriology",
                "deptcardiacsurgery",
                "deptcardiology",
                "deptchildandadolescentpsychiatry",
                "deptdermatology",
                "deptdiabetology",
                "deptemergency",
                "deptendocrinology",
                "deptgastroenterology",
                "deptgenetics",
                "deptgeriatry",
                "depthandsurgery",
                "depthematology",
                "deptinfectiousdisease",
                "deptintensivecare",
                "deptlaboratory",
                "deptmajorburns",
                "deptmaxillofacialsurgery",
                "deptmedicine",
                "deptmolecularbiology",
                "deptneonatalogy",
                "deptnephrology",
                "deptneurology",
                "deptneurosurgery",
                "deptnte",
                "deptnuclear",
                "deptnutritiondietetics",
                "deptobstetrics",
                "deptoncology",
                "deptophtalmology",
                "deptorthopedy",
                "deptpalliativecare",
                "deptpediatricintensivecare",
                "deptpediatricsurgery",
                "deptpharmacy",
                "deptphysicalmedecine",
                "deptphysiotherapy",
                "deptplasticandreparatorysurgery",
                "deptpneumology",
                "deptpodiatry",
                "deptpsychiatry",
                "deptradiology",
                "deptradiotherapy",
                "deptrevalidation",
                "deptrheumatology",
                "deptrhumatology",
                "deptsenology",
                "deptsocialservice",
                "deptsportsmedecine",
                "deptstomatology",
                "deptsurgery",
                "deptthoracicsurgery",
                "depttoxicology",
                "depttropicalmedecine",
                "depturology",
                "deptvascularsurgery",
                "deptvisceraldigestiveabdominalsurgery",
                "depttransplantsurgery",
                "deptpercutaneous",
                "deptchildbirth"
              ]
            }
          },
          "searchTerms": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "data": {
            "type": "string"
          },
          "appendices": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "disabled": {
            "type": "boolean"
          },
          "valorisations": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValorisationDto"
            }
          },
          "category": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "consultationCode": {
            "type": "boolean"
          },
          "hasRelatedCode": {
            "type": "boolean"
          },
          "needsPrescriber": {
            "type": "boolean"
          },
          "relatedCodes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ngroup": {
            "type": "string"
          },
          "letterValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LetterValueDto"
            }
          }
        }
      },
      "ValorisationDto": {
        "type": "object",
        "properties": {
          "startOfValidity": {
            "type": "integer",
            "format": "int64"
          },
          "endOfValidity": {
            "type": "integer",
            "format": "int64"
          },
          "predicate": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "reimbursement": {
            "type": "number",
            "format": "double"
          },
          "patientIntervention": {
            "type": "number",
            "format": "double"
          },
          "doctorSupplement": {
            "type": "number",
            "format": "double"
          },
          "vat": {
            "type": "number",
            "format": "double"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "ReceiptDto": {
        "required": [
          "attachmentIds",
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "references",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "attachmentIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "references": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "subCategory": {
            "type": "string"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "PlaceDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          }
        }
      },
      "DocIdentifier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          }
        }
      },
      "IcureStubDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "ListOfIdsDto": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The ids of databases to reset"
      },
      "MessagesReadStatusUpdate": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "boolean"
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "MedicalLocationDto": {
        "required": [
          "agendaIds",
          "id",
          "options"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "responsible": {
            "type": "string"
          },
          "guardPost": {
            "type": "boolean"
          },
          "cbe": {
            "type": "string"
          },
          "bic": {
            "type": "string"
          },
          "bankAccount": {
            "type": "string"
          },
          "nihii": {
            "type": "string"
          },
          "ssin": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "agendaIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "KeywordDto": {
        "required": [
          "codes",
          "id",
          "subWords",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "value": {
            "type": "string"
          },
          "subWords": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeywordSubwordDto"
            }
          },
          "userId": {
            "type": "string"
          }
        }
      },
      "KeywordSubwordDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "subWords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeywordSubwordDto"
            }
          }
        }
      },
      "InsuranceDto": {
        "required": [
          "address",
          "ambulatoryInsurance",
          "hospitalisationInsurance",
          "id",
          "name",
          "privateInsurance"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "privateInsurance": {
            "type": "boolean"
          },
          "hospitalisationInsurance": {
            "type": "boolean"
          },
          "ambulatoryInsurance": {
            "type": "boolean"
          },
          "code": {
            "type": "string"
          },
          "agreementNumber": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          }
        }
      },
      "FlatRateTarificationDto": {
        "required": [
          "valorisations"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "flatRateType": {
            "type": "string",
            "enum": [
              "physician",
              "physiotherapist",
              "nurse",
              "ptd"
            ]
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "valorisations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValorisationDto"
            }
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "HealthcarePartyDto": {
        "required": [
          "addresses",
          "aesExchangeKeys",
          "financialInstitutionInformation",
          "flatRateTarifications",
          "hcPartyKeys",
          "id",
          "importedData",
          "languages",
          "lostHcPartyKeys",
          "names",
          "options",
          "privateKeyShamirPartitions",
          "properties",
          "sendFormats",
          "specialityCodes",
          "statusHistory",
          "statuses",
          "transferKeys"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the Id of the healthcare party. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "the revision of the healthcare party in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "creation timestamp of the object.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "last modification timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The full name of the healthcare party, used mainly when the healthcare party is an organization"
          },
          "lastName": {
            "type": "string",
            "description": "the lastname (surname) of the healthcare party. This is the official lastname that should be used for official administrative purposes."
          },
          "firstName": {
            "type": "string",
            "description": "the firstname (name) of the healthcare party."
          },
          "names": {
            "type": "array",
            "description": "the list of all names of the healthcare party, also containing the official full name information. Ordered by preference of use. First element is therefore the official name used for the healthcare party in the application",
            "items": {
              "$ref": "#/components/schemas/PersonNameDto"
            }
          },
          "gender": {
            "type": "string",
            "description": "the gender of the healthcare party: male, female, indeterminate, changed, changedToMale, changedToFemale, unknown",
            "enum": [
              "male",
              "female",
              "indeterminate",
              "changed",
              "changedToMale",
              "changedToFemale",
              "unknown"
            ]
          },
          "civility": {
            "type": "string",
            "description": "Mr., Ms., Pr., Dr. ..."
          },
          "companyName": {
            "type": "string",
            "description": "The name of the company this healthcare party is member of"
          },
          "speciality": {
            "type": "string",
            "description": "Medical specialty of the healthcare party"
          },
          "bankAccount": {
            "type": "string",
            "description": "Bank Account identifier of the healhtcare party, IBAN, deprecated, use financial institutions instead"
          },
          "bic": {
            "type": "string",
            "description": "Bank Identifier Code, the SWIFT Address assigned to the bank, use financial institutions instead"
          },
          "proxyBankAccount": {
            "type": "string"
          },
          "proxyBic": {
            "type": "string"
          },
          "invoiceHeader": {
            "type": "string",
            "description": "All details included in the invoice header"
          },
          "cbe": {
            "type": "string",
            "description": "Identifier number for institution type if the healthcare party is an enterprise"
          },
          "ehp": {
            "type": "string",
            "description": "Identifier number for the institution if the healthcare party is an organization"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that usually handles this healthcare party."
          },
          "parentId": {
            "type": "string",
            "description": "Id of parent of the user representing the healthcare party."
          },
          "convention": {
            "type": "integer",
            "format": "int32"
          },
          "nihii": {
            "type": "string",
            "description": "National Institute for Health and Invalidity Insurance number assigned to healthcare parties (institution or person)."
          },
          "nihiiSpecCode": {
            "type": "string"
          },
          "ssin": {
            "type": "string",
            "description": "Social security inscription number."
          },
          "addresses": {
            "type": "array",
            "description": "The list of addresses (with address type).",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          },
          "languages": {
            "type": "array",
            "description": "The list of languages spoken by the patient ordered by fluency (alpha-2 code http://www.loc.gov/standards/iso639-2/ascii_8bits.html).",
            "items": {
              "type": "string",
              "description": "The list of languages spoken by the patient ordered by fluency (alpha-2 code http://www.loc.gov/standards/iso639-2/ascii_8bits.html)."
            }
          },
          "picture": {
            "type": "string",
            "description": "A picture usually saved in JPEG format.",
            "format": "byte"
          },
          "statuses": {
            "uniqueItems": true,
            "type": "array",
            "description": "The healthcare party's status: 'trainee' or 'withconvention' or 'accredited'",
            "items": {
              "type": "string",
              "description": "The healthcare party's status: 'trainee' or 'withconvention' or 'accredited'",
              "enum": [
                "trainee",
                "withconvention",
                "accreditated"
              ]
            }
          },
          "statusHistory": {
            "type": "array",
            "description": "The healthcare party's status history",
            "items": {
              "$ref": "#/components/schemas/HealthcarePartyHistoryStatusDto"
            }
          },
          "specialityCodes": {
            "uniqueItems": true,
            "type": "array",
            "description": "Medical specialty of the healthcare party codified using FHIR or Kmehr codificaiton scheme",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "sendFormats": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The type of format for contacting the healthcare party, ex: mobile, phone, email, etc."
            },
            "description": "The type of format for contacting the healthcare party, ex: mobile, phone, email, etc."
          },
          "notes": {
            "type": "string",
            "description": "Text notes."
          },
          "financialInstitutionInformation": {
            "type": "array",
            "description": "List of financial information (Bank, bank account).",
            "items": {
              "$ref": "#/components/schemas/FinancialInstitutionInformationDto"
            }
          },
          "billingType": {
            "type": "string",
            "description": "The invoicing scheme this healthcare party adheres to : 'service fee' or 'flat rate'"
          },
          "type": {
            "type": "string"
          },
          "contactPerson": {
            "type": "string"
          },
          "contactPersonHcpId": {
            "type": "string"
          },
          "supervisorId": {
            "type": "string"
          },
          "flatRateTarifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlatRateTarificationDto"
            }
          },
          "importedData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          },
          "hcPartyKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself.",
              "items": {
                "type": "string",
                "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself."
              }
            },
            "description": "For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself."
          },
          "aesExchangeKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }",
                "items": {
                  "type": "string",
                  "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
                }
              },
              "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
            },
            "description": "Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } }"
          },
          "transferKeys": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
              },
              "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
            },
            "description": "Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } }"
          },
          "lostHcPartyKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey.",
            "items": {
              "type": "string",
              "description": "The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey."
            }
          },
          "privateKeyShamirPartitions": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"threshold⎮partition in hex\" encrypted using the the partition's holder's public RSA key"
            },
            "description": "The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"threshold⎮partition in hex\" encrypted using the the partition's holder's public RSA key"
          },
          "publicKey": {
            "type": "string",
            "description": "The public key of this hcp"
          }
        },
        "description": "This entity is a root level object. It represents a healthcare party. It is serialized in JSON and saved in the underlying icure-healthdata CouchDB database."
      },
      "HealthcarePartyHistoryStatusDto": {
        "required": [
          "active",
          "specialisationCode",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "trainee",
              "withconvention",
              "accreditated"
            ]
          },
          "specialisationCode": {
            "type": "string"
          },
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "active": {
            "type": "boolean"
          }
        },
        "description": "The healthcare party's status history"
      },
      "ListOfPropertiesDto": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          }
        },
        "description": "The new properties for the group"
      },
      "GroupDto": {
        "required": [
          "id",
          "properties",
          "superAdmin"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the group. We encourage using either a v4 UUID or a HL7 Id."
          },
          "rev": {
            "type": "string",
            "description": "The revision of the group in the database, used for conflict management / optimistic locking."
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Username for the group"
          },
          "password": {
            "type": "string",
            "description": "Password for the group access"
          },
          "servers": {
            "type": "array",
            "description": "List of servers accessible to the group",
            "items": {
              "type": "string",
              "description": "List of servers accessible to the group"
            }
          },
          "superAdmin": {
            "type": "boolean",
            "description": "Whether the group has a super admin permission, originally set to no access."
          },
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "description": "Extra properties for the user. Those properties are typed (see class Property)",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          },
          "superGroup": {
            "type": "string"
          }
        },
        "description": "This entity represents a group"
      },
      "Unit": {
        "type": "object"
      },
      "FrontEndMigrationDto": {
        "required": [
          "id",
          "properties"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "PAUSED",
              "ERROR",
              "SUCCESS"
            ]
          },
          "logs": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "startKey": {
            "type": "string"
          },
          "startKeyDocId": {
            "type": "string"
          },
          "processCount": {
            "type": "integer",
            "format": "int64"
          },
          "properties": {
            "uniqueItems": true,
            "type": "array",
            "description": "Extra properties for the fem. Those properties are typed (see class Property)",
            "items": {
              "$ref": "#/components/schemas/PropertyStubDto"
            }
          }
        }
      },
      "Data": {
        "type": "object"
      },
      "DocumentGroupDto": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Editor": {
        "type": "object",
        "properties": {
          "left": {
            "type": "number",
            "format": "double"
          },
          "top": {
            "type": "number",
            "format": "double"
          },
          "width": {
            "type": "number",
            "format": "double"
          },
          "height": {
            "type": "number",
            "format": "double"
          },
          "multiline": {
            "type": "boolean"
          },
          "labelPosition": {
            "type": "string",
            "enum": [
              "Up",
              "Down",
              "Left",
              "Right"
            ]
          },
          "readOnly": {
            "type": "boolean"
          },
          "defaultValue": {
            "$ref": "#/components/schemas/Data"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "FormColumn": {
        "type": "object",
        "properties": {
          "formDataList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormLayoutData"
            }
          },
          "columns": {
            "type": "string"
          },
          "shouldDisplay": {
            "type": "boolean"
          }
        }
      },
      "FormDataOption": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FormLayout": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "width": {
            "type": "number",
            "format": "double"
          },
          "height": {
            "type": "number",
            "format": "double"
          },
          "descr": {
            "type": "string"
          },
          "tag": {
            "$ref": "#/components/schemas/Tag"
          },
          "guid": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormSection"
            }
          },
          "importedServiceXPaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FormLayoutData": {
        "type": "object",
        "properties": {
          "subForm": {
            "type": "boolean"
          },
          "irrelevant": {
            "type": "boolean"
          },
          "determinesSscontactName": {
            "type": "boolean"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "sortOrder": {
            "type": "number",
            "format": "double"
          },
          "options": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FormDataOption"
            }
          },
          "descr": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "editor": {
            "$ref": "#/components/schemas/Editor"
          },
          "defaultValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDto"
            }
          },
          "defaultStatus": {
            "type": "integer",
            "format": "int32"
          },
          "suggest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Suggest"
            }
          },
          "plannings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormPlanning"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuiCode"
            }
          },
          "codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuiCode"
            }
          },
          "codeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuiCodeType"
            }
          },
          "formulas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Formula"
            }
          }
        }
      },
      "FormPlanning": {
        "type": "object",
        "properties": {
          "planninfForAnyDoctor": {
            "type": "boolean"
          },
          "planningForDelegate": {
            "type": "boolean"
          },
          "planningForPatientDoctor": {
            "type": "boolean"
          },
          "planningForMe": {
            "type": "boolean"
          },
          "codedDelayInDays": {
            "type": "integer",
            "format": "int32"
          },
          "repetitions": {
            "type": "integer",
            "format": "int32"
          },
          "repetitionsUnit": {
            "type": "integer",
            "format": "int32"
          },
          "descr": {
            "type": "string"
          }
        }
      },
      "FormSection": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "columns": {
            "type": "integer",
            "format": "int32"
          },
          "formColumns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormColumn"
            }
          }
        }
      },
      "FormTemplateDto": {
        "required": [
          "id",
          "reports",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "layout": {
            "$ref": "#/components/schemas/FormLayout"
          },
          "templateLayout": {
            "$ref": "#/components/schemas/FormTemplateLayout"
          },
          "name": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/DocumentGroupDto"
          },
          "descr": {
            "type": "string"
          },
          "disabled": {
            "type": "string"
          },
          "specialty": {
            "$ref": "#/components/schemas/CodeStubDto"
          },
          "author": {
            "type": "string"
          },
          "formInstancePreferredLocation": {
            "type": "string"
          },
          "keyboardShortcut": {
            "type": "string"
          },
          "shortReport": {
            "type": "string"
          },
          "mediumReport": {
            "type": "string"
          },
          "longReport": {
            "type": "string"
          },
          "reports": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "layoutAttachmentId": {
            "type": "string"
          }
        }
      },
      "FormTemplateLayout": {
        "required": [
          "form",
          "sections"
        ],
        "type": "object",
        "properties": {
          "form": {
            "type": "string"
          },
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          },
          "description": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Formula": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "lifecycle": {
            "type": "string",
            "enum": [
              "OnCreate",
              "OnLoad",
              "OnChange",
              "OnSave",
              "OnDestroy",
              "OnLoadPropertiesEditor"
            ]
          }
        }
      },
      "GuiCode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "GuiCodeType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "Section": {
        "required": [
          "fields",
          "section"
        ],
        "type": "object",
        "properties": {
          "section": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StructureElement"
            }
          },
          "description": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StructureElement": {
        "type": "object"
      },
      "Suggest": {
        "type": "object",
        "properties": {
          "filterKey": {
            "type": "string"
          },
          "filterValue": {
            "type": "string"
          },
          "entityClass": {
            "type": "string"
          },
          "fieldValue": {
            "type": "string"
          },
          "fieldDisplay": {
            "type": "string"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "DocumentTemplateDto": {
        "required": [
          "codes",
          "id",
          "otherUtis",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "attachment": {
            "type": "string",
            "format": "byte"
          },
          "documentType": {
            "type": "string",
            "description": "The type of document, ex: admission, clinical path, document report,invoice, etc.",
            "enum": [
              "admission",
              "alert",
              "bvt_sample",
              "clinicalpath",
              "clinicalsummary",
              "contactreport",
              "quote",
              "invoice",
              "death",
              "discharge",
              "dischargereport",
              "ebirth_baby_medicalform",
              "ebirth_baby_notification",
              "ebirth_mother_medicalform",
              "ebirth_mother_notification",
              "ecare_safe_consultation",
              "epidemiology",
              "intervention",
              "labrequest",
              "labresult",
              "medicaladvisoragreement",
              "medicationschemeelement",
              "note",
              "notification",
              "pharmaceuticalprescription",
              "prescription",
              "productdelivery",
              "quickdischargereport",
              "radiationexposuremonitoring",
              "referral",
              "report",
              "request",
              "result",
              "sumehr",
              "telemonitoring",
              "template",
              "template_admin",
              "treatmentsuspension",
              "vaccination"
            ]
          },
          "mainUti": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "otherUtis": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attachmentId": {
            "type": "string"
          },
          "version": {
            "type": "string",
            "enum": [
              "V1_0_0"
            ]
          },
          "owner": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/DocumentGroupDto"
          },
          "descr": {
            "type": "string"
          },
          "disabled": {
            "type": "string"
          },
          "specialty": {
            "$ref": "#/components/schemas/CodeStubDto"
          }
        }
      },
      "ByteArrayDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "CodeDto": {
        "required": [
          "appendices",
          "disabled",
          "flags",
          "id",
          "links",
          "periodicity",
          "qualifiedLinks",
          "regions",
          "searchTerms"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "context": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "author": {
            "type": "string"
          },
          "regions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "periodicity": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeriodicityDto"
            }
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "qualifiedLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "flags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "male_only",
                "female_only",
                "deptkinesitherapy",
                "deptnursing",
                "deptgeneralpractice",
                "deptsocialworker",
                "deptpsychology",
                "deptadministrative",
                "deptdietetics",
                "deptspeechtherapy",
                "deptdentistry",
                "deptoccupationaltherapy",
                "depthealthcare",
                "deptgynecology",
                "deptpediatry",
                "deptalgology",
                "deptanatomopathology",
                "deptanesthesiology",
                "deptbacteriology",
                "deptcardiacsurgery",
                "deptcardiology",
                "deptchildandadolescentpsychiatry",
                "deptdermatology",
                "deptdiabetology",
                "deptemergency",
                "deptendocrinology",
                "deptgastroenterology",
                "deptgenetics",
                "deptgeriatry",
                "depthandsurgery",
                "depthematology",
                "deptinfectiousdisease",
                "deptintensivecare",
                "deptlaboratory",
                "deptmajorburns",
                "deptmaxillofacialsurgery",
                "deptmedicine",
                "deptmolecularbiology",
                "deptneonatalogy",
                "deptnephrology",
                "deptneurology",
                "deptneurosurgery",
                "deptnte",
                "deptnuclear",
                "deptnutritiondietetics",
                "deptobstetrics",
                "deptoncology",
                "deptophtalmology",
                "deptorthopedy",
                "deptpalliativecare",
                "deptpediatricintensivecare",
                "deptpediatricsurgery",
                "deptpharmacy",
                "deptphysicalmedecine",
                "deptphysiotherapy",
                "deptplasticandreparatorysurgery",
                "deptpneumology",
                "deptpodiatry",
                "deptpsychiatry",
                "deptradiology",
                "deptradiotherapy",
                "deptrevalidation",
                "deptrheumatology",
                "deptrhumatology",
                "deptsenology",
                "deptsocialservice",
                "deptsportsmedecine",
                "deptstomatology",
                "deptsurgery",
                "deptthoracicsurgery",
                "depttoxicology",
                "depttropicalmedecine",
                "depturology",
                "deptvascularsurgery",
                "deptvisceraldigestiveabdominalsurgery",
                "depttransplantsurgery",
                "deptpercutaneous",
                "deptchildbirth"
              ]
            }
          },
          "searchTerms": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "data": {
            "type": "string"
          },
          "appendices": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "disabled": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ClassificationTemplateDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "label",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "parentId": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "CalendarItemDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "meetingTags",
          "secretForeignKeys",
          "tags",
          "title"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "calendarItemTypeId": {
            "type": "string"
          },
          "masterCalendarItemId": {
            "type": "string"
          },
          "patientId": {
            "type": "string",
            "deprecated": true
          },
          "important": {
            "type": "boolean"
          },
          "homeVisit": {
            "type": "boolean"
          },
          "phoneNumber": {
            "type": "string"
          },
          "placeId": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "addressText": {
            "type": "string"
          },
          "startTime": {
            "type": "integer",
            "format": "int64"
          },
          "endTime": {
            "type": "integer",
            "format": "int64"
          },
          "confirmationTime": {
            "type": "integer",
            "format": "int64"
          },
          "confirmationId": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int64"
          },
          "allDay": {
            "type": "boolean"
          },
          "details": {
            "type": "string"
          },
          "wasMigrated": {
            "type": "boolean"
          },
          "agendaId": {
            "type": "string"
          },
          "recurrenceId": {
            "type": "string"
          },
          "meetingTags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarItemTagDto"
            }
          },
          "flowItem": {
            "$ref": "#/components/schemas/FlowItemDto"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "CalendarItemTagDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "date": {
            "type": "integer",
            "format": "int64"
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "FlowItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "receptionDate": {
            "type": "integer",
            "format": "int64"
          },
          "processingDate": {
            "type": "integer",
            "format": "int64"
          },
          "processer": {
            "type": "string"
          },
          "cancellationDate": {
            "type": "integer",
            "format": "int64"
          },
          "canceller": {
            "type": "string"
          },
          "cancellationReason": {
            "type": "string"
          },
          "cancellationNote": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "homeVisit": {
            "type": "boolean"
          },
          "municipality": {
            "type": "string"
          },
          "town": {
            "type": "string"
          },
          "zipCode": {
            "type": "string"
          },
          "street": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "buildingNumber": {
            "type": "string"
          },
          "doorbellName": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "letterBox": {
            "type": "string"
          },
          "notesOps": {
            "type": "string"
          },
          "notesContact": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "emergency": {
            "type": "boolean"
          },
          "phoneNumber": {
            "type": "string"
          },
          "patientId": {
            "type": "string"
          },
          "patientLastName": {
            "type": "string"
          },
          "patientFirstName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "interventionCode": {
            "type": "string"
          }
        }
      },
      "CalendarItemTypeDto": {
        "required": [
          "docIds",
          "duration",
          "id",
          "otherInfos",
          "subjectByLanguage"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "externalRef": {
            "type": "string"
          },
          "mikronoId": {
            "type": "string"
          },
          "docIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "otherInfos": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "subjectByLanguage": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ArticleDto": {
        "required": [
          "codes",
          "content",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDto"
            }
          },
          "classification": {
            "type": "string"
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        }
      },
      "AgendaDto": {
        "required": [
          "codes",
          "id",
          "rights",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightDto"
            }
          }
        }
      },
      "RightDto": {
        "required": [
          "administration",
          "read",
          "write"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "read": {
            "type": "boolean",
            "default": false
          },
          "write": {
            "type": "boolean",
            "default": false
          },
          "administration": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "AccessLogDto": {
        "required": [
          "codes",
          "cryptedForeignKeys",
          "delegations",
          "encryptionKeys",
          "id",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of the Access log. We encourage using either a v4 UUID or a HL7 Id"
          },
          "rev": {
            "type": "string",
            "description": "The revision of the access log in the database, used for conflict management / optimistic locking."
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "objectId": {
            "type": "string",
            "description": "Id of the object that is being requested."
          },
          "accessType": {
            "type": "string",
            "description": "The type of access"
          },
          "user": {
            "type": "string",
            "description": "Id of the user making the requests"
          },
          "detail": {
            "type": "string",
            "description": "Further details about the access"
          },
          "date": {
            "type": "string",
            "description": "The date (unix epoch in ms) of logging, is filled instantaneously.",
            "format": "date-time"
          },
          "patientId": {
            "type": "string",
            "deprecated": true
          },
          "secretForeignKeys": {
            "uniqueItems": true,
            "type": "array",
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.",
            "items": {
              "type": "string",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space."
            }
          },
          "cryptedForeignKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys."
          },
          "delegations": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well"
          },
          "encryptionKeys": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation",
              "items": {
                "$ref": "#/components/schemas/DelegationDto"
              }
            },
            "description": "When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation"
          },
          "encryptedSelf": {
            "type": "string",
            "description": "The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys."
          }
        },
        "description": "This entity represents Access Log."
      },
      "AbstractFilterDtoUser": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "EmailTemplateDto": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "FilterChainUser": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoUser"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedDocumentKeyIdPairObject": {
        "type": "object",
        "properties": {
          "startKey": {
            "type": "object"
          },
          "startKeyDocId": {
            "type": "string"
          }
        }
      },
      "PaginatedListUserDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "BasicDto": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "RemoteAuthenticationDto": {
        "type": "object",
        "properties": {
          "basic": {
            "$ref": "#/components/schemas/BasicDto"
          }
        }
      },
      "RemoteDto": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "auth": {
            "$ref": "#/components/schemas/RemoteAuthenticationDto"
          }
        }
      },
      "ReplicationStatsDto": {
        "type": "object",
        "properties": {
          "revisionsChecked": {
            "type": "integer",
            "format": "int32"
          },
          "missingRevisionsFound": {
            "type": "integer",
            "format": "int32"
          },
          "docsRead": {
            "type": "integer",
            "format": "int32"
          },
          "docsWritten": {
            "type": "integer",
            "format": "int32"
          },
          "changesPending": {
            "type": "integer",
            "format": "int32"
          },
          "docWriteFailures": {
            "type": "integer",
            "format": "int32"
          },
          "checkpointedSourceSeq": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "error": {
            "type": "string"
          }
        }
      },
      "ReplicatorDocumentDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/RemoteDto"
          },
          "target": {
            "$ref": "#/components/schemas/RemoteDto"
          },
          "owner": {
            "type": "string"
          },
          "create_target": {
            "type": "boolean"
          },
          "continuous": {
            "type": "boolean"
          },
          "doc_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "replicationState": {
            "type": "string"
          },
          "replicationStateTime": {
            "type": "string",
            "format": "date-time"
          },
          "replicationStats": {
            "$ref": "#/components/schemas/ReplicationStatsDto"
          },
          "errorCount": {
            "type": "integer",
            "format": "int32"
          },
          "revsInfo": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "revHistory": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PatientRegistrationSuccessDto": {
        "required": [
          "token",
          "userId",
          "userLogin"
        ],
        "type": "object",
        "properties": {
          "userLogin": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "AbstractFilterDtoPatient": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainPatient": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoPatient"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListPatientDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "MedexInfoDto": {
        "required": [
          "beginDate",
          "endDate",
          "incapacityReason",
          "incapacityType",
          "outOfHomeAllowed",
          "patientLanguage"
        ],
        "type": "object",
        "properties": {
          "beginDate": {
            "type": "integer",
            "format": "int64"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "author": {
            "$ref": "#/components/schemas/HealthcarePartyDto"
          },
          "patient": {
            "$ref": "#/components/schemas/PatientDto"
          },
          "patientLanguage": {
            "type": "string",
            "default": "\"fr\""
          },
          "incapacityType": {
            "type": "string",
            "default": "\"incapacity\""
          },
          "incapacityReason": {
            "type": "string",
            "default": "\"sickness\""
          },
          "outOfHomeAllowed": {
            "type": "boolean"
          },
          "certificateDate": {
            "type": "integer",
            "format": "int64"
          },
          "contentDate": {
            "type": "integer",
            "format": "int64"
          },
          "diagnosisICPC": {
            "type": "string"
          },
          "diagnosisICD": {
            "type": "string"
          },
          "diagnosisDescr": {
            "type": "string"
          }
        }
      },
      "AbstractFilterDtoInvoice": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainInvoice": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoInvoice"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "AbstractFilterDtoHealthElement": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainHealthElement": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoHealthElement"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListHealthElementDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthElementDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "AbstractFilterDtoHealthcareParty": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainHealthcareParty": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoHealthcareParty"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListHealthcarePartyDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthcarePartyDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "DatabaseInitialisationDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "healthcareParties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthcarePartyDto"
            }
          },
          "replication": {
            "$ref": "#/components/schemas/ReplicationDto"
          }
        },
        "description": "initialisationData is an object that contains the initial replications (target must be an internalTarget of value base, healthdata or patient) and the users and healthcare parties to be created"
      },
      "DatabaseSynchronizationDto": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          },
          "localTarget": {
            "type": "string",
            "enum": [
              "base",
              "healthdata",
              "patient"
            ]
          }
        }
      },
      "ReplicationDto": {
        "required": [
          "databaseSynchronizations",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "databaseSynchronizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatabaseSynchronizationDto"
            }
          }
        }
      },
      "RegistrationInformationDto": {
        "required": [
          "emailAddress",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "userOptions": {
            "type": "string"
          }
        }
      },
      "RegistrationSuccessDto": {
        "required": [
          "groupId",
          "token",
          "userId"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "EntityReferenceDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "docId": {
            "type": "string"
          }
        }
      },
      "AbstractFilterDtoDevice": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainDevice": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoDevice"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListDeviceDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "AbstractFilterDtoService": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainService": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoService"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListServiceDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "AbstractFilterDtoContact": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainContact": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoContact"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListContactDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "AbstractFilterDtoCode": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      },
      "FilterChainCode": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/AbstractFilterDtoCode"
          },
          "predicate": {
            "$ref": "#/components/schemas/Predicate"
          }
        }
      },
      "PaginatedListCodeDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "NoGenericPrescriptionReasonDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "NoSwitchReasonDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "SamTextDto": {
        "type": "object",
        "properties": {
          "fr": {
            "type": "string"
          },
          "nl": {
            "type": "string"
          },
          "de": {
            "type": "string"
          },
          "en": {
            "type": "string"
          }
        }
      },
      "VmpGroupDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "productId": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "noGenericPrescriptionReason": {
            "$ref": "#/components/schemas/NoGenericPrescriptionReasonDto"
          },
          "noSwitchReason": {
            "$ref": "#/components/schemas/NoSwitchReasonDto"
          }
        }
      },
      "CommentedClassificationDto": {
        "type": "object",
        "properties": {
          "title": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "url": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "NumeratorRangeDto": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "QuantityDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        }
      },
      "RouteOfAdministrationDto": {
        "required": [
          "standardRoutes"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "standardRoutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          }
        }
      },
      "StandardSubstanceDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "CAS",
              "DM_D",
              "EDQM",
              "SNOMED_CT"
            ]
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "definition": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "StrengthRangeDto": {
        "type": "object",
        "properties": {
          "numeratorRange": {
            "$ref": "#/components/schemas/NumeratorRangeDto"
          },
          "denominator": {
            "$ref": "#/components/schemas/QuantityDto"
          }
        }
      },
      "SubstanceStubDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "chemicalForm": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "note": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "standardSubstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardSubstanceDto"
            }
          }
        }
      },
      "VirtualFormDto": {
        "required": [
          "standardForms"
        ],
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "standardForms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          }
        }
      },
      "VirtualIngredientDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "ACTIVE_SUBSTANCE",
              "EXCIPIENT"
            ]
          },
          "strengthRange": {
            "$ref": "#/components/schemas/StrengthRangeDto"
          },
          "substance": {
            "$ref": "#/components/schemas/SubstanceStubDto"
          }
        }
      },
      "VmpComponentDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "virtualForm": {
            "$ref": "#/components/schemas/VirtualFormDto"
          },
          "routeOfAdministrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteOfAdministrationDto"
            }
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "phaseNumber": {
            "type": "integer",
            "format": "int32"
          },
          "virtualIngredients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VirtualIngredientDto"
            }
          }
        }
      },
      "VmpDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "vmpGroup": {
            "$ref": "#/components/schemas/VmpGroupStubDto"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "abbreviation": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "vtm": {
            "$ref": "#/components/schemas/VtmDto"
          },
          "wadas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WadaDto"
            }
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmpComponentDto"
            }
          },
          "commentedClassifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentedClassificationDto"
            }
          }
        }
      },
      "VmpGroupStubDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "VtmDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "WadaDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "description": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "NmpDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "commercialStatus": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "producer": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "distributor": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "AmpComponentDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "ingredients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IngredientDto"
            }
          },
          "pharmaceuticalForms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PharmaceuticalFormStubDto"
            }
          },
          "routeOfAdministrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteOfAdministrationDto"
            }
          },
          "dividable": {
            "type": "string"
          },
          "scored": {
            "type": "string"
          },
          "crushable": {
            "type": "string",
            "enum": [
              "Y",
              "N",
              "X"
            ]
          },
          "containsAlcohol": {
            "type": "string",
            "enum": [
              "Y",
              "N",
              "X"
            ]
          },
          "sugarFree": {
            "type": "boolean"
          },
          "modifiedReleaseType": {
            "type": "integer",
            "format": "int32"
          },
          "specificDrugDevice": {
            "type": "integer",
            "format": "int32"
          },
          "dimensions": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "note": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "AmpDto": {
        "required": [
          "ampps",
          "blackTriangle",
          "components",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "vmp": {
            "$ref": "#/components/schemas/VmpStubDto"
          },
          "officialName": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "AUTHORIZED",
              "SUSPENDED",
              "REVOKED"
            ]
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "blackTriangle": {
            "type": "boolean"
          },
          "medicineType": {
            "type": "string",
            "enum": [
              "ALLOPATHIC",
              "HOMEOPATHIC"
            ]
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "abbreviatedName": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "proprietarySuffix": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "prescriptionName": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "ampps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmppDto"
            }
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmpComponentDto"
            }
          }
        }
      },
      "AmppComponentDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "contentType": {
            "type": "string",
            "enum": [
              "ACTIVE_COMPONENT",
              "SOLVENT",
              "DEVICE",
              "EXCIPIENT"
            ]
          },
          "contentMultiplier": {
            "type": "integer",
            "format": "int32"
          },
          "packSpecification": {
            "type": "string"
          },
          "deviceType": {
            "$ref": "#/components/schemas/DeviceTypeDto"
          },
          "packagingType": {
            "$ref": "#/components/schemas/PackagingTypeDto"
          }
        }
      },
      "AmppDto": {
        "required": [
          "atcs",
          "dmpps",
          "orphan"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "index": {
            "type": "number",
            "format": "double"
          },
          "ctiExtended": {
            "type": "string"
          },
          "orphan": {
            "type": "boolean"
          },
          "leafletLink": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "spcLink": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "rmaPatientLink": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "rmaProfessionalLink": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "parallelCircuit": {
            "type": "integer",
            "format": "int32"
          },
          "parallelDistributor": {
            "type": "string"
          },
          "packMultiplier": {
            "type": "integer",
            "format": "int32"
          },
          "packAmount": {
            "$ref": "#/components/schemas/QuantityDto"
          },
          "packDisplayValue": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "AUTHORIZED",
              "SUSPENDED",
              "REVOKED"
            ]
          },
          "atcs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AtcDto"
            }
          },
          "crmLink": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "deliveryModusCode": {
            "type": "string"
          },
          "deliveryModus": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "deliveryModusSpecificationCode": {
            "type": "string"
          },
          "deliveryModusSpecification": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "dhpcLink": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "distributorCompany": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "singleUse": {
            "type": "boolean"
          },
          "speciallyRegulated": {
            "type": "integer",
            "format": "int32"
          },
          "abbreviatedName": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "prescriptionName": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "note": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "posologyNote": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "noGenericPrescriptionReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SamTextDto"
            }
          },
          "exFactoryPrice": {
            "type": "number",
            "format": "double"
          },
          "reimbursementCode": {
            "type": "integer",
            "format": "int32"
          },
          "definedDailyDose": {
            "$ref": "#/components/schemas/QuantityDto"
          },
          "officialExFactoryPrice": {
            "type": "number",
            "format": "double"
          },
          "realExFactoryPrice": {
            "type": "number",
            "format": "double"
          },
          "pricingInformationDecisionDate": {
            "type": "integer",
            "format": "int64"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmppComponentDto"
            }
          },
          "commercializations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommercializationDto"
            }
          },
          "supplyProblems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupplyProblemDto"
            }
          },
          "dmpps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DmppDto"
            }
          },
          "vaccineIndicationCodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AtcDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CommercializationDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "reason": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "endOfComercialization": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "impact": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "additionalInformation": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "authorisationNr": {
            "type": "string"
          },
          "vatNr": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "europeanNr": {
            "type": "string"
          },
          "denomination": {
            "type": "string"
          },
          "legalForm": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          },
          "streetNum": {
            "type": "string"
          },
          "postbox": {
            "type": "string"
          },
          "postcode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "website": {
            "type": "string"
          }
        }
      },
      "CopaymentDto": {
        "type": "object",
        "properties": {
          "regimeType": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "feeAmount": {
            "type": "string"
          }
        }
      },
      "DeviceTypeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "edqmCode": {
            "type": "string"
          },
          "edqmDefinition": {
            "type": "string"
          }
        }
      },
      "DmppDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "deliveryEnvironment": {
            "type": "string",
            "enum": [
              "P",
              "A",
              "H",
              "R"
            ]
          },
          "code": {
            "type": "string"
          },
          "codeType": {
            "type": "string",
            "enum": [
              "CNK",
              "PSEUDO"
            ]
          },
          "price": {
            "type": "string"
          },
          "cheap": {
            "type": "boolean"
          },
          "cheapest": {
            "type": "boolean"
          },
          "reimbursable": {
            "type": "boolean"
          },
          "reimbursements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReimbursementDto"
            }
          },
          "productId": {
            "type": "string"
          }
        }
      },
      "IngredientDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "enum": [
              "ACTIVE_SUBSTANCE",
              "EXCIPIENT"
            ]
          },
          "knownEffect": {
            "type": "boolean"
          },
          "strengthDescription": {
            "type": "string"
          },
          "strength": {
            "$ref": "#/components/schemas/QuantityDto"
          },
          "additionalInformation": {
            "type": "string"
          },
          "substance": {
            "$ref": "#/components/schemas/SubstanceStubDto"
          }
        }
      },
      "PackagingTypeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "edqmCode": {
            "type": "string"
          },
          "edqmDefinition": {
            "type": "string"
          }
        }
      },
      "PharmaceuticalFormStubDto": {
        "required": [
          "standardForms"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "standardForms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          }
        }
      },
      "PricingDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          },
          "label": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "ReimbursementCriterionDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "ReimbursementDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "deliveryEnvironment": {
            "type": "string",
            "enum": [
              "P",
              "A",
              "H",
              "R"
            ]
          },
          "code": {
            "type": "string"
          },
          "codeType": {
            "type": "string",
            "enum": [
              "CNK",
              "PSEUDO"
            ]
          },
          "multiple": {
            "type": "string",
            "enum": [
              "M",
              "V"
            ]
          },
          "temporary": {
            "type": "boolean"
          },
          "reference": {
            "type": "boolean"
          },
          "legalReferencePath": {
            "type": "string"
          },
          "flatRateSystem": {
            "type": "boolean"
          },
          "reimbursementBasePrice": {
            "type": "number"
          },
          "referenceBasePrice": {
            "type": "number"
          },
          "copaymentSupplement": {
            "type": "number"
          },
          "pricingUnit": {
            "$ref": "#/components/schemas/PricingDto"
          },
          "pricingSlice": {
            "$ref": "#/components/schemas/PricingDto"
          },
          "reimbursementCriterion": {
            "$ref": "#/components/schemas/ReimbursementCriterionDto"
          },
          "copayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CopaymentDto"
            }
          }
        }
      },
      "SupplyProblemDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "reason": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "expectedEndOn": {
            "type": "integer",
            "format": "int64"
          },
          "impact": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "additionalInformation": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "VmpStubDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "vmpGroup": {
            "$ref": "#/components/schemas/VmpGroupStubDto"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          }
        }
      },
      "SumehrExportInfoDto": {
        "required": [
          "comment",
          "excludedIds",
          "secretForeignKeys"
        ],
        "type": "object",
        "properties": {
          "secretForeignKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludedIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recipient": {
            "$ref": "#/components/schemas/HealthcarePartyDto"
          },
          "softwareName": {
            "type": "string"
          },
          "softwareVersion": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "default": "\"\""
          },
          "includeIrrelevantInformation": {
            "type": "boolean"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          },
          "healthElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthElementDto"
            }
          }
        }
      },
      "SumehrValidityDto": {
        "required": [
          "sumehrValid"
        ],
        "type": "object",
        "properties": {
          "sumehrValid": {
            "type": "string",
            "enum": [
              "absent",
              "uptodate",
              "outdated"
            ]
          }
        }
      },
      "SumehrContentDto": {
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          },
          "healthElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthElementDto"
            }
          },
          "partnerships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnershipDto"
            }
          },
          "patientHealthcareParties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatientHealthCarePartyDto"
            }
          }
        }
      },
      "CodeStub": {
        "required": [
          "_id"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "context": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ImportMapping": {
        "required": [
          "label",
          "tags"
        ],
        "type": "object",
        "properties": {
          "lifecycle": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "cdLocal": {
            "type": "string"
          },
          "label": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStub"
            }
          }
        }
      },
      "ImportResultDto": {
        "type": "object",
        "properties": {
          "patient": {
            "$ref": "#/components/schemas/PatientDto"
          },
          "hes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthElementDto"
            }
          },
          "ctcs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactDto"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormDto"
            }
          },
          "hcps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthcarePartyDto"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentDto"
            }
          },
          "attachments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MimeAttachmentDto"
            }
          }
        }
      },
      "MimeAttachmentDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "format": "byte"
          },
          "fileName": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          }
        }
      },
      "SoftwareMedicalFileExportDto": {
        "required": [
          "exportAsPMF",
          "secretForeignKeys"
        ],
        "type": "object",
        "properties": {
          "secretForeignKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "exportAsPMF": {
            "type": "boolean"
          },
          "softwareName": {
            "type": "string"
          },
          "softwareVersion": {
            "type": "string"
          }
        }
      },
      "CheckSMFPatientResult": {
        "required": [
          "exists",
          "firstName",
          "lastName",
          "ssin"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "ssin": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "integer",
            "format": "int32"
          },
          "exists": {
            "type": "boolean"
          },
          "existingPatientId": {
            "type": "string"
          }
        }
      },
      "MedicationSchemeExportInfoDto": {
        "required": [
          "secretForeignKeys",
          "services"
        ],
        "type": "object",
        "properties": {
          "secretForeignKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          },
          "serviceAuthors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HealthcarePartyDto"
            }
          },
          "recipient": {
            "$ref": "#/components/schemas/HealthcarePartyDto"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "DiaryNoteExportInfoDto": {
        "required": [
          "contexts",
          "excludedIds",
          "secretForeignKeys",
          "tags"
        ],
        "type": "object",
        "properties": {
          "secretForeignKeys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludedIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recipient": {
            "$ref": "#/components/schemas/HealthcarePartyDto"
          },
          "softwareName": {
            "type": "string"
          },
          "softwareVersion": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contexts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "psy": {
            "type": "boolean"
          },
          "documentId": {
            "type": "string"
          },
          "attachmentId": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        }
      },
      "MapOfIdsDto": {
        "required": [
          "mapOfIds"
        ],
        "type": "object",
        "properties": {
          "mapOfIds": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "EIDItem": {
        "required": [
          "readHour"
        ],
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string"
          },
          "readDate": {
            "type": "integer",
            "format": "int64"
          },
          "readHour": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "readType": {
            "type": "string"
          },
          "readvalue": {
            "type": "string"
          }
        }
      },
      "EfactInvoice": {
        "required": [
          "creditNote",
          "hospitalisedPatient",
          "ignorePrescriptionDate",
          "items"
        ],
        "type": "object",
        "properties": {
          "patient": {
            "$ref": "#/components/schemas/PatientDto"
          },
          "ioCode": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItem"
            }
          },
          "reason": {
            "type": "string",
            "enum": [
              "Chimiotherapy",
              "ProfessionalDisease",
              "WorkAccident",
              "Accident",
              "Other"
            ]
          },
          "invoiceRef": {
            "type": "string"
          },
          "invoiceNumber": {
            "type": "integer",
            "format": "int64"
          },
          "ignorePrescriptionDate": {
            "type": "boolean"
          },
          "hospitalisedPatient": {
            "type": "boolean"
          },
          "creditNote": {
            "type": "boolean"
          },
          "relatedInvoiceIoCode": {
            "type": "string"
          },
          "relatedInvoiceNumber": {
            "type": "integer",
            "format": "int64"
          },
          "relatedBatchSendNumber": {
            "type": "integer",
            "format": "int64"
          },
          "relatedBatchYearMonth": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "InvoiceItem": {
        "required": [
          "codeNomenclature",
          "doctorSupplement",
          "patientFee",
          "reimbursedAmount",
          "units"
        ],
        "type": "object",
        "properties": {
          "dateCode": {
            "type": "integer",
            "format": "int64"
          },
          "codeNomenclature": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "relatedCode": {
            "type": "integer",
            "format": "int64"
          },
          "eidItem": {
            "$ref": "#/components/schemas/EIDItem"
          },
          "insuranceRef": {
            "type": "string"
          },
          "insuranceRefDate": {
            "type": "integer",
            "format": "int64"
          },
          "units": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "reimbursedAmount": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "patientFee": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "doctorSupplement": {
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          "sideCode": {
            "type": "string",
            "enum": [
              "None",
              "Left",
              "Right"
            ]
          },
          "timeOfDay": {
            "type": "string",
            "enum": [
              "Other",
              "Night",
              "Weekend",
              "Bankholiday",
              "Urgent"
            ]
          },
          "override3rdPayerCode": {
            "type": "integer",
            "format": "int32"
          },
          "gnotionNihii": {
            "type": "string"
          },
          "derogationMaxNumber": {
            "type": "string",
            "enum": [
              "Other",
              "DerogationMaxNumber",
              "OtherPrescription",
              "SecondPrestationOfDay",
              "ThirdAndNextPrestationOfDay"
            ]
          },
          "prescriberNorm": {
            "type": "string",
            "enum": [
              "None",
              "OnePrescriber",
              "SelfPrescriber",
              "AddedCode",
              "ManyPrescribers"
            ]
          },
          "prescriberNihii": {
            "type": "string"
          },
          "prescriptionDate": {
            "type": "integer",
            "format": "int64"
          },
          "personalInterventionCoveredByThirdPartyCode": {
            "type": "integer",
            "format": "int32"
          },
          "doctorIdentificationNumber": {
            "type": "string"
          },
          "invoiceRef": {
            "type": "string"
          },
          "percentNorm": {
            "type": "string",
            "enum": [
              "None",
              "SurgicalAid1",
              "SurgicalAid2",
              "ReducedFee",
              "Ah1n1",
              "HalfPriceSecondAct",
              "InvoiceException",
              "ForInformation"
            ]
          }
        }
      },
      "InvoiceSender": {
        "required": [
          "isSpecialist"
        ],
        "type": "object",
        "properties": {
          "nihii": {
            "type": "integer",
            "format": "int64"
          },
          "bic": {
            "type": "string"
          },
          "iban": {
            "type": "string"
          },
          "bce": {
            "type": "integer",
            "format": "int64"
          },
          "ssin": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "integer",
            "format": "int64"
          },
          "conventionCode": {
            "type": "integer",
            "format": "int32"
          },
          "isSpecialist": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "InvoicesBatch": {
        "required": [
          "invoices",
          "invoicingMonth",
          "invoicingYear"
        ],
        "type": "object",
        "properties": {
          "invoicingYear": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "invoicingMonth": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "fileRef": {
            "type": "string"
          },
          "batchRef": {
            "type": "string"
          },
          "ioFederationCode": {
            "type": "string"
          },
          "uniqueSendNumber": {
            "type": "integer",
            "format": "int64"
          },
          "sender": {
            "$ref": "#/components/schemas/InvoiceSender"
          },
          "numericalRef": {
            "type": "integer",
            "format": "int64"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EfactInvoice"
            }
          }
        }
      },
      "MessageWithBatch": {
        "type": "object",
        "properties": {
          "invoicesBatch": {
            "$ref": "#/components/schemas/InvoicesBatch"
          },
          "message": {
            "$ref": "#/components/schemas/MessageDto"
          }
        }
      },
      "AuthenticationResponse": {
        "required": [
          "successful"
        ],
        "type": "object",
        "properties": {
          "healthcarePartyId": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "successful": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "LoginCredentials": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "UserGroupDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          }
        }
      },
      "PaginatedListInvoiceDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListFormDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FormDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListEntityTemplateDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityTemplateDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListDocumentDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListClassificationDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassificationDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListTarificationDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TarificationDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListString": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListMessageDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "LabelledOccurenceDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "occurence": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ReplicationInfoDto": {
        "required": [
          "active",
          "running"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "running": {
            "type": "boolean"
          },
          "pendingFrom": {
            "type": "integer",
            "format": "int32"
          },
          "pendingTo": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IndexingInfoDto": {
        "type": "object",
        "properties": {
          "statuses": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        }
      },
      "PublicKeyDto": {
        "type": "object",
        "properties": {
          "hcPartyId": {
            "type": "string"
          },
          "hexString": {
            "type": "string"
          }
        }
      },
      "PaginatedListClassificationTemplateDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClassificationTemplateDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "SamVersionDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "version": {
            "type": "string"
          },
          "date": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PaginatedListVmpDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmpDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListVmpGroupDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmpGroupDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "PaginatedListAmpDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmpDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "SubstanceDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "chemicalForm": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "note": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "standardSubstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardSubstanceDto"
            }
          }
        }
      },
      "PharmaceuticalFormDto": {
        "required": [
          "id",
          "standardForms"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/SamTextDto"
          },
          "standardForms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          }
        }
      },
      "PaginatedListNmpDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NmpDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "AddedDocumentDto": {
        "required": [
          "documentSeq",
          "verseSeq"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "type": "integer",
            "format": "int64"
          },
          "verseSeq": {
            "type": "integer",
            "format": "int64"
          },
          "documentSeq": {
            "type": "integer",
            "format": "int64"
          },
          "mimeType": {
            "type": "string"
          },
          "addressUrl": {
            "type": "string"
          },
          "descrNl": {
            "type": "string"
          },
          "descrFr": {
            "type": "string"
          },
          "localPath": {
            "type": "string"
          }
        }
      },
      "VerseDto": {
        "required": [
          "addedDocuments",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "chapterName": {
            "type": "string"
          },
          "paragraphName": {
            "type": "string"
          },
          "verseSeq": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "createdTms": {
            "type": "integer",
            "format": "int64"
          },
          "createdUserId": {
            "type": "string"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "verseNum": {
            "type": "integer",
            "format": "int64"
          },
          "verseSeqParent": {
            "type": "integer",
            "format": "int64"
          },
          "verseLevel": {
            "type": "integer",
            "format": "int64"
          },
          "verseType": {
            "type": "string"
          },
          "checkBoxInd": {
            "type": "string"
          },
          "minCheckNum": {
            "type": "integer",
            "format": "int64"
          },
          "andClauseNum": {
            "type": "integer",
            "format": "int64"
          },
          "textFr": {
            "type": "string"
          },
          "textNl": {
            "type": "string"
          },
          "requestType": {
            "type": "string"
          },
          "agreementTerm": {
            "type": "integer",
            "format": "int64"
          },
          "agreementTermUnit": {
            "type": "string"
          },
          "maxPackageNumber": {
            "type": "integer",
            "format": "int64"
          },
          "purchasingAdvisorQualList": {
            "type": "string"
          },
          "legalReference": {
            "type": "string"
          },
          "modificationDate": {
            "type": "integer",
            "format": "int64"
          },
          "addedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddedDocumentDto"
            }
          },
          "agreementYearMax": {
            "type": "integer",
            "format": "int64"
          },
          "agreementRenewalMax": {
            "type": "integer",
            "format": "int64"
          },
          "sexRestricted": {
            "type": "string"
          },
          "minimumAgeAuthorized": {
            "type": "number",
            "format": "double"
          },
          "maximumAgeAuthorized": {
            "type": "number",
            "format": "double"
          },
          "maximumContentQuantity": {
            "type": "number",
            "format": "double"
          },
          "maximumContentUnit": {
            "type": "string"
          },
          "maximumStrengthQuantity": {
            "type": "number",
            "format": "double"
          },
          "maximumStrengthUnit": {
            "type": "string"
          },
          "maximumDurationQuantity": {
            "type": "number",
            "format": "double"
          },
          "maximumDurationUnit": {
            "type": "string"
          },
          "otherAddedDocumentInd": {
            "type": "string"
          },
          "minimumAgeAuthorizedUnit": {
            "type": "string"
          },
          "maximumAgeAuthorizedUnit": {
            "type": "string"
          },
          "modificationStatus": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerseDto"
            }
          }
        }
      },
      "ParagraphDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "chapterName": {
            "type": "string"
          },
          "paragraphName": {
            "type": "string"
          },
          "startDate": {
            "type": "integer",
            "format": "int64"
          },
          "createdTms": {
            "type": "integer",
            "format": "int64"
          },
          "createdUserId": {
            "type": "string"
          },
          "endDate": {
            "type": "integer",
            "format": "int64"
          },
          "keyStringNl": {
            "type": "string"
          },
          "keyStringFr": {
            "type": "string"
          },
          "agreementType": {
            "type": "string"
          },
          "processType": {
            "type": "integer",
            "format": "int64"
          },
          "legalReference": {
            "type": "string"
          },
          "publicationDate": {
            "type": "integer",
            "format": "int64"
          },
          "modificationDate": {
            "type": "integer",
            "format": "int64"
          },
          "processTypeOverrule": {
            "type": "string"
          },
          "paragraphVersion": {
            "type": "integer",
            "format": "int64"
          },
          "agreementTypePro": {
            "type": "string"
          },
          "modificationStatus": {
            "type": "string"
          }
        }
      },
      "ResultInfoDto": {
        "required": [
          "codes",
          "services"
        ],
        "type": "object",
        "properties": {
          "ssin": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "integer",
            "format": "int64"
          },
          "sex": {
            "type": "string"
          },
          "documentId": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "complete": {
            "type": "boolean"
          },
          "demandDate": {
            "type": "integer",
            "format": "int64"
          },
          "labo": {
            "type": "string"
          },
          "engine": {
            "type": "string"
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDto"
            }
          }
        }
      },
      "ApplicationSettingsDto": {
        "required": [
          "codes",
          "id",
          "settings",
          "tags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rev": {
            "type": "string"
          },
          "created": {
            "type": "integer",
            "description": "The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "modified": {
            "type": "integer",
            "description": "The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.",
            "format": "int64"
          },
          "author": {
            "type": "string",
            "description": "The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "responsible": {
            "type": "string",
            "description": "The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server."
          },
          "medicalLocationId": {
            "type": "string",
            "description": "The id of the medical location where this entity was created."
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "description": "A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "codes": {
            "uniqueItems": true,
            "type": "array",
            "description": "A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes",
            "items": {
              "$ref": "#/components/schemas/CodeStubDto"
            }
          },
          "endOfLife": {
            "type": "integer",
            "description": "Soft delete (unix epoch in ms) timestamp of the object.",
            "format": "int64"
          },
          "deletionDate": {
            "type": "integer",
            "description": "hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.",
            "format": "int64"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PaginatedListAccessLogDto": {
        "required": [
          "pageSize",
          "rows",
          "totalSize"
        ],
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalSize": {
            "type": "integer",
            "format": "int32"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessLogDto"
            }
          },
          "nextKeyPair": {
            "$ref": "#/components/schemas/PaginatedDocumentKeyIdPairObject"
          }
        }
      },
      "UserAndHealthcarePartyDto": {
        "required": [
          "healthcareParty",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "healthcareParty": {
            "$ref": "#/components/schemas/HealthcarePartyDto"
          }
        },
        "description": "This entity embeds a User and its linked Healthcare Party."
      },
      "AppointmentTypeAndPlaceDto": {
        "required": [
          "acceptsNewPatients",
          "calendarItemTypeId",
          "duration"
        ],
        "type": "object",
        "properties": {
          "calendarItemTypeId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "subjectByLanguage": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "placeId": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDto"
          },
          "acceptsNewPatients": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "basicSchema": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
