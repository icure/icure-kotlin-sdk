/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.models.DocIdentifier
import org.taktik.icure.services.external.rest.v2.dto.ListOfIdsDto
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.taktik.icure.services.external.rest.v2.dto.AgendaDto
import java.net.URLEncoder
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class AgendaApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Creates a agenda
     *
     * @param agendaDto
     * @return AgendaDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createAgenda(agendaDto: AgendaDto): AgendaDto {
        val localVariableConfig = createAgendaRequestConfig(agendaDto = agendaDto)

        return request<AgendaDto, AgendaDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createAgenda
     *
     * @param agendaDto
     * @return RequestConfig
     */
    fun createAgendaRequestConfig(agendaDto: AgendaDto): RequestConfig<AgendaDto> {
        // val localVariableBody = agendaDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = agendaDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/agenda",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Deletes agendas
     *
     * @param listOfIdsDto
     * @return kotlin.collections.List<DocIdentifier>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteAgendas(listOfIdsDto: ListOfIdsDto): List<DocIdentifier> {
        val localVariableConfig = deleteAgendasRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<DocIdentifier>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteAgendas
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun deleteAgendasRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/agenda/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets an agenda
     *
     * @param agendaId
     * @return AgendaDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAgenda(agendaId: String): AgendaDto {
        val localVariableConfig = getAgendaRequestConfig(agendaId = agendaId)

        return request<Unit, AgendaDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getAgenda
     *
     * @param agendaId
     * @return RequestConfig
     */
    fun getAgendaRequestConfig(agendaId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/agenda/{agendaId}".replace(
                "{" + "agendaId" + "}",
                URLEncoder.encode(agendaId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all agendas
     *
     * @return kotlin.collections.List<AgendaDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAgendas(): List<AgendaDto> {
        val localVariableConfig = getAgendasRequestConfig()

        return request<Unit, List<AgendaDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getAgendas
     *
     * @return RequestConfig
     */
    fun getAgendasRequestConfig(): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/agenda",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all agendas for user
     *
     * @param userId
     * @return AgendaDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAgendasForUser(userId: String): AgendaDto {
        val localVariableConfig = getAgendasForUserRequestConfig(userId = userId)

        return request<Unit, AgendaDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getAgendasForUser
     *
     * @param userId
     * @return RequestConfig
     */
    fun getAgendasForUserRequestConfig(userId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("userId", listOf(userId))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/agenda/byUser",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets readable agendas for user
     *
     * @param userId
     * @return kotlin.collections.List<AgendaDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getReadableAgendasForUser(userId: String): List<AgendaDto> {
        val localVariableConfig = getReadableAgendasForUserRequestConfig(userId = userId)

        return request<Unit, List<AgendaDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getReadableAgendasForUser
     *
     * @param userId
     * @return RequestConfig
     */
    fun getReadableAgendasForUserRequestConfig(userId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("userId", listOf(userId))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/agenda/readableForUser",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Modifies an agenda
     *
     * @param agendaDto
     * @return AgendaDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyAgenda(agendaDto: AgendaDto): AgendaDto {
        val localVariableConfig = modifyAgendaRequestConfig(agendaDto = agendaDto)

        return request<AgendaDto, AgendaDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyAgenda
     *
     * @param agendaDto
     * @return RequestConfig
     */
    fun modifyAgendaRequestConfig(agendaDto: AgendaDto): RequestConfig<AgendaDto> {
        // val localVariableBody = agendaDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = agendaDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/agenda",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
