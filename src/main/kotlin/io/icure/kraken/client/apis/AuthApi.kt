/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.models.AuthenticationResponse
import io.icure.kraken.client.models.LoginCredentials

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import kotlinx.coroutines.flow.flowOf
import java.nio.ByteBuffer
import java.util.*
import javax.inject.Named
import kotlinx.coroutines.flow.Flow
import java.net.URLEncoder

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class AuthApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.svc.icure.cloud")
        }
    }

    /**
    * login
    * Login using username and password
    * @param loginCredentials  
    * @return AuthenticationResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun login(loginCredentials: LoginCredentials) : AuthenticationResponse  {
        val localVariableConfig = loginRequestConfig(loginCredentials = loginCredentials)

        return request<LoginCredentials, AuthenticationResponse>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation login
    *
    * @param loginCredentials  
    * @return RequestConfig
    */
    fun loginRequestConfig(loginCredentials: LoginCredentials) : RequestConfig<LoginCredentials> {
        // val localVariableBody = loginCredentials
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = loginCredentials

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * logout
    * Logout
    * @return AuthenticationResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun logout() : AuthenticationResponse  {
        val localVariableConfig = logoutRequestConfig()

        return request<Unit, AuthenticationResponse>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation logout
    *
    * @return RequestConfig
    */
    fun logoutRequestConfig() : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/auth/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * logout
    * Logout
    * @return AuthenticationResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun logoutPost() : AuthenticationResponse  {
        val localVariableConfig = logoutPostRequestConfig()

        return request<Unit, AuthenticationResponse>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation logoutPost
    *
    * @return RequestConfig
    */
    fun logoutPostRequestConfig() : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/auth/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * token
    * Get token for subsequent operation
    * @param method  
    * @param path  
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun token(method: kotlin.String, path: kotlin.String) : kotlin.String  {
        val localVariableConfig = tokenRequestConfig(method = method, path = path)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation token
    *
    * @param method  
    * @param path  
    * @return RequestConfig
    */
    fun tokenRequestConfig(method: kotlin.String, path: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/auth/token/{method}/{path}".replace("{"+"method"+"}", "${URLEncoder.encode(method.toString(), Charsets.UTF_8)}").replace("{"+"path"+"}", "${URLEncoder.encode(path.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

}
