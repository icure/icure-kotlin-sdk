/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import java.net.URLEncoder
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class BeresultexportApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Export data
     *
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun exportHealthOne(
        fromHcpId: String,
        toHcpId: String,
        patId: String,
        date: Long,
        ref: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>
    ): kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer> {
        val localVariableConfig = exportHealthOneRequestConfig(
            fromHcpId = fromHcpId,
            toHcpId = toHcpId,
            patId = patId,
            date = date,
            ref = ref,
            ioIcureKrakenClientInfrastructureByteArrayWrapper = ioIcureKrakenClientInfrastructureByteArrayWrapper
        )

        return request<List<ByteArrayWrapper>, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation exportHealthOne
     *
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @return RequestConfig
     */
    fun exportHealthOneRequestConfig(
        fromHcpId: String,
        toHcpId: String,
        patId: String,
        date: Long,
        ref: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>
    ): RequestConfig<List<ByteArrayWrapper>> {
        // val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> =
            mutableMapOf("Content-Type" to "application/octet-stream")
        localVariableHeaders["Accept"] = "application/octet-stream"
        val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/be_result_export/hl1/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}".replace(
                "{" + "fromHcpId" + "}",
                URLEncoder.encode(fromHcpId, Charsets.UTF_8)
            ).replace("{" + "toHcpId" + "}", URLEncoder.encode(toHcpId, Charsets.UTF_8))
                .replace("{" + "patId" + "}", URLEncoder.encode(patId, Charsets.UTF_8))
                .replace("{" + "date" + "}", URLEncoder.encode(date.toString(), Charsets.UTF_8))
                .replace("{" + "ref" + "}", URLEncoder.encode(ref, Charsets.UTF_8)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Export data
     *
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @param mimeType  (optional)
     * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun exportKmehrReport(
        fromHcpId: String,
        toHcpId: String,
        patId: String,
        date: Long,
        ref: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>,
        mimeType: Boolean?
    ): kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer> {
        val localVariableConfig = exportKmehrReportRequestConfig(
            fromHcpId = fromHcpId,
            toHcpId = toHcpId,
            patId = patId,
            date = date,
            ref = ref,
            ioIcureKrakenClientInfrastructureByteArrayWrapper = ioIcureKrakenClientInfrastructureByteArrayWrapper,
            mimeType = mimeType
        )

        return request<List<ByteArrayWrapper>, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation exportKmehrReport
     *
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @param mimeType  (optional)
     * @return RequestConfig
     */
    fun exportKmehrReportRequestConfig(
        fromHcpId: String,
        toHcpId: String,
        patId: String,
        date: Long,
        ref: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>,
        mimeType: Boolean?
    ): RequestConfig<List<ByteArrayWrapper>> {
        // val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (mimeType != null) {
                    put("mimeType", listOf(mimeType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> =
            mutableMapOf("Content-Type" to "application/octet-stream")
        localVariableHeaders["Accept"] = "application/octet-stream"
        val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/be_result_export/kmehrreport/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}".replace(
                "{" + "fromHcpId" + "}",
                URLEncoder.encode(fromHcpId, Charsets.UTF_8)
            ).replace("{" + "toHcpId" + "}", URLEncoder.encode(toHcpId, Charsets.UTF_8))
                .replace("{" + "patId" + "}", URLEncoder.encode(patId, Charsets.UTF_8))
                .replace("{" + "date" + "}", URLEncoder.encode(date.toString(), Charsets.UTF_8))
                .replace("{" + "ref" + "}", URLEncoder.encode(ref, Charsets.UTF_8)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Export data
     *
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun exportMedidoc(
        fromHcpId: String,
        toHcpId: String,
        patId: String,
        date: Long,
        ref: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>
    ): kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer> {
        val localVariableConfig = exportMedidocRequestConfig(
            fromHcpId = fromHcpId,
            toHcpId = toHcpId,
            patId = patId,
            date = date,
            ref = ref,
            ioIcureKrakenClientInfrastructureByteArrayWrapper = ioIcureKrakenClientInfrastructureByteArrayWrapper
        )

        return request<List<ByteArrayWrapper>, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation exportMedidoc
     *
     * @param fromHcpId
     * @param toHcpId
     * @param patId
     * @param date
     * @param ref
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @return RequestConfig
     */
    fun exportMedidocRequestConfig(
        fromHcpId: String,
        toHcpId: String,
        patId: String,
        date: Long,
        ref: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>
    ): RequestConfig<List<ByteArrayWrapper>> {
        // val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> =
            mutableMapOf("Content-Type" to "application/octet-stream")
        localVariableHeaders["Accept"] = "application/octet-stream"
        val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/be_result_export/medidoc/{fromHcpId}/{toHcpId}/{patId}/{date}/{ref}".replace(
                "{" + "fromHcpId" + "}",
                URLEncoder.encode(fromHcpId, Charsets.UTF_8)
            ).replace("{" + "toHcpId" + "}", URLEncoder.encode(toHcpId, Charsets.UTF_8))
                .replace("{" + "patId" + "}", URLEncoder.encode(patId, Charsets.UTF_8))
                .replace("{" + "date" + "}", URLEncoder.encode(date.toString(), Charsets.UTF_8))
                .replace("{" + "ref" + "}", URLEncoder.encode(ref, Charsets.UTF_8)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
