/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.taktik.icure.services.external.rest.v2.dto.ContactDto
import org.taktik.icure.services.external.rest.v2.dto.ResultInfoDto
import java.net.URLEncoder
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class BeresultimportApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Can we handle this document
     *
     * @param id
     * @param enckeys
     * @return kotlin.Boolean
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun canHandle(id: String, enckeys: String): Boolean {
        val localVariableConfig = canHandleRequestConfig(id = id, enckeys = enckeys)

        return request<Unit, Boolean>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation canHandle
     *
     * @param id
     * @param enckeys
     * @return RequestConfig
     */
    fun canHandleRequestConfig(id: String, enckeys: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("enckeys", listOf(enckeys))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/be_result_import/canhandle/{id}".replace(
                "{" + "id" + "}",
                URLEncoder.encode(id, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * import document
     *
     * @param documentId
     * @param hcpId
     * @param language
     * @param protocolIds
     * @param formIds
     * @param planOfActionId
     * @param enckeys
     * @param contactDto
     * @return ContactDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun doImport(
        documentId: String,
        hcpId: String,
        language: String,
        protocolIds: String,
        formIds: String,
        planOfActionId: String,
        enckeys: String,
        contactDto: ContactDto
    ): ContactDto {
        val localVariableConfig = doImportRequestConfig(
            documentId = documentId,
            hcpId = hcpId,
            language = language,
            protocolIds = protocolIds,
            formIds = formIds,
            planOfActionId = planOfActionId,
            enckeys = enckeys,
            contactDto = contactDto
        )

        return request<ContactDto, ContactDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation doImport
     *
     * @param documentId
     * @param hcpId
     * @param language
     * @param protocolIds
     * @param formIds
     * @param planOfActionId
     * @param enckeys
     * @param contactDto
     * @return RequestConfig
     */
    fun doImportRequestConfig(
        documentId: String,
        hcpId: String,
        language: String,
        protocolIds: String,
        formIds: String,
        planOfActionId: String,
        enckeys: String,
        contactDto: ContactDto
    ): RequestConfig<ContactDto> {
        // val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("protocolIds", listOf(protocolIds))
                put("formIds", listOf(formIds))
                put("planOfActionId", listOf(planOfActionId))
                put("enckeys", listOf(enckeys))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = contactDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/be_result_import/import/{documentId}/{hcpId}/{language}".replace(
                "{" + "documentId" + "}",
                URLEncoder.encode(documentId, Charsets.UTF_8)
            ).replace("{" + "hcpId" + "}", URLEncoder.encode(hcpId, Charsets.UTF_8))
                .replace("{" + "language" + "}", URLEncoder.encode(language, Charsets.UTF_8)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Extract general infos from document
     *
     * @param id
     * @param language
     * @param enckeys
     * @param full  (optional)
     * @return kotlin.collections.List<ResultInfoDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getInfos(
        id: String,
        language: String,
        enckeys: String,
        full: Boolean?
    ): List<ResultInfoDto> {
        val localVariableConfig = getInfosRequestConfig(id = id, language = language, enckeys = enckeys, full = full)

        return request<Unit, List<ResultInfoDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getInfos
     *
     * @param id
     * @param language
     * @param enckeys
     * @param full  (optional)
     * @return RequestConfig
     */
    fun getInfosRequestConfig(
        id: String,
        language: String,
        enckeys: String,
        full: Boolean?
    ): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("language", listOf(language))
                put("enckeys", listOf(enckeys))
                if (full != null) {
                    put("full", listOf(full.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/be_result_import/infos/{id}".replace(
                "{" + "id" + "}",
                URLEncoder.encode(id, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
