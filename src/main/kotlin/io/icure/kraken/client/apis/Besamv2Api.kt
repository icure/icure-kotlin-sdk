/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.models.AmpDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.NmpDto
import io.icure.kraken.client.models.PaginatedListAmpDto
import io.icure.kraken.client.models.PaginatedListNmpDto
import io.icure.kraken.client.models.PaginatedListVmpDto
import io.icure.kraken.client.models.PaginatedListVmpGroupDto
import io.icure.kraken.client.models.PharmaceuticalFormDto
import io.icure.kraken.client.models.SamVersionDto
import io.icure.kraken.client.models.SubstanceDto
import io.icure.kraken.client.models.VmpDto
import io.icure.kraken.client.models.VmpGroupDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class Besamv2Api(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
    * Finding AMPs by dmpp code
    * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
    * @param dmppCode dmppCode 
    * @return kotlin.collections.List<AmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findAmpsByDmppCode(dmppCode: kotlin.String) : kotlin.collections.List<AmpDto>  {
        val localVariableConfig = findAmpsByDmppCodeRequestConfig(dmppCode = dmppCode)

        return request<Unit, kotlin.collections.List<AmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findAmpsByDmppCode
    *
    * @param dmppCode dmppCode 
    * @return RequestConfig
    */
    fun findAmpsByDmppCodeRequestConfig(dmppCode: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/amp/byDmppCode/{dmppCode}".replace("{"+"dmppCode"+"}", "$dmppCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by atc code with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param atcCode atcCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListAmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedAmpsByAtc(atcCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListAmpDto  {
        val localVariableConfig = findPaginatedAmpsByAtcRequestConfig(atcCode = atcCode, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListAmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedAmpsByAtc
    *
    * @param atcCode atcCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedAmpsByAtcRequestConfig(atcCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmp/byAtc/{atcCode}".replace("{"+"atcCode"+"}", "$atcCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by group with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpgCode vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListAmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedAmpsByGroupCode(vmpgCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListAmpDto  {
        val localVariableConfig = findPaginatedAmpsByGroupCodeRequestConfig(vmpgCode = vmpgCode, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListAmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedAmpsByGroupCode
    *
    * @param vmpgCode vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedAmpsByGroupCodeRequestConfig(vmpgCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/amp/byGroupCode/{vmpgCode}".replace("{"+"vmpgCode"+"}", "$vmpgCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by group with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpgId vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListAmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedAmpsByGroupId(vmpgId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListAmpDto  {
        val localVariableConfig = findPaginatedAmpsByGroupIdRequestConfig(vmpgId = vmpgId, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListAmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedAmpsByGroupId
    *
    * @param vmpgId vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedAmpsByGroupIdRequestConfig(vmpgId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/amp/byGroupId/{vmpgId}".replace("{"+"vmpgId"+"}", "$vmpgId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by label with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId An amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListAmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedAmpsByLabel(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListAmpDto  {
        val localVariableConfig = findPaginatedAmpsByLabelRequestConfig(language = language, label = label, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListAmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedAmpsByLabel
    *
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId An amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedAmpsByLabelRequestConfig(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/amp",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by vmp code with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpCode vmpCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListAmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedAmpsByVmpCode(vmpCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListAmpDto  {
        val localVariableConfig = findPaginatedAmpsByVmpCodeRequestConfig(vmpCode = vmpCode, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListAmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedAmpsByVmpCode
    *
    * @param vmpCode vmpCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedAmpsByVmpCodeRequestConfig(vmpCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/amp/byVmpCode/{vmpCode}".replace("{"+"vmpCode"+"}", "$vmpCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by vmp id with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpId vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListAmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedAmpsByVmpId(vmpId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListAmpDto  {
        val localVariableConfig = findPaginatedAmpsByVmpIdRequestConfig(vmpId = vmpId, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListAmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedAmpsByVmpId
    *
    * @param vmpId vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A amp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedAmpsByVmpIdRequestConfig(vmpId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/amp/byVmpId/{vmpId}".replace("{"+"vmpId"+"}", "$vmpId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding NMPs by label with pagination.
    * Returns a paginated list of NMPs by matching label. Matches occur per word
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListNmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedNmpsByLabel(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListNmpDto  {
        val localVariableConfig = findPaginatedNmpsByLabelRequestConfig(language = language, label = label, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListNmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedNmpsByLabel
    *
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedNmpsByLabelRequestConfig(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/nmp",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMP groups by language label with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmpgroup document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListVmpGroupDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedVmpGroupsByLabel(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListVmpGroupDto  {
        val localVariableConfig = findPaginatedVmpGroupsByLabelRequestConfig(language = language, label = label, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListVmpGroupDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedVmpGroupsByLabel
    *
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmpgroup document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedVmpGroupsByLabelRequestConfig(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmpgroup",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMP groups by cmpgCode with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpgCode vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmpgroup document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListVmpGroupDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedVmpGroupsByVmpGroupCode(vmpgCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListVmpGroupDto  {
        val localVariableConfig = findPaginatedVmpGroupsByVmpGroupCodeRequestConfig(vmpgCode = vmpgCode, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListVmpGroupDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedVmpGroupsByVmpGroupCode
    *
    * @param vmpgCode vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmpgroup document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedVmpGroupsByVmpGroupCodeRequestConfig(vmpgCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmpgroup/byGroupCode/{vmpgCode}".replace("{"+"vmpgCode"+"}", "$vmpgCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMPs by group with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpgCode vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListVmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedVmpsByGroupCode(vmpgCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListVmpDto  {
        val localVariableConfig = findPaginatedVmpsByGroupCodeRequestConfig(vmpgCode = vmpgCode, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListVmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedVmpsByGroupCode
    *
    * @param vmpgCode vmpgCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedVmpsByGroupCodeRequestConfig(vmpgCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmp/byGroupCode/{vmpgCode}".replace("{"+"vmpgCode"+"}", "$vmpgCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMPs by group with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpgId vmpgId 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListVmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedVmpsByGroupId(vmpgId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListVmpDto  {
        val localVariableConfig = findPaginatedVmpsByGroupIdRequestConfig(vmpgId = vmpgId, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListVmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedVmpsByGroupId
    *
    * @param vmpgId vmpgId 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedVmpsByGroupIdRequestConfig(vmpgId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmp/byGroupId/{vmpgId}".replace("{"+"vmpgId"+"}", "$vmpgId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMPs by label with pagination.
    * Returns a paginated list of VMPs by matching label. Matches occur per word
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListVmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedVmpsByLabel(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListVmpDto  {
        val localVariableConfig = findPaginatedVmpsByLabelRequestConfig(language = language, label = label, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListVmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedVmpsByLabel
    *
    * @param language language (optional)
    * @param label label (optional)
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedVmpsByLabelRequestConfig(language: kotlin.String?, label: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmp",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMPs by group with pagination.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param vmpCode vmpCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListVmpDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findPaginatedVmpsByVmpCode(vmpCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListVmpDto  {
        val localVariableConfig = findPaginatedVmpsByVmpCodeRequestConfig(vmpCode = vmpCode, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListVmpDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findPaginatedVmpsByVmpCode
    *
    * @param vmpCode vmpCode 
    * @param startKey The start key for pagination: a JSON representation of an array containing all the necessary components to form the Complex Key&#39;s startKey (optional)
    * @param startDocumentId A vmp document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findPaginatedVmpsByVmpCodeRequestConfig(vmpCode: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/vmp/byVmpCode/{vmpCode}".replace("{"+"vmpCode"+"}", "$vmpCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Samv2 version.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @return SamVersionDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getSamVersion() : SamVersionDto  {
        val localVariableConfig = getSamVersionRequestConfig()

        return request<Unit, SamVersionDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getSamVersion
    *
    * @return RequestConfig
    */
    fun getSamVersionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/v",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by dmpp code
    * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<AmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listAmpsByDmppCodes(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<AmpDto>  {
        val localVariableConfig = listAmpsByDmppCodesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<AmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listAmpsByDmppCodes
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listAmpsByDmppCodesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/amp/byDmppCodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by group.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<AmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listAmpsByGroupCodes(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<AmpDto>  {
        val localVariableConfig = listAmpsByGroupCodesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<AmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listAmpsByGroupCodes
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listAmpsByGroupCodesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/amp/byGroupCodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by group.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<AmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listAmpsByGroupIds(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<AmpDto>  {
        val localVariableConfig = listAmpsByGroupIdsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<AmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listAmpsByGroupIds
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listAmpsByGroupIdsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/amp/byGroupIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by vmp code.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<AmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listAmpsByVmpCodes(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<AmpDto>  {
        val localVariableConfig = listAmpsByVmpCodesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<AmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listAmpsByVmpCodes
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listAmpsByVmpCodesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/amp/byVmpCodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by vmp id.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<AmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listAmpsByVmpIds(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<AmpDto>  {
        val localVariableConfig = listAmpsByVmpIdsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<AmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listAmpsByVmpIds
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listAmpsByVmpIdsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/amp/byVmpIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding NMPs by cnk id.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<NmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listNmpsByCnks(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<NmpDto>  {
        val localVariableConfig = listNmpsByCnksRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<NmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listNmpsByCnks
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listNmpsByCnksRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/nmp/byCnks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List all pharmaceutical forms.
    * 
    * @return kotlin.collections.List<PharmaceuticalFormDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listPharmaceuticalForms() : kotlin.collections.List<PharmaceuticalFormDto>  {
        val localVariableConfig = listPharmaceuticalFormsRequestConfig()

        return request<Unit, kotlin.collections.List<PharmaceuticalFormDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listPharmaceuticalForms
    *
    * @return RequestConfig
    */
    fun listPharmaceuticalFormsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/pharmaform",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List all substances.
    * 
    * @return kotlin.collections.List<SubstanceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listSubstances() : kotlin.collections.List<SubstanceDto>  {
        val localVariableConfig = listSubstancesRequestConfig()

        return request<Unit, kotlin.collections.List<SubstanceDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listSubstances
    *
    * @return RequestConfig
    */
    fun listSubstancesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/be_samv2/substance",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding AMPs by group.
    * Returns a list of group codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<VmpGroupDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listVmpGroupsByVmpGroupCodes(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<VmpGroupDto>  {
        val localVariableConfig = listVmpGroupsByVmpGroupCodesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<VmpGroupDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listVmpGroupsByVmpGroupCodes
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listVmpGroupsByVmpGroupCodesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/vmpgroup/byGroupCodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMPs by group.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<VmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listVmpsByGroupIds(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<VmpDto>  {
        val localVariableConfig = listVmpsByGroupIdsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<VmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listVmpsByGroupIds
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listVmpsByGroupIdsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/vmp/byGroupIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Finding VMPs by group.
    * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
    * @param listOfIdsDto  
    * @return kotlin.collections.List<VmpDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listVmpsByVmpCodes(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<VmpDto>  {
        val localVariableConfig = listVmpsByVmpCodesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<VmpDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listVmpsByVmpCodes
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listVmpsByVmpCodesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/be_samv2/vmp/byVmpCodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
