/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.models.DocIdentifier
import org.taktik.icure.services.external.rest.v2.dto.ListOfIdsDto
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.taktik.icure.services.external.rest.v2.dto.CalendarItemTypeDto
import java.net.URLEncoder
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class CalendarItemTypeApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Creates a calendarItemType
     *
     * @param calendarItemTypeDto
     * @return CalendarItemTypeDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createCalendarItemType(calendarItemTypeDto: CalendarItemTypeDto): CalendarItemTypeDto {
        val localVariableConfig = createCalendarItemTypeRequestConfig(calendarItemTypeDto = calendarItemTypeDto)

        return request<CalendarItemTypeDto, CalendarItemTypeDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createCalendarItemType
     *
     * @param calendarItemTypeDto
     * @return RequestConfig
     */
    fun createCalendarItemTypeRequestConfig(calendarItemTypeDto: CalendarItemTypeDto): RequestConfig<CalendarItemTypeDto> {
        // val localVariableBody = calendarItemTypeDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = calendarItemTypeDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/calendarItemType",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Deletes calendarItemTypes
     *
     * @param listOfIdsDto
     * @return kotlin.collections.List<DocIdentifier>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteCalendarItemTypes(listOfIdsDto: ListOfIdsDto): List<DocIdentifier> {
        val localVariableConfig = deleteCalendarItemTypesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<DocIdentifier>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteCalendarItemTypes
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun deleteCalendarItemTypesRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/calendarItemType/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets a calendarItemType
     *
     * @param calendarItemTypeId
     * @return CalendarItemTypeDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCalendarItemType(calendarItemTypeId: String): CalendarItemTypeDto {
        val localVariableConfig = getCalendarItemTypeRequestConfig(calendarItemTypeId = calendarItemTypeId)

        return request<Unit, CalendarItemTypeDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getCalendarItemType
     *
     * @param calendarItemTypeId
     * @return RequestConfig
     */
    fun getCalendarItemTypeRequestConfig(calendarItemTypeId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/calendarItemType/{calendarItemTypeId}".replace(
                "{" + "calendarItemTypeId" + "}",
                URLEncoder.encode(calendarItemTypeId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all calendarItemTypes
     *
     * @return kotlin.collections.List<CalendarItemTypeDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCalendarItemTypes(): List<CalendarItemTypeDto> {
        val localVariableConfig = getCalendarItemTypesRequestConfig()

        return request<Unit, List<CalendarItemTypeDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getCalendarItemTypes
     *
     * @return RequestConfig
     */
    fun getCalendarItemTypesRequestConfig(): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/calendarItemType",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all calendarItemTypes include deleted
     *
     * @return kotlin.collections.List<CalendarItemTypeDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCalendarItemTypesIncludeDeleted(): List<CalendarItemTypeDto> {
        val localVariableConfig = getCalendarItemTypesIncludeDeletedRequestConfig()

        return request<Unit, List<CalendarItemTypeDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getCalendarItemTypesIncludeDeleted
     *
     * @return RequestConfig
     */
    fun getCalendarItemTypesIncludeDeletedRequestConfig(): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/calendarItemType/includeDeleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Modifies an calendarItemType
     *
     * @param calendarItemTypeDto
     * @return CalendarItemTypeDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyCalendarItemType(calendarItemTypeDto: CalendarItemTypeDto): CalendarItemTypeDto {
        val localVariableConfig = modifyCalendarItemTypeRequestConfig(calendarItemTypeDto = calendarItemTypeDto)

        return request<CalendarItemTypeDto, CalendarItemTypeDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyCalendarItemType
     *
     * @param calendarItemTypeDto
     * @return RequestConfig
     */
    fun modifyCalendarItemTypeRequestConfig(calendarItemTypeDto: CalendarItemTypeDto): RequestConfig<CalendarItemTypeDto> {
        // val localVariableBody = calendarItemTypeDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = calendarItemTypeDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/calendarItemType",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
