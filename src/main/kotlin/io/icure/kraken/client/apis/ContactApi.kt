/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient

import io.icure.kraken.client.models.ContactDto
import io.icure.kraken.client.models.ContentDto
import io.icure.kraken.client.models.DelegationDto
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.FilterChainContact
import io.icure.kraken.client.models.FilterChainService
import io.icure.kraken.client.models.IcureStubDto
import io.icure.kraken.client.models.LabelledOccurenceDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListContactDto
import io.icure.kraken.client.models.PaginatedListServiceDto
import io.icure.kraken.client.models.ServiceDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class ContactApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "http://localhost:16043")
        }
    }

    /**
    * Close contacts for Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun closeForHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = closeForHCPartyPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation closeForHCPartyPatientForeignKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun closeForHCPartyPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/contact/byHcPartySecretForeignKeys/close",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a contact with the current user
    * Creates a contact with the current user and returns an instance of created contact afterward.
    * @param contactDto  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createContact(contactDto: ContactDto) : ContactDto?  {
        val localVariableConfig = createContactRequestConfig(contactDto = contactDto)

        return request<ContactDto, ContactDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createContact
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun createContactRequestConfig(contactDto: ContactDto) : RequestConfig<ContactDto> {
        val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a batch of contacts
    * Returns the modified contacts.
    * @param contactDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createContacts(contactDto: kotlin.collections.List<ContactDto>) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = createContactsRequestConfig(contactDto = contactDto)

        return request<kotlin.collections.List<ContactDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createContacts
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun createContactsRequestConfig(contactDto: kotlin.collections.List<ContactDto>) : RequestConfig<kotlin.collections.List<ContactDto>> {
        val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete contacts.
    * Response is a set containing the ID&#39;s of deleted contacts.
    * @param contactIds  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteContacts(contactIds: kotlin.String) : kotlin.collections.List<DocIdentifier>?  {
        val localVariableConfig = deleteContactsRequestConfig(contactIds = contactIds)

        return request<Unit, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteContacts
    *
    * @param contactIds  
    * @return RequestConfig
    */
    fun deleteContactsRequestConfig(contactIds: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/contact/{contactIds}".replace("{"+"contactIds"+"}", "$contactIds"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List contacts for the current user (HcParty) or the given hcparty in the filter 
    * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
    * @param filterChainContact  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterContactsBy(filterChainContact: FilterChainContact, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListContactDto?  {
        val localVariableConfig = filterContactsByRequestConfig(filterChainContact = filterChainContact, startDocumentId = startDocumentId, limit = limit)

        return request<FilterChainContact, PaginatedListContactDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation filterContactsBy
    *
    * @param filterChainContact  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun filterContactsByRequestConfig(filterChainContact: FilterChainContact, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<FilterChainContact> {
        val localVariableBody = filterChainContact
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List services for the current user (HcParty) or the given hcparty in the filter 
    * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
    * @param filterChainService  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListServiceDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterServicesBy(filterChainService: FilterChainService, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListServiceDto?  {
        val localVariableConfig = filterServicesByRequestConfig(filterChainService = filterChainService, startDocumentId = startDocumentId, limit = limit)

        return request<FilterChainService, PaginatedListServiceDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation filterServicesBy
    *
    * @param filterChainService  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun filterServicesByRequestConfig(filterChainService: FilterChainService, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<FilterChainService> {
        val localVariableBody = filterChainService
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/service/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of contacts found by Healthcare Party and form&#39;s id.
    * 
    * @param hcPartyId  
    * @param formId  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByHCPartyFormId(hcPartyId: kotlin.String, formId: kotlin.String) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = findByHCPartyFormIdRequestConfig(hcPartyId = hcPartyId, formId = formId)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByHCPartyFormId
    *
    * @param hcPartyId  
    * @param formId  
    * @return RequestConfig
    */
    fun findByHCPartyFormIdRequestConfig(hcPartyId: kotlin.String, formId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("formId", listOf(formId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/byHcPartyFormId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of contacts found by Healthcare Party and form&#39;s ids.
    * 
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByHCPartyFormIds(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = findByHCPartyFormIdsRequestConfig(hcPartyId = hcPartyId, listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByHCPartyFormIds
    *
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun findByHCPartyFormIdsRequestConfig(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/byHcPartyFormIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of contacts found by Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @param planOfActionsIds  (optional)
    * @param skipClosedContacts  (optional)
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByHCPartyPatientSecretFKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String, planOfActionsIds: kotlin.String?, skipClosedContacts: kotlin.Boolean?) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = findByHCPartyPatientSecretFKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys, planOfActionsIds = planOfActionsIds, skipClosedContacts = skipClosedContacts)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByHCPartyPatientSecretFKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @param planOfActionsIds  (optional)
    * @param skipClosedContacts  (optional)
    * @return RequestConfig
    */
    fun findByHCPartyPatientSecretFKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String, planOfActionsIds: kotlin.String?, skipClosedContacts: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
                if (planOfActionsIds != null) {
                    put("planOfActionsIds", listOf(planOfActionsIds.toString()))
                }
                if (skipClosedContacts != null) {
                    put("skipClosedContacts", listOf(skipClosedContacts.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/byHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List contacts found By Healthcare Party and service Id.
    * 
    * @param hcPartyId  
    * @param serviceId  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByHCPartyServiceId(hcPartyId: kotlin.String, serviceId: kotlin.String) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = findByHCPartyServiceIdRequestConfig(hcPartyId = hcPartyId, serviceId = serviceId)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByHCPartyServiceId
    *
    * @param hcPartyId  
    * @param serviceId  
    * @return RequestConfig
    */
    fun findByHCPartyServiceIdRequestConfig(hcPartyId: kotlin.String, serviceId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("serviceId", listOf(serviceId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/byHcPartyServiceId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List contacts found By externalId.
    * 
    * @param externalId  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findContactsByExternalId(externalId: kotlin.String) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = findContactsByExternalIdRequestConfig(externalId = externalId)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findContactsByExternalId
    *
    * @param externalId  
    * @return RequestConfig
    */
    fun findContactsByExternalIdRequestConfig(externalId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("externalId", listOf(externalId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/byExternalId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a list of contacts found by Healthcare Party and Patient foreign keys.
    * 
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findContactsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = findContactsByHCPartyPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findContactsByHCPartyPatientForeignKeys
    *
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun findContactsByHCPartyPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/byHcPartyPatientForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List contacts found By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<IcureStubDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findContactsDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<IcureStubDto>?  {
        val localVariableConfig = findContactsDelegationsStubsByHCPartyPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<IcureStubDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findContactsDelegationsStubsByHCPartyPatientForeignKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun findContactsDelegationsStubsByHCPartyPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/byHcPartySecretForeignKeys/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a contact
    * Gets a contact based on its id
    * @param contactId  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getContact(contactId: kotlin.String) : ContactDto?  {
        val localVariableConfig = getContactRequestConfig(contactId = contactId)

        return request<Unit, ContactDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getContact
    *
    * @param contactId  
    * @return RequestConfig
    */
    fun getContactRequestConfig(contactId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/{contactId}".replace("{"+"contactId"+"}", "$contactId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get contacts by batch
    * Get a list of contact by ids/keys.
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getContacts(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = getContactsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getContacts
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun getContactsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get an empty content
    * 
    * @return ContentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getEmptyContent() : ContentDto?  {
        val localVariableConfig = getEmptyContentRequestConfig()

        return request<Unit, ContentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getEmptyContent
    *
    * @return RequestConfig
    */
    fun getEmptyContentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/service/content/empty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get service by identifier
    * It gets service data based on the identifier (root &amp; extension) parameters.
    * @param hcPartyId  
    * @param `value`  
    * @param system  (optional)
    * @return ServiceDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getServiceByHealthcarepartyAndIdentifier(hcPartyId: kotlin.String, `value`: kotlin.String, system: kotlin.String?) : ServiceDto?  {
        val localVariableConfig = getServiceByHealthcarepartyAndIdentifierRequestConfig(hcPartyId = hcPartyId, `value` = `value`, system = system)

        return request<Unit, ServiceDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getServiceByHealthcarepartyAndIdentifier
    *
    * @param hcPartyId  
    * @param `value`  
    * @param system  (optional)
    * @return RequestConfig
    */
    fun getServiceByHealthcarepartyAndIdentifierRequestConfig(hcPartyId: kotlin.String, `value`: kotlin.String, system: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (system != null) {
                    put("system", listOf(system.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/{hcPartyId}/{value}".replace("{"+"hcPartyId"+"}", "$hcPartyId").replace("{"+"value"+"}", "$`value`"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the list of all used codes frequencies in services
    * 
    * @param codeType  
    * @param minOccurences  
    * @return kotlin.collections.List<LabelledOccurenceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getServiceCodesOccurences(codeType: kotlin.String, minOccurences: kotlin.Long) : kotlin.collections.List<LabelledOccurenceDto>?  {
        val localVariableConfig = getServiceCodesOccurencesRequestConfig(codeType = codeType, minOccurences = minOccurences)

        return request<Unit, kotlin.collections.List<LabelledOccurenceDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getServiceCodesOccurences
    *
    * @param codeType  
    * @param minOccurences  
    * @return RequestConfig
    */
    fun getServiceCodesOccurencesRequestConfig(codeType: kotlin.String, minOccurences: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/service/codes/{codeType}/{minOccurences}".replace("{"+"codeType"+"}", "$codeType").replace("{"+"minOccurences"+"}", "$minOccurences"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List contacts bu opening date parties with(out) pagination
    * Returns a list of contacts.
    * @param startKey The contact openingDate 
    * @param endKey The contact max openingDate 
    * @param hcpartyid hcpartyid 
    * @param startDocumentId A contact party document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsByOpeningDate(startKey: kotlin.Long, endKey: kotlin.Long, hcpartyid: kotlin.String, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListContactDto?  {
        val localVariableConfig = listContactsByOpeningDateRequestConfig(startKey = startKey, endKey = endKey, hcpartyid = hcpartyid, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListContactDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listContactsByOpeningDate
    *
    * @param startKey The contact openingDate 
    * @param endKey The contact max openingDate 
    * @param hcpartyid hcpartyid 
    * @param startDocumentId A contact party document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun listContactsByOpeningDateRequestConfig(startKey: kotlin.Long, endKey: kotlin.Long, hcpartyid: kotlin.String, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("startKey", listOf(startKey.toString()))
                put("endKey", listOf(endKey.toString()))
                put("hcpartyid", listOf(hcpartyid.toString()))
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/byOpeningDate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List services with provided ids 
    * Returns a list of services
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ServiceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listServices(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ServiceDto>?  {
        val localVariableConfig = listServicesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ServiceDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listServices
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listServicesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/service/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List services by related association id
    * Returns a list of services
    * @param associationId  
    * @return kotlin.collections.List<ServiceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listServicesByAssociationId(associationId: kotlin.String) : kotlin.collections.List<ServiceDto>?  {
        val localVariableConfig = listServicesByAssociationIdRequestConfig(associationId = associationId)

        return request<Unit, kotlin.collections.List<ServiceDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listServicesByAssociationId
    *
    * @param associationId  
    * @return RequestConfig
    */
    fun listServicesByAssociationIdRequestConfig(associationId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("associationId", listOf(associationId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/contact/service/associationId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List services linked to provided ids 
    * Returns a list of services
    * @param listOfIdsDto  
    * @param linkType The type of the link (optional)
    * @return kotlin.collections.List<ServiceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listServicesLinkedTo(listOfIdsDto: ListOfIdsDto, linkType: kotlin.String?) : kotlin.collections.List<ServiceDto>?  {
        val localVariableConfig = listServicesLinkedToRequestConfig(listOfIdsDto = listOfIdsDto, linkType = linkType)

        return request<ListOfIdsDto, kotlin.collections.List<ServiceDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listServicesLinkedTo
    *
    * @param listOfIdsDto  
    * @param linkType The type of the link (optional)
    * @return RequestConfig
    */
    fun listServicesLinkedToRequestConfig(listOfIdsDto: ListOfIdsDto, linkType: kotlin.String?) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (linkType != null) {
                    put("linkType", listOf(linkType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/service/linkedTo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get ids of contacts matching the provided filter for the current user (HcParty) 
    * 
    * @param abstractFilterDtoContact  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchContactsBy(abstractFilterDtoContact: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>) : kotlin.collections.List<kotlin.String>?  {
        val localVariableConfig = matchContactsByRequestConfig(abstractFilterDtoContact = abstractFilterDtoContact)

        return request<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation matchContactsBy
    *
    * @param abstractFilterDtoContact  
    * @return RequestConfig
    */
    fun matchContactsByRequestConfig(abstractFilterDtoContact: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>) : RequestConfig<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>> {
        val localVariableBody = abstractFilterDtoContact
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/match",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a contact
    * Returns the modified contact.
    * @param contactDto  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyContact(contactDto: ContactDto) : ContactDto?  {
        val localVariableConfig = modifyContactRequestConfig(contactDto = contactDto)

        return request<ContactDto, ContactDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyContact
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun modifyContactRequestConfig(contactDto: ContactDto) : RequestConfig<ContactDto> {
        val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/contact",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a batch of contacts
    * Returns the modified contacts.
    * @param contactDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyContacts(contactDto: kotlin.collections.List<ContactDto>) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = modifyContactsRequestConfig(contactDto = contactDto)

        return request<kotlin.collections.List<ContactDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyContacts
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun modifyContactsRequestConfig(contactDto: kotlin.collections.List<ContactDto>) : RequestConfig<kotlin.collections.List<ContactDto>> {
        val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/contact/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delegates a contact to a healthcare party
    * It delegates a contact to a healthcare party (By current healthcare party). Returns the contact with new delegations.
    * @param contactId  
    * @param delegationDto  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun newContactDelegations(contactId: kotlin.String, delegationDto: DelegationDto) : ContactDto?  {
        val localVariableConfig = newContactDelegationsRequestConfig(contactId = contactId, delegationDto = delegationDto)

        return request<DelegationDto, ContactDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation newContactDelegations
    *
    * @param contactId  
    * @param delegationDto  
    * @return RequestConfig
    */
    fun newContactDelegationsRequestConfig(contactId: kotlin.String, delegationDto: DelegationDto) : RequestConfig<DelegationDto> {
        val localVariableBody = delegationDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/{contactId}/delegate".replace("{"+"contactId"+"}", "$contactId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update delegations in healthElements.
    * Keys must be delimited by coma
    * @param icureStubDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setContactsDelegations(icureStubDto: kotlin.collections.List<IcureStubDto>) : kotlin.collections.List<ContactDto>?  {
        val localVariableConfig = setContactsDelegationsRequestConfig(icureStubDto = icureStubDto)

        return request<kotlin.collections.List<IcureStubDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setContactsDelegations
    *
    * @param icureStubDto  
    * @return RequestConfig
    */
    fun setContactsDelegationsRequestConfig(icureStubDto: kotlin.collections.List<IcureStubDto>) : RequestConfig<kotlin.collections.List<IcureStubDto>> {
        val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/contact/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
