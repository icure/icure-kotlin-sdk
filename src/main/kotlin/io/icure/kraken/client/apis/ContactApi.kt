/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*

import io.icure.kraken.client.models.ContactDto
import io.icure.kraken.client.models.ContentDto
import io.icure.kraken.client.models.DelegationDto
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.FilterChainContact
import io.icure.kraken.client.models.FilterChainService
import io.icure.kraken.client.models.IcureStubDto
import io.icure.kraken.client.models.LabelledOccurenceDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListContactDto
import io.icure.kraken.client.models.PaginatedListServiceDto
import io.icure.kraken.client.models.ServiceDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import kotlinx.coroutines.flow.flowOf
import java.nio.ByteBuffer
import java.util.*
import javax.inject.Named
import kotlinx.coroutines.flow.Flow

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class ContactApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "http://localhost:16043")
        }
    }

    /**
    * Close contacts for Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun closeForHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = closeForHCPartyPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation closeForHCPartyPatientForeignKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun closeForHCPartyPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/contact/byHcPartySecretForeignKeys/close",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Create a contact with the current user
    * Returns an instance of created contact.
    * @param contactDto  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createContact(contactDto: ContactDto) : ContactDto  {
        val localVariableConfig = createContactRequestConfig(contactDto = contactDto)

        return request<ContactDto, ContactDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation createContact
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun createContactRequestConfig(contactDto: ContactDto) : RequestConfig<ContactDto> {
        // val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = contactDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Create a batch of contacts
    * Returns the modified contacts.
    * @param contactDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createContacts(contactDto: kotlin.collections.List<ContactDto>) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = createContactsRequestConfig(contactDto = contactDto)

        return request<kotlin.collections.List<ContactDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation createContacts
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun createContactsRequestConfig(contactDto: kotlin.collections.List<ContactDto>) : RequestConfig<kotlin.collections.List<ContactDto>> {
        // val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = contactDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Delete contacts.
    * Response is a set containing the ID&#39;s of deleted contacts.
    * @param listOfIdsDto  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteContacts(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<DocIdentifier>  {
        val localVariableConfig = deleteContactsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation deleteContacts
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun deleteContactsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts for the current user (HcParty) or the given hcparty in the filter 
    * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
    * @param filterChainContact  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterContactsBy(filterChainContact: FilterChainContact, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListContactDto  {
        val localVariableConfig = filterContactsByRequestConfig(filterChainContact = filterChainContact, startDocumentId = startDocumentId, limit = limit)

        return request<FilterChainContact, PaginatedListContactDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation filterContactsBy
    *
    * @param filterChainContact  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun filterContactsByRequestConfig(filterChainContact: FilterChainContact, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<FilterChainContact> {
        // val localVariableBody = filterChainContact
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = filterChainContact

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List services for the current user (HcParty) or the given hcparty in the filter 
    * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
    * @param filterChainService  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListServiceDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterServicesBy(filterChainService: FilterChainService, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListServiceDto  {
        val localVariableConfig = filterServicesByRequestConfig(filterChainService = filterChainService, startDocumentId = startDocumentId, limit = limit)

        return request<FilterChainService, PaginatedListServiceDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation filterServicesBy
    *
    * @param filterChainService  
    * @param startDocumentId A Contact document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun filterServicesByRequestConfig(filterChainService: FilterChainService, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<FilterChainService> {
        // val localVariableBody = filterChainService
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = filterChainService

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/service/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts by opening date parties with(out) pagination
    * Returns a list of contacts.
    * @param startKey The contact openingDate 
    * @param endKey The contact max openingDate 
    * @param hcpartyid hcpartyid 
    * @param startDocumentId A contact party document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findContactsByOpeningDate(startKey: kotlin.Long, endKey: kotlin.Long, hcpartyid: kotlin.String, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListContactDto  {
        val localVariableConfig = findContactsByOpeningDateRequestConfig(startKey = startKey, endKey = endKey, hcpartyid = hcpartyid, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListContactDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findContactsByOpeningDate
    *
    * @param startKey The contact openingDate 
    * @param endKey The contact max openingDate 
    * @param hcpartyid hcpartyid 
    * @param startDocumentId A contact party document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findContactsByOpeningDateRequestConfig(startKey: kotlin.Long, endKey: kotlin.Long, hcpartyid: kotlin.String, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("startKey", listOf(startKey.toString()))
                put("endKey", listOf(endKey.toString()))
                put("hcpartyid", listOf(hcpartyid.toString()))
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/byOpeningDate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get a contact
    * 
    * @param contactId  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getContact(contactId: kotlin.String) : ContactDto  {
        val localVariableConfig = getContactRequestConfig(contactId = contactId)

        return request<Unit, ContactDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getContact
    *
    * @param contactId  
    * @return RequestConfig
    */
    fun getContactRequestConfig(contactId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/{contactId}".replace("{"+"contactId"+"}", "$contactId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get contacts
    * 
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getContacts(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = getContactsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getContacts
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun getContactsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get an empty content
    * 
    * @return ContentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getEmptyContent() : ContentDto  {
        val localVariableConfig = getEmptyContentRequestConfig()

        return request<Unit, ContentDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getEmptyContent
    *
    * @return RequestConfig
    */
    fun getEmptyContentRequestConfig() : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/service/content/empty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get the list of all used codes frequencies in services
    * 
    * @param codeType  
    * @param minOccurences  
    * @return kotlin.collections.List<LabelledOccurenceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getServiceCodesOccurences(codeType: kotlin.String, minOccurences: kotlin.Long) : kotlin.collections.List<LabelledOccurenceDto>  {
        val localVariableConfig = getServiceCodesOccurencesRequestConfig(codeType = codeType, minOccurences = minOccurences)

        return request<Unit, kotlin.collections.List<LabelledOccurenceDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getServiceCodesOccurences
    *
    * @param codeType  
    * @param minOccurences  
    * @return RequestConfig
    */
    fun getServiceCodesOccurencesRequestConfig(codeType: kotlin.String, minOccurences: kotlin.Long) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/service/codes/{codeType}/{minOccurences}".replace("{"+"codeType"+"}", "$codeType").replace("{"+"minOccurences"+"}", "$minOccurences"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List services with provided ids 
    * Returns a list of services
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ServiceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getServices(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ServiceDto>  {
        val localVariableConfig = getServicesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ServiceDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getServices
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun getServicesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/service",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List services linked to provided ids 
    * Returns a list of services
    * @param listOfIdsDto  
    * @param linkType The type of the link (optional)
    * @return kotlin.collections.List<ServiceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getServicesLinkedTo(listOfIdsDto: ListOfIdsDto, linkType: kotlin.String?) : kotlin.collections.List<ServiceDto>  {
        val localVariableConfig = getServicesLinkedToRequestConfig(listOfIdsDto = listOfIdsDto, linkType = linkType)

        return request<ListOfIdsDto, kotlin.collections.List<ServiceDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getServicesLinkedTo
    *
    * @param listOfIdsDto  
    * @param linkType The type of the link (optional)
    * @return RequestConfig
    */
    fun getServicesLinkedToRequestConfig(listOfIdsDto: ListOfIdsDto, linkType: kotlin.String?) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (linkType != null) {
                    put("linkType", listOf(linkType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/service/linkedTo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By Healthcare Party and service Id.
    * 
    * @param hcPartyId  
    * @param serviceId  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactByHCPartyServiceId(hcPartyId: kotlin.String, serviceId: kotlin.String) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = listContactByHCPartyServiceIdRequestConfig(hcPartyId = hcPartyId, serviceId = serviceId)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactByHCPartyServiceId
    *
    * @param hcPartyId  
    * @param serviceId  
    * @return RequestConfig
    */
    fun listContactByHCPartyServiceIdRequestConfig(hcPartyId: kotlin.String, serviceId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("serviceId", listOf(serviceId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/byHcPartyServiceId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By externalId.
    * 
    * @param externalId  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsByExternalId(externalId: kotlin.String) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = listContactsByExternalIdRequestConfig(externalId = externalId)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactsByExternalId
    *
    * @param externalId  
    * @return RequestConfig
    */
    fun listContactsByExternalIdRequestConfig(externalId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("externalId", listOf(externalId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/byExternalId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By Healthcare Party and form Id.
    * 
    * @param hcPartyId  
    * @param formId  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsByHCPartyAndFormId(hcPartyId: kotlin.String, formId: kotlin.String) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = listContactsByHCPartyAndFormIdRequestConfig(hcPartyId = hcPartyId, formId = formId)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactsByHCPartyAndFormId
    *
    * @param hcPartyId  
    * @param formId  
    * @return RequestConfig
    */
    fun listContactsByHCPartyAndFormIdRequestConfig(hcPartyId: kotlin.String, formId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("formId", listOf(formId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/byHcPartyFormId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By Healthcare Party and form Id.
    * 
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsByHCPartyAndFormIds(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = listContactsByHCPartyAndFormIdsRequestConfig(hcPartyId = hcPartyId, listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactsByHCPartyAndFormIds
    *
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listContactsByHCPartyAndFormIdsRequestConfig(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/byHcPartyFormIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By Healthcare Party and Patient foreign keys.
    * 
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsByHCPartyAndPatientForeignKeys(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = listContactsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactsByHCPartyAndPatientForeignKeys
    *
    * @param hcPartyId  
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun listContactsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/byHcPartyPatientForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @param planOfActionsIds  (optional)
    * @param skipClosedContacts  (optional)
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsByHCPartyAndPatientSecretFKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String, planOfActionsIds: kotlin.String?, skipClosedContacts: kotlin.Boolean?) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = listContactsByHCPartyAndPatientSecretFKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys, planOfActionsIds = planOfActionsIds, skipClosedContacts = skipClosedContacts)

        return request<Unit, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactsByHCPartyAndPatientSecretFKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @param planOfActionsIds  (optional)
    * @param skipClosedContacts  (optional)
    * @return RequestConfig
    */
    fun listContactsByHCPartyAndPatientSecretFKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String, planOfActionsIds: kotlin.String?, skipClosedContacts: kotlin.Boolean?) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
                if (planOfActionsIds != null) {
                    put("planOfActionsIds", listOf(planOfActionsIds.toString()))
                }
                if (skipClosedContacts != null) {
                    put("skipClosedContacts", listOf(skipClosedContacts.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/byHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List contacts found By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<IcureStubDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listContactsDelegationsStubsByHCPartyAndPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<IcureStubDto>  {
        val localVariableConfig = listContactsDelegationsStubsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<IcureStubDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listContactsDelegationsStubsByHCPartyAndPatientForeignKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun listContactsDelegationsStubsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/byHcPartySecretForeignKeys/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List services by related association id
    * Returns a list of services
    * @param associationId  
    * @return kotlin.collections.List<ServiceDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listServicesByAssociationId(associationId: kotlin.String) : kotlin.collections.List<ServiceDto>  {
        val localVariableConfig = listServicesByAssociationIdRequestConfig(associationId = associationId)

        return request<Unit, kotlin.collections.List<ServiceDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listServicesByAssociationId
    *
    * @param associationId  
    * @return RequestConfig
    */
    fun listServicesByAssociationIdRequestConfig(associationId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("associationId", listOf(associationId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/contact/service/associationId",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get ids of contacts matching the provided filter for the current user (HcParty) 
    * 
    * @param abstractFilterDtoContact  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchContactsBy(abstractFilterDtoContact: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>) : kotlin.collections.List<kotlin.String>  {
        val localVariableConfig = matchContactsByRequestConfig(abstractFilterDtoContact = abstractFilterDtoContact)

        return request<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation matchContactsBy
    *
    * @param abstractFilterDtoContact  
    * @return RequestConfig
    */
    fun matchContactsByRequestConfig(abstractFilterDtoContact: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>) : RequestConfig<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.ContactDto>> {
        // val localVariableBody = abstractFilterDtoContact
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = abstractFilterDtoContact

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/match",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Modify a contact
    * Returns the modified contact.
    * @param contactDto  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyContact(contactDto: ContactDto) : ContactDto  {
        val localVariableConfig = modifyContactRequestConfig(contactDto = contactDto)

        return request<ContactDto, ContactDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation modifyContact
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun modifyContactRequestConfig(contactDto: ContactDto) : RequestConfig<ContactDto> {
        // val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = contactDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/contact",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Modify a batch of contacts
    * Returns the modified contacts.
    * @param contactDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyContacts(contactDto: kotlin.collections.List<ContactDto>) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = modifyContactsRequestConfig(contactDto = contactDto)

        return request<kotlin.collections.List<ContactDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation modifyContacts
    *
    * @param contactDto  
    * @return RequestConfig
    */
    fun modifyContactsRequestConfig(contactDto: kotlin.collections.List<ContactDto>) : RequestConfig<kotlin.collections.List<ContactDto>> {
        // val localVariableBody = contactDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = contactDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/contact/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Update delegations in healthElements.
    * Keys must be delimited by coma
    * @param icureStubDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyContactsDelegations(icureStubDto: kotlin.collections.List<IcureStubDto>) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = modifyContactsDelegationsRequestConfig(icureStubDto = icureStubDto)

        return request<kotlin.collections.List<IcureStubDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation modifyContactsDelegations
    *
    * @param icureStubDto  
    * @return RequestConfig
    */
    fun modifyContactsDelegationsRequestConfig(icureStubDto: kotlin.collections.List<IcureStubDto>) : RequestConfig<kotlin.collections.List<IcureStubDto>> {
        // val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = icureStubDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/contact/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Delegates a contact to a healthcare party
    * It delegates a contact to a healthcare party (By current healthcare party). Returns the contact with new delegations.
    * @param contactId  
    * @param delegationDto  
    * @return ContactDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun newContactDelegations(contactId: kotlin.String, delegationDto: DelegationDto) : ContactDto  {
        val localVariableConfig = newContactDelegationsRequestConfig(contactId = contactId, delegationDto = delegationDto)

        return request<DelegationDto, ContactDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation newContactDelegations
    *
    * @param contactId  
    * @param delegationDto  
    * @return RequestConfig
    */
    fun newContactDelegationsRequestConfig(contactId: kotlin.String, delegationDto: DelegationDto) : RequestConfig<DelegationDto> {
        // val localVariableBody = delegationDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = delegationDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/{contactId}/delegate".replace("{"+"contactId"+"}", "$contactId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Update delegations in healthElements.
    * Keys must be delimited by coma
    * @param icureStubDto  
    * @return kotlin.collections.List<ContactDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setContactsDelegations(icureStubDto: kotlin.collections.List<IcureStubDto>) : kotlin.collections.List<ContactDto>  {
        val localVariableConfig = setContactsDelegationsRequestConfig(icureStubDto = icureStubDto)

        return request<kotlin.collections.List<IcureStubDto>, kotlin.collections.List<ContactDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation setContactsDelegations
    *
    * @param icureStubDto  
    * @return RequestConfig
    */
    fun setContactsDelegationsRequestConfig(icureStubDto: kotlin.collections.List<IcureStubDto>) : RequestConfig<kotlin.collections.List<IcureStubDto>> {
        // val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = icureStubDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/contact/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

}
