/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.models.DocIdentifier
import org.taktik.icure.services.external.rest.v2.dto.ListOfIdsDto
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.taktik.icure.services.external.rest.v2.dto.DocumentTemplateDto
import org.taktik.icure.services.external.rest.v2.dto.data.ByteArrayDto
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class DocTemplateApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Create a document template with the current user
     * Returns an instance of created document template.
     * @param documentTemplateDto
     * @return DocumentTemplateDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createDocumentTemplate(documentTemplateDto: DocumentTemplateDto): DocumentTemplateDto {
        val localVariableConfig = createDocumentTemplateRequestConfig(documentTemplateDto = documentTemplateDto)

        return request<DocumentTemplateDto, DocumentTemplateDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createDocumentTemplate
     *
     * @param documentTemplateDto
     * @return RequestConfig
     */
    fun createDocumentTemplateRequestConfig(documentTemplateDto: DocumentTemplateDto): RequestConfig<DocumentTemplateDto> {
        val localVariableBody = documentTemplateDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/doctemplate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Deletes document templates
     *
     * @param listOfIdsDto
     * @return kotlin.collections.List<DocIdentifier>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteDocumentTemplates(listOfIdsDto: ListOfIdsDto): List<DocIdentifier> {
        val localVariableConfig = deleteDocumentTemplatesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<DocIdentifier>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteDocumentTemplates
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun deleteDocumentTemplatesRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/doctemplate/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Download a the document template attachment
     *
     * @param documentTemplateId
     * @param attachmentId
     * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getAttachmentText(
        documentTemplateId: String,
        attachmentId: String
    ): kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer> {
        val localVariableConfig =
            getAttachmentTextRequestConfig(documentTemplateId = documentTemplateId, attachmentId = attachmentId)

        return request<Unit, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getAttachmentText
     *
     * @param documentTemplateId
     * @param attachmentId
     * @return RequestConfig
     */
    fun getAttachmentTextRequestConfig(
        documentTemplateId: String,
        attachmentId: String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/{documentTemplateId}/attachmentText/{attachmentId}".replace(
                "{" + "documentTemplateId" + "}",
                documentTemplateId
            ).replace("{" + "attachmentId" + "}", attachmentId),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets a document template
     *
     * @param documentTemplateId
     * @return DocumentTemplateDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentTemplate(documentTemplateId: String): DocumentTemplateDto {
        val localVariableConfig = getDocumentTemplateRequestConfig(documentTemplateId = documentTemplateId)

        return request<Unit, DocumentTemplateDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocumentTemplate
     *
     * @param documentTemplateId
     * @return RequestConfig
     */
    fun getDocumentTemplateRequestConfig(documentTemplateId: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/{documentTemplateId}".replace(
                "{" + "documentTemplateId" + "}",
                documentTemplateId
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Download a the document template attachment
     *
     * @param documentTemplateId
     * @param attachmentId
     * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentTemplateAttachment(
        documentTemplateId: String,
        attachmentId: String
    ): kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer> {
        val localVariableConfig = getDocumentTemplateAttachmentRequestConfig(
            documentTemplateId = documentTemplateId,
            attachmentId = attachmentId
        )

        return request<Unit, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocumentTemplateAttachment
     *
     * @param documentTemplateId
     * @param attachmentId
     * @return RequestConfig
     */
    fun getDocumentTemplateAttachmentRequestConfig(
        documentTemplateId: String,
        attachmentId: String
    ): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/{documentTemplateId}/attachment/{attachmentId}".replace(
                "{" + "documentTemplateId" + "}",
                documentTemplateId
            ).replace("{" + "attachmentId" + "}", attachmentId),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all document templates for all users
     *
     * @return kotlin.collections.List<DocumentTemplateDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listAllDocumentTemplates(): List<DocumentTemplateDto> {
        val localVariableConfig = listAllDocumentTemplatesRequestConfig()

        return request<Unit, List<DocumentTemplateDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listAllDocumentTemplates
     *
     * @return RequestConfig
     */
    fun listAllDocumentTemplatesRequestConfig(): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/find/all",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all document templates for current user
     *
     * @return kotlin.collections.List<DocumentTemplateDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentTemplates(): List<DocumentTemplateDto> {
        val localVariableConfig = listDocumentTemplatesRequestConfig()

        return request<Unit, List<DocumentTemplateDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listDocumentTemplates
     *
     * @return RequestConfig
     */
    fun listDocumentTemplatesRequestConfig(): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all document templates by Type
     *
     * @param documentTypeCode
     * @return kotlin.collections.List<DocumentTemplateDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentTemplatesByDocumentType(documentTypeCode: String): List<DocumentTemplateDto> {
        val localVariableConfig = listDocumentTemplatesByDocumentTypeRequestConfig(documentTypeCode = documentTypeCode)

        return request<Unit, List<DocumentTemplateDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listDocumentTemplatesByDocumentType
     *
     * @param documentTypeCode
     * @return RequestConfig
     */
    fun listDocumentTemplatesByDocumentTypeRequestConfig(documentTypeCode: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/byDocumentType/{documentTypeCode}".replace(
                "{" + "documentTypeCode" + "}",
                documentTypeCode
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all document templates by Type For currentUser
     *
     * @param documentTypeCode
     * @return kotlin.collections.List<DocumentTemplateDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentTemplatesByDocumentTypeForCurrentUser(documentTypeCode: String): List<DocumentTemplateDto> {
        val localVariableConfig =
            listDocumentTemplatesByDocumentTypeForCurrentUserRequestConfig(documentTypeCode = documentTypeCode)

        return request<Unit, List<DocumentTemplateDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listDocumentTemplatesByDocumentTypeForCurrentUser
     *
     * @param documentTypeCode
     * @return RequestConfig
     */
    fun listDocumentTemplatesByDocumentTypeForCurrentUserRequestConfig(documentTypeCode: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/byDocumentTypeForCurrentUser/{documentTypeCode}".replace(
                "{" + "documentTypeCode" + "}",
                documentTypeCode
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets all document templates
     *
     * @param specialityCode
     * @return kotlin.collections.List<DocumentTemplateDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentTemplatesBySpeciality(specialityCode: String): List<DocumentTemplateDto> {
        val localVariableConfig = listDocumentTemplatesBySpecialityRequestConfig(specialityCode = specialityCode)

        return request<Unit, List<DocumentTemplateDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listDocumentTemplatesBySpeciality
     *
     * @param specialityCode
     * @return RequestConfig
     */
    fun listDocumentTemplatesBySpecialityRequestConfig(specialityCode: String): RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/doctemplate/bySpecialty/{specialityCode}".replace(
                "{" + "specialityCode" + "}",
                specialityCode
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Modify a document template with the current user
     * Returns an instance of created document template.
     * @param documentTemplateId
     * @param documentTemplateDto
     * @return DocumentTemplateDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocumentTemplate(
        documentTemplateId: String,
        documentTemplateDto: DocumentTemplateDto
    ): DocumentTemplateDto {
        val localVariableConfig = modifyDocumentTemplateRequestConfig(
            documentTemplateId = documentTemplateId,
            documentTemplateDto = documentTemplateDto
        )

        return request<DocumentTemplateDto, DocumentTemplateDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyDocumentTemplate
     *
     * @param documentTemplateId
     * @param documentTemplateDto
     * @return RequestConfig
     */
    fun modifyDocumentTemplateRequestConfig(
        documentTemplateId: String,
        documentTemplateDto: DocumentTemplateDto
    ): RequestConfig<DocumentTemplateDto> {
        val localVariableBody = documentTemplateDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/doctemplate/{documentTemplateId}".replace(
                "{" + "documentTemplateId" + "}",
                documentTemplateId
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Creates a document&#39;s attachment
     *
     * @param documentTemplateId
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @return DocumentTemplateDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentTemplateAttachment(
        documentTemplateId: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>
    ): DocumentTemplateDto {
        val localVariableConfig = setDocumentTemplateAttachmentRequestConfig(
            documentTemplateId = documentTemplateId,
            ioIcureKrakenClientInfrastructureByteArrayWrapper = ioIcureKrakenClientInfrastructureByteArrayWrapper
        )

        return request<List<ByteArrayWrapper>, DocumentTemplateDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setDocumentTemplateAttachment
     *
     * @param documentTemplateId
     * @param ioIcureKrakenClientInfrastructureByteArrayWrapper
     * @return RequestConfig
     */
    fun setDocumentTemplateAttachmentRequestConfig(
        documentTemplateId: String,
        ioIcureKrakenClientInfrastructureByteArrayWrapper: List<ByteArrayWrapper>
    ): RequestConfig<List<ByteArrayWrapper>> {
        val localVariableBody = ioIcureKrakenClientInfrastructureByteArrayWrapper
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/doctemplate/{documentTemplateId}/attachment".replace(
                "{" + "documentTemplateId" + "}",
                documentTemplateId
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Creates a document&#39;s attachment
     *
     * @param documentTemplateId
     * @param byteArrayDto
     * @return DocumentTemplateDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentTemplateAttachmentJson(
        documentTemplateId: String,
        byteArrayDto: ByteArrayDto
    ): DocumentTemplateDto {
        val localVariableConfig = setDocumentTemplateAttachmentJsonRequestConfig(
            documentTemplateId = documentTemplateId,
            byteArrayDto = byteArrayDto
        )

        return request<ByteArrayDto, DocumentTemplateDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setDocumentTemplateAttachmentJson
     *
     * @param documentTemplateId
     * @param byteArrayDto
     * @return RequestConfig
     */
    fun setDocumentTemplateAttachmentJsonRequestConfig(
        documentTemplateId: String,
        byteArrayDto: ByteArrayDto
    ): RequestConfig<ByteArrayDto> {
        val localVariableBody = byteArrayDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/doctemplate/{documentTemplateId}/attachmentJson".replace(
                "{" + "documentTemplateId" + "}",
                documentTemplateId
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
