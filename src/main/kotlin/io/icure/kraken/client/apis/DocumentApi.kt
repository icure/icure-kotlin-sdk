/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.models.DocIdentifier
import org.taktik.icure.services.external.rest.v2.dto.IcureStubDto
import org.taktik.icure.services.external.rest.v2.dto.ListOfIdsDto
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOf
import org.taktik.icure.services.external.rest.v2.dto.DocumentDto
import java.net.URLEncoder
import java.nio.ByteBuffer
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class DocumentApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Creates a document
     *
     * @param documentDto
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createDocument(documentDto: DocumentDto, strict: Boolean = false): DocumentDto {
        val localVariableConfig = createDocumentRequestConfig(documentDto = documentDto, strict = strict)

        return request<DocumentDto, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createDocument
     *
     * @param documentDto
     * @return RequestConfig
     */
    private fun createDocumentRequestConfig(documentDto: DocumentDto, strict: Boolean): RequestConfig<DocumentDto> {
        // val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf(
            "strict" to listOf("true".takeIf { strict } ?: "false")
        )
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = documentDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Deletes a document&#39;s attachment
     *
     * @param documentId
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteAttachment(documentId: String): DocumentDto {
        val localVariableConfig = deleteAttachmentRequestConfig(documentId = documentId)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteAttachment
     *
     * @param documentId
     * @return RequestConfig
     */
    fun deleteAttachmentRequestConfig(documentId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v2/document/{documentId}/attachment".replace(
                "{" + "documentId" + "}",
                URLEncoder.encode(documentId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Deletes documents
     *
     * @param listOfIdsDto
     * @return kotlin.collections.List<DocIdentifier>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteDocument(listOfIdsDto: ListOfIdsDto): List<DocIdentifier> {
        val localVariableConfig = deleteDocumentRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<DocIdentifier>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteDocument
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun deleteDocumentRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List documents with no delegation
     * Keys must be delimited by coma
     * @param limit  (optional)
     * @return kotlin.collections.List<DocumentDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findWithoutDelegation(limit: Int?): List<DocumentDto> {
        val localVariableConfig = findWithoutDelegationRequestConfig(limit = limit)

        return request<Unit, List<DocumentDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation findWithoutDelegation
     *
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun findWithoutDelegationRequestConfig(limit: Int?): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/woDelegation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets a document
     *
     * @param documentId
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocument(documentId: String): DocumentDto {
        val localVariableConfig = getDocumentRequestConfig(documentId = documentId)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocument
     *
     * @param documentId
     * @return RequestConfig
     */
    fun getDocumentRequestConfig(documentId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/{documentId}".replace(
                "{" + "documentId" + "}",
                URLEncoder.encode(documentId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Load document&#39;s attachment
     *
     * @param documentId
     * @param attachmentId
     * @param enckeys  (optional)
     * @param fileName  (optional)
     * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentAttachment(
        documentId: String,
        attachmentId: String,
        enckeys: String?,
        fileName: String?
    ): Flow<ByteBuffer> {
        val localVariableConfig = getDocumentAttachmentRequestConfig(
            documentId = documentId,
            attachmentId = attachmentId,
            enckeys = enckeys,
            fileName = fileName
        )

        return request<Unit, Flow<ByteBuffer>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocumentAttachment
     *
     * @param documentId
     * @param attachmentId
     * @param enckeys  (optional)
     * @param fileName  (optional)
     * @return RequestConfig
     */
    fun getDocumentAttachmentRequestConfig(
        documentId: String,
        attachmentId: String,
        enckeys: String?,
        fileName: String?
    ): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
                if (fileName != null) {
                    put("fileName", listOf(fileName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/octet-stream"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/{documentId}/attachment/{attachmentId}".replace(
                "{" + "documentId" + "}",
                URLEncoder.encode(documentId, Charsets.UTF_8)
            ).replace("{" + "attachmentId" + "}", URLEncoder.encode(attachmentId, Charsets.UTF_8)),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets a document
     *
     * @param externalUuid
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentByExternalUuid(externalUuid: String): DocumentDto {
        val localVariableConfig = getDocumentByExternalUuidRequestConfig(externalUuid = externalUuid)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocumentByExternalUuid
     *
     * @param externalUuid
     * @return RequestConfig
     */
    fun getDocumentByExternalUuidRequestConfig(externalUuid: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/externaluuid/{externalUuid}".replace(
                "{" + "externalUuid" + "}",
                URLEncoder.encode(externalUuid, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets a document
     *
     * @param listOfIdsDto
     * @return kotlin.collections.List<DocumentDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocuments(listOfIdsDto: ListOfIdsDto): List<DocumentDto> {
        val localVariableConfig = getDocumentsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<DocumentDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocuments
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun getDocumentsRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get all documents with externalUuid
     *
     * @param externalUuid
     * @return kotlin.collections.List<DocumentDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentsByExternalUuid(externalUuid: String): List<DocumentDto> {
        val localVariableConfig = getDocumentsByExternalUuidRequestConfig(externalUuid = externalUuid)

        return request<Unit, List<DocumentDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getDocumentsByExternalUuid
     *
     * @param externalUuid
     * @return RequestConfig
     */
    fun getDocumentsByExternalUuidRequestConfig(externalUuid: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/externaluuid/{externalUuid}/all".replace(
                "{" + "externalUuid" + "}",
                URLEncoder.encode(externalUuid, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List documents found By type, By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param documentTypeCode
     * @param hcPartyId
     * @param secretFKeys
     * @return kotlin.collections.List<DocumentDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentByTypeHCPartyMessageSecretFKeys(
        documentTypeCode: String,
        hcPartyId: String,
        secretFKeys: String
    ): List<DocumentDto> {
        val localVariableConfig = listDocumentByTypeHCPartyMessageSecretFKeysRequestConfig(
            documentTypeCode = documentTypeCode,
            hcPartyId = hcPartyId,
            secretFKeys = secretFKeys
        )

        return request<Unit, List<DocumentDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listDocumentByTypeHCPartyMessageSecretFKeys
     *
     * @param documentTypeCode
     * @param hcPartyId
     * @param secretFKeys
     * @return RequestConfig
     */
    fun listDocumentByTypeHCPartyMessageSecretFKeysRequestConfig(
        documentTypeCode: String,
        hcPartyId: String,
        secretFKeys: String
    ): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("documentTypeCode", listOf(documentTypeCode))
                put("hcPartyId", listOf(hcPartyId))
                put("secretFKeys", listOf(secretFKeys))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/byTypeHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List documents found By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param hcPartyId
     * @param secretFKeys
     * @return kotlin.collections.List<DocumentDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentsByHCPartyAndPatientForeignKeys(
        hcPartyId: String,
        secretFKeys: String
    ): List<DocumentDto> {
        val localVariableConfig =
            listDocumentsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, List<DocumentDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listDocumentsByHCPartyAndPatientForeignKeys
     *
     * @param hcPartyId
     * @param secretFKeys
     * @return RequestConfig
     */
    fun listDocumentsByHCPartyAndPatientForeignKeysRequestConfig(
        hcPartyId: String,
        secretFKeys: String
    ): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId))
                put("secretFKeys", listOf(secretFKeys))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/byHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Updates a document
     *
     * @param documentDto
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocument(documentDto: DocumentDto): DocumentDto {
        val localVariableConfig = modifyDocumentRequestConfig(documentDto = documentDto)

        return request<DocumentDto, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyDocument
     *
     * @param documentDto
     * @return RequestConfig
     */
    fun modifyDocumentRequestConfig(documentDto: DocumentDto): RequestConfig<DocumentDto> {
        // val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = documentDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Updates a batch of documents
     * Returns the modified documents.
     * @param documentDto
     * @return kotlin.collections.List<DocumentDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocuments(documentDto: List<DocumentDto>): List<DocumentDto> {
        val localVariableConfig = modifyDocumentsRequestConfig(documentDto = documentDto)

        return request<List<DocumentDto>, List<DocumentDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyDocuments
     *
     * @param documentDto
     * @return RequestConfig
     */
    fun modifyDocumentsRequestConfig(documentDto: List<DocumentDto>): RequestConfig<List<DocumentDto>> {
        // val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = documentDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Creates a document&#39;s attachment
     *
     * @param documentId
     * @param body
     * @param enckeys  (optional)
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentAttachment(
        documentId: String,
        body: Flow<ByteBuffer>,
        enckeys: String?
    ): DocumentDto {
        val localVariableConfig =
            setDocumentAttachmentRequestConfig(documentId = documentId, body = body, enckeys = enckeys)

        return request<Flow<ByteBuffer>, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setDocumentAttachment
     *
     * @param documentId
     * @param body
     * @param enckeys  (optional)
     * @return RequestConfig
     */
    fun setDocumentAttachmentRequestConfig(
        documentId: String,
        body: Flow<ByteBuffer>,
        enckeys: String?
    ): RequestConfig<Flow<ByteBuffer>> {
        // val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> =
            mutableMapOf("Content-Type" to "application/octet-stream")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = body

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/{documentId}/attachment".replace(
                "{" + "documentId" + "}",
                URLEncoder.encode(documentId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Creates a document&#39;s attachment
     *
     * @param documentId
     * @param attachment
     * @param enckeys  (optional)
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentAttachmentMulti(
        documentId: String,
        attachment: ByteArrayWrapper,
        enckeys: String?
    ): DocumentDto {
        val localVariableConfig =
            setDocumentAttachmentMultiRequestConfig(documentId = documentId, attachment = attachment, enckeys = enckeys)

        return request<Flow<ByteBuffer>, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setDocumentAttachmentMulti
     *
     * @param documentId
     * @param attachment
     * @param enckeys  (optional)
     * @return RequestConfig
     */
    fun setDocumentAttachmentMultiRequestConfig(
        documentId: String,
        attachment: ByteArrayWrapper,
        enckeys: String?
    ): RequestConfig<Flow<ByteBuffer>> {
        // val localVariableBody = mapOf("attachment" to attachment)
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = attachment.byteArray
        val boundary = UUID.randomUUID().toString()


        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/{documentId}/attachment/multipart".replace(
                "{" + "documentId" + "}",
                URLEncoder.encode(documentId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody.let {
                flowOf(
                    ByteBuffer.wrap(
                        """--${boundary}
        Content-Disposition: form-data; name="attachment"
        Content-Type: application/octet-stream

    """.toByteArray(Charsets.UTF_8) + localVariableBody + "\n--${boundary}".toByteArray(Charsets.UTF_8)
                    )
                )
            }
        )
    }

    /**
     * Update delegations in healthElements.
     * Keys must be delimited by coma
     * @param icureStubDto
     * @return kotlin.collections.List<IcureStubDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentsDelegations(icureStubDto: List<IcureStubDto>): List<IcureStubDto> {
        val localVariableConfig = setDocumentsDelegationsRequestConfig(icureStubDto = icureStubDto)

        return request<List<IcureStubDto>, List<IcureStubDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setDocumentsDelegations
     *
     * @param icureStubDto
     * @return RequestConfig
     */
    fun setDocumentsDelegationsRequestConfig(icureStubDto: List<IcureStubDto>): RequestConfig<List<IcureStubDto>> {
        // val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = icureStubDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Creates a document&#39;s attachment
     *
     * @param documentId
     * @param body
     * @param enckeys  (optional)
     * @return DocumentDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setSafeDocumentAttachment(
        documentId: String,
        body: Flow<ByteBuffer>,
        enckeys: String?
    ): DocumentDto {
        val localVariableConfig =
            setSafeDocumentAttachmentRequestConfig(documentId = documentId, body = body, enckeys = enckeys)

        return request<Flow<ByteBuffer>, DocumentDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setSafeDocumentAttachment
     *
     * @param documentId
     * @param body
     * @param enckeys  (optional)
     * @return RequestConfig
     */
    fun setSafeDocumentAttachmentRequestConfig(
        documentId: String,
        body: Flow<ByteBuffer>,
        enckeys: String?
    ): RequestConfig<Flow<ByteBuffer>> {
        // val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("documentId", listOf(documentId))
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> =
            mutableMapOf("Content-Type" to "application/octet-stream")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = body

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/attachment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
