/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.DocumentDto
import io.icure.kraken.client.models.IcureStubDto
import io.icure.kraken.client.models.ListOfIdsDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class DocumentApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
    * Creates a document
    * 
    * @param documentDto  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createDocument(documentDto: DocumentDto) : DocumentDto?  {
        val localVariableConfig = createDocumentRequestConfig(documentDto = documentDto)

        return request<DocumentDto, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createDocument
    *
    * @param documentDto  
    * @return RequestConfig
    */
    fun createDocumentRequestConfig(documentDto: DocumentDto) : RequestConfig<DocumentDto> {
        val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document
    * 
    * @param documentDto  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createDocument1(documentDto: DocumentDto) : DocumentDto?  {
        val localVariableConfig = createDocument1RequestConfig(documentDto = documentDto)

        return request<DocumentDto, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createDocument1
    *
    * @param documentDto  
    * @return RequestConfig
    */
    fun createDocument1RequestConfig(documentDto: DocumentDto) : RequestConfig<DocumentDto> {
        val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes a document&#39;s attachment
    * 
    * @param documentId  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteAttachment(documentId: kotlin.String) : DocumentDto?  {
        val localVariableConfig = deleteAttachmentRequestConfig(documentId = documentId)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteAttachment
    *
    * @param documentId  
    * @return RequestConfig
    */
    fun deleteAttachmentRequestConfig(documentId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v2/document/{documentId}/attachment".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes a document&#39;s attachment
    * 
    * @param documentId  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteAttachment1(documentId: kotlin.String) : DocumentDto?  {
        val localVariableConfig = deleteAttachment1RequestConfig(documentId = documentId)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteAttachment1
    *
    * @param documentId  
    * @return RequestConfig
    */
    fun deleteAttachment1RequestConfig(documentId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/document/{documentId}/attachment".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes documents
    * 
    * @param listOfIdsDto  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteDocument(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<DocIdentifier>?  {
        val localVariableConfig = deleteDocumentRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteDocument
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun deleteDocumentRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deletes a document
    * 
    * @param documentIds  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteDocument1(documentIds: kotlin.String) : kotlin.collections.List<DocIdentifier>?  {
        val localVariableConfig = deleteDocument1RequestConfig(documentIds = documentIds)

        return request<Unit, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteDocument1
    *
    * @param documentIds  
    * @return RequestConfig
    */
    fun deleteDocument1RequestConfig(documentIds: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/document/{documentIds}".replace("{"+"documentIds"+"}", "$documentIds"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List documents with no delegation
    * Keys must be delimited by coma
    * @param limit  (optional)
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findWithoutDelegation(limit: kotlin.Int?) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = findWithoutDelegationRequestConfig(limit = limit)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findWithoutDelegation
    *
    * @param limit  (optional)
    * @return RequestConfig
    */
    fun findWithoutDelegationRequestConfig(limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/woDelegation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets a document
    * 
    * @param documentId  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocument(documentId: kotlin.String) : DocumentDto?  {
        val localVariableConfig = getDocumentRequestConfig(documentId = documentId)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocument
    *
    * @param documentId  
    * @return RequestConfig
    */
    fun getDocumentRequestConfig(documentId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/{documentId}".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets a document
    * 
    * @param documentId  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocument1(documentId: kotlin.String) : DocumentDto?  {
        val localVariableConfig = getDocument1RequestConfig(documentId = documentId)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocument1
    *
    * @param documentId  
    * @return RequestConfig
    */
    fun getDocument1RequestConfig(documentId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/{documentId}".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Load document&#39;s attachment
    * 
    * @param documentId  
    * @param attachmentId  
    * @param enckeys  (optional)
    * @param fileName  (optional)
    * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentAttachment(documentId: kotlin.String, attachmentId: kotlin.String, enckeys: kotlin.String?, fileName: kotlin.String?) : kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>?  {
        val localVariableConfig = getDocumentAttachmentRequestConfig(documentId = documentId, attachmentId = attachmentId, enckeys = enckeys, fileName = fileName)

        return request<Unit, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocumentAttachment
    *
    * @param documentId  
    * @param attachmentId  
    * @param enckeys  (optional)
    * @param fileName  (optional)
    * @return RequestConfig
    */
    fun getDocumentAttachmentRequestConfig(documentId: kotlin.String, attachmentId: kotlin.String, enckeys: kotlin.String?, fileName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
                if (fileName != null) {
                    put("fileName", listOf(fileName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/{documentId}/attachment/{attachmentId}".replace("{"+"documentId"+"}", "$documentId").replace("{"+"attachmentId"+"}", "$attachmentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Load document&#39;s attachment
    * 
    * @param documentId  
    * @param attachmentId  
    * @param enckeys  (optional)
    * @param fileName  (optional)
    * @return kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentAttachment1(documentId: kotlin.String, attachmentId: kotlin.String, enckeys: kotlin.String?, fileName: kotlin.String?) : kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>?  {
        val localVariableConfig = getDocumentAttachment1RequestConfig(documentId = documentId, attachmentId = attachmentId, enckeys = enckeys, fileName = fileName)

        return request<Unit, kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocumentAttachment1
    *
    * @param documentId  
    * @param attachmentId  
    * @param enckeys  (optional)
    * @param fileName  (optional)
    * @return RequestConfig
    */
    fun getDocumentAttachment1RequestConfig(documentId: kotlin.String, attachmentId: kotlin.String, enckeys: kotlin.String?, fileName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
                if (fileName != null) {
                    put("fileName", listOf(fileName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/{documentId}/attachment/{attachmentId}".replace("{"+"documentId"+"}", "$documentId").replace("{"+"attachmentId"+"}", "$attachmentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets a document
    * 
    * @param externalUuid  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentByExternalUuid(externalUuid: kotlin.String) : DocumentDto?  {
        val localVariableConfig = getDocumentByExternalUuidRequestConfig(externalUuid = externalUuid)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocumentByExternalUuid
    *
    * @param externalUuid  
    * @return RequestConfig
    */
    fun getDocumentByExternalUuidRequestConfig(externalUuid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/externaluuid/{externalUuid}".replace("{"+"externalUuid"+"}", "$externalUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets a document
    * 
    * @param externalUuid  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentByExternalUuid1(externalUuid: kotlin.String) : DocumentDto?  {
        val localVariableConfig = getDocumentByExternalUuid1RequestConfig(externalUuid = externalUuid)

        return request<Unit, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocumentByExternalUuid1
    *
    * @param externalUuid  
    * @return RequestConfig
    */
    fun getDocumentByExternalUuid1RequestConfig(externalUuid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/externaluuid/{externalUuid}".replace("{"+"externalUuid"+"}", "$externalUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets a document
    * 
    * @param listOfIdsDto  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocuments(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = getDocumentsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocuments
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun getDocumentsRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets a document
    * 
    * @param listOfIdsDto  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocuments1(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = getDocuments1RequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocuments1
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun getDocuments1RequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/document/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get all documents with externalUuid
    * 
    * @param externalUuid  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentsByExternalUuid(externalUuid: kotlin.String) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = getDocumentsByExternalUuidRequestConfig(externalUuid = externalUuid)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocumentsByExternalUuid
    *
    * @param externalUuid  
    * @return RequestConfig
    */
    fun getDocumentsByExternalUuidRequestConfig(externalUuid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/externaluuid/{externalUuid}/all".replace("{"+"externalUuid"+"}", "$externalUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get all documents with externalUuid
    * 
    * @param externalUuid  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getDocumentsByExternalUuid1(externalUuid: kotlin.String) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = getDocumentsByExternalUuid1RequestConfig(externalUuid = externalUuid)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getDocumentsByExternalUuid1
    *
    * @param externalUuid  
    * @return RequestConfig
    */
    fun getDocumentsByExternalUuid1RequestConfig(externalUuid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/externaluuid/{externalUuid}/all".replace("{"+"externalUuid"+"}", "$externalUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List documents found By type, By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param documentTypeCode  
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentByTypeHCPartyMessageSecretFKeys(documentTypeCode: kotlin.String, hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = listDocumentByTypeHCPartyMessageSecretFKeysRequestConfig(documentTypeCode = documentTypeCode, hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listDocumentByTypeHCPartyMessageSecretFKeys
    *
    * @param documentTypeCode  
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun listDocumentByTypeHCPartyMessageSecretFKeysRequestConfig(documentTypeCode: kotlin.String, hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("documentTypeCode", listOf(documentTypeCode.toString()))
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/byTypeHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List documents found By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentsByHCPartyAndPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = listDocumentsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listDocumentsByHCPartyAndPatientForeignKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun listDocumentsByHCPartyAndPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/document/byHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List documents found By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentsByHCPartyPatientForeignKeys(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = listDocumentsByHCPartyPatientForeignKeysRequestConfig(hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listDocumentsByHCPartyPatientForeignKeys
    *
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun listDocumentsByHCPartyPatientForeignKeysRequestConfig(hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/byHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List documents found By type, By Healthcare Party and secret foreign keys.
    * Keys must be delimited by coma
    * @param documentTypeCode  
    * @param hcPartyId  
    * @param secretFKeys  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listDocumentsByTypeHCPartyMessageSecretFKeys(documentTypeCode: kotlin.String, hcPartyId: kotlin.String, secretFKeys: kotlin.String) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = listDocumentsByTypeHCPartyMessageSecretFKeysRequestConfig(documentTypeCode = documentTypeCode, hcPartyId = hcPartyId, secretFKeys = secretFKeys)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listDocumentsByTypeHCPartyMessageSecretFKeys
    *
    * @param documentTypeCode  
    * @param hcPartyId  
    * @param secretFKeys  
    * @return RequestConfig
    */
    fun listDocumentsByTypeHCPartyMessageSecretFKeysRequestConfig(documentTypeCode: kotlin.String, hcPartyId: kotlin.String, secretFKeys: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("documentTypeCode", listOf(documentTypeCode.toString()))
                put("hcPartyId", listOf(hcPartyId.toString()))
                put("secretFKeys", listOf(secretFKeys.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/byTypeHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List documents with no delegation
    * Keys must be delimited by coma
    * @param limit  (optional)
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listWithoutDelegation(limit: kotlin.Int?) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = listWithoutDelegationRequestConfig(limit = limit)

        return request<Unit, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listWithoutDelegation
    *
    * @param limit  (optional)
    * @return RequestConfig
    */
    fun listWithoutDelegationRequestConfig(limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/document/woDelegation",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Updates a document
    * 
    * @param documentDto  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocument(documentDto: DocumentDto) : DocumentDto?  {
        val localVariableConfig = modifyDocumentRequestConfig(documentDto = documentDto)

        return request<DocumentDto, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyDocument
    *
    * @param documentDto  
    * @return RequestConfig
    */
    fun modifyDocumentRequestConfig(documentDto: DocumentDto) : RequestConfig<DocumentDto> {
        val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Updates a document
    * 
    * @param documentDto  
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocument1(documentDto: DocumentDto) : DocumentDto?  {
        val localVariableConfig = modifyDocument1RequestConfig(documentDto = documentDto)

        return request<DocumentDto, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyDocument1
    *
    * @param documentDto  
    * @return RequestConfig
    */
    fun modifyDocument1RequestConfig(documentDto: DocumentDto) : RequestConfig<DocumentDto> {
        val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/document",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Updates a batch of documents
    * Returns the modified documents.
    * @param documentDto  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocuments(documentDto: kotlin.collections.List<DocumentDto>) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = modifyDocumentsRequestConfig(documentDto = documentDto)

        return request<kotlin.collections.List<DocumentDto>, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyDocuments
    *
    * @param documentDto  
    * @return RequestConfig
    */
    fun modifyDocumentsRequestConfig(documentDto: kotlin.collections.List<DocumentDto>) : RequestConfig<kotlin.collections.List<DocumentDto>> {
        val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Updates a batch of documents
    * Returns the modified documents.
    * @param documentDto  
    * @return kotlin.collections.List<DocumentDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyDocuments1(documentDto: kotlin.collections.List<DocumentDto>) : kotlin.collections.List<DocumentDto>?  {
        val localVariableConfig = modifyDocuments1RequestConfig(documentDto = documentDto)

        return request<kotlin.collections.List<DocumentDto>, kotlin.collections.List<DocumentDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyDocuments1
    *
    * @param documentDto  
    * @return RequestConfig
    */
    fun modifyDocuments1RequestConfig(documentDto: kotlin.collections.List<DocumentDto>) : RequestConfig<kotlin.collections.List<DocumentDto>> {
        val localVariableBody = documentDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/document/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document&#39;s attachment
    * 
    * @param documentId  
    * @param requestBody  
    * @param enckeys  (optional)
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentAttachment(documentId: kotlin.String, requestBody: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : DocumentDto?  {
        val localVariableConfig = setDocumentAttachmentRequestConfig(documentId = documentId, requestBody = requestBody, enckeys = enckeys)

        return request<kotlin.collections.List<kotlin.ByteArray>, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setDocumentAttachment
    *
    * @param documentId  
    * @param requestBody  
    * @param enckeys  (optional)
    * @return RequestConfig
    */
    fun setDocumentAttachmentRequestConfig(documentId: kotlin.String, requestBody: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : RequestConfig<kotlin.collections.List<kotlin.ByteArray>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/{documentId}/attachment".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document&#39;s attachment
    * 
    * @param documentId  
    * @param body  
    * @param enckeys  (optional)
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentAttachment1(documentId: kotlin.String, body: kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>, enckeys: kotlin.String?) : DocumentDto?  {
        val localVariableConfig = setDocumentAttachment1RequestConfig(documentId = documentId, body = body, enckeys = enckeys)

        return request<kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setDocumentAttachment1
    *
    * @param documentId  
    * @param body  
    * @param enckeys  (optional)
    * @return RequestConfig
    */
    fun setDocumentAttachment1RequestConfig(documentId: kotlin.String, body: kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>, enckeys: kotlin.String?) : RequestConfig<kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/document/{documentId}/attachment".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document&#39;s attachment
    * 
    * @param documentId  
    * @param attachment  
    * @param enckeys  (optional)
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentAttachmentMulti(documentId: kotlin.String, attachment: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : DocumentDto?  {
        val localVariableConfig = setDocumentAttachmentMultiRequestConfig(documentId = documentId, attachment = attachment, enckeys = enckeys)

        return request<Map<String, Any?>, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setDocumentAttachmentMulti
    *
    * @param documentId  
    * @param attachment  
    * @param enckeys  (optional)
    * @return RequestConfig
    */
    fun setDocumentAttachmentMultiRequestConfig(documentId: kotlin.String, attachment: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : RequestConfig<Map<String, Any?>> {
        val localVariableBody = mapOf("attachment" to attachment)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/{documentId}/attachment/multipart".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document&#39;s attachment
    * 
    * @param documentId  
    * @param attachment  
    * @param enckeys  (optional)
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentAttachmentMulti1(documentId: kotlin.String, attachment: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : DocumentDto?  {
        val localVariableConfig = setDocumentAttachmentMulti1RequestConfig(documentId = documentId, attachment = attachment, enckeys = enckeys)

        return request<Map<String, Any?>, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setDocumentAttachmentMulti1
    *
    * @param documentId  
    * @param attachment  
    * @param enckeys  (optional)
    * @return RequestConfig
    */
    fun setDocumentAttachmentMulti1RequestConfig(documentId: kotlin.String, attachment: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : RequestConfig<Map<String, Any?>> {
        val localVariableBody = mapOf("attachment" to attachment)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/document/{documentId}/attachment/multipart".replace("{"+"documentId"+"}", "$documentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update delegations in healthElements.
    * Keys must be delimited by coma
    * @param icureStubDto  
    * @return kotlin.collections.List<IcureStubDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentsDelegations(icureStubDto: kotlin.collections.List<IcureStubDto>) : kotlin.collections.List<IcureStubDto>?  {
        val localVariableConfig = setDocumentsDelegationsRequestConfig(icureStubDto = icureStubDto)

        return request<kotlin.collections.List<IcureStubDto>, kotlin.collections.List<IcureStubDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setDocumentsDelegations
    *
    * @param icureStubDto  
    * @return RequestConfig
    */
    fun setDocumentsDelegationsRequestConfig(icureStubDto: kotlin.collections.List<IcureStubDto>) : RequestConfig<kotlin.collections.List<IcureStubDto>> {
        val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/document/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Update delegations in healthElements.
    * Keys must be delimited by coma
    * @param icureStubDto  
    * @return kotlin.collections.List<IcureStubDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setDocumentsDelegations1(icureStubDto: kotlin.collections.List<IcureStubDto>) : kotlin.collections.List<IcureStubDto>?  {
        val localVariableConfig = setDocumentsDelegations1RequestConfig(icureStubDto = icureStubDto)

        return request<kotlin.collections.List<IcureStubDto>, kotlin.collections.List<IcureStubDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setDocumentsDelegations1
    *
    * @param icureStubDto  
    * @return RequestConfig
    */
    fun setDocumentsDelegations1RequestConfig(icureStubDto: kotlin.collections.List<IcureStubDto>) : RequestConfig<kotlin.collections.List<IcureStubDto>> {
        val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/document/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document&#39;s attachment
    * 
    * @param documentId  
    * @param requestBody  
    * @param enckeys  (optional)
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setSafeDocumentAttachment(documentId: kotlin.String, requestBody: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : DocumentDto?  {
        val localVariableConfig = setSafeDocumentAttachmentRequestConfig(documentId = documentId, requestBody = requestBody, enckeys = enckeys)

        return request<kotlin.collections.List<kotlin.ByteArray>, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setSafeDocumentAttachment
    *
    * @param documentId  
    * @param requestBody  
    * @param enckeys  (optional)
    * @return RequestConfig
    */
    fun setSafeDocumentAttachmentRequestConfig(documentId: kotlin.String, requestBody: kotlin.collections.List<kotlin.ByteArray>, enckeys: kotlin.String?) : RequestConfig<kotlin.collections.List<kotlin.ByteArray>> {
        val localVariableBody = requestBody
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("documentId", listOf(documentId.toString()))
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/document/attachment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Creates a document&#39;s attachment
    * 
    * @param documentId  
    * @param body  
    * @param enckeys  (optional)
    * @return DocumentDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setSafeDocumentAttachment1(documentId: kotlin.String, body: kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>, enckeys: kotlin.String?) : DocumentDto?  {
        val localVariableConfig = setSafeDocumentAttachment1RequestConfig(documentId = documentId, body = body, enckeys = enckeys)

        return request<kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>, DocumentDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation setSafeDocumentAttachment1
    *
    * @param documentId  
    * @param body  
    * @param enckeys  (optional)
    * @return RequestConfig
    */
    fun setSafeDocumentAttachment1RequestConfig(documentId: kotlin.String, body: kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>, enckeys: kotlin.String?) : RequestConfig<kotlinx.coroutines.flow.Flow<java.nio.ByteBuffer>> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("documentId", listOf(documentId.toString()))
                if (enckeys != null) {
                    put("enckeys", listOf(enckeys.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/document/attachment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
