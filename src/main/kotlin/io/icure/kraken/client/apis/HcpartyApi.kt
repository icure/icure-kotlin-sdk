/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.HealthcarePartyDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListHealthcarePartyDto
import io.icure.kraken.client.models.PublicKeyDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class HcpartyApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
    * Create a healthcare party
    * One of Name or Last name+First name, Nihii, and Public key are required.
    * @param healthcarePartyDto  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createHealthcareParty(healthcarePartyDto: HealthcarePartyDto) : HealthcarePartyDto  {
        val localVariableConfig = createHealthcarePartyRequestConfig(healthcarePartyDto = healthcarePartyDto)

        return request<HealthcarePartyDto, HealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createHealthcareParty
    *
    * @param healthcarePartyDto  
    * @return RequestConfig
    */
    fun createHealthcarePartyRequestConfig(healthcarePartyDto: HealthcarePartyDto) : RequestConfig<HealthcarePartyDto> {
        val localVariableBody = healthcarePartyDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/hcparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a healthcare party
    * One of Name or Last name+First name, Nihii, and Public key are required.
    * @param groupId  
    * @param healthcarePartyDto  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createHealthcarePartyInGroup(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto) : HealthcarePartyDto  {
        val localVariableConfig = createHealthcarePartyInGroupRequestConfig(groupId = groupId, healthcarePartyDto = healthcarePartyDto)

        return request<HealthcarePartyDto, HealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createHealthcarePartyInGroup
    *
    * @param groupId  
    * @param healthcarePartyDto  
    * @return RequestConfig
    */
    fun createHealthcarePartyInGroupRequestConfig(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto) : RequestConfig<HealthcarePartyDto> {
        val localVariableBody = healthcarePartyDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/hcparty/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a healthcare party
    * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
    * @param healthcarePartyIds  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteHealthcareParties(healthcarePartyIds: kotlin.String) : kotlin.collections.List<DocIdentifier>  {
        val localVariableConfig = deleteHealthcarePartiesRequestConfig(healthcarePartyIds = healthcarePartyIds)

        return request<Unit, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteHealthcareParties
    *
    * @param healthcarePartyIds  
    * @return RequestConfig
    */
    fun deleteHealthcarePartiesRequestConfig(healthcarePartyIds: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/hcparty/{healthcarePartyIds}".replace("{"+"healthcarePartyIds"+"}", "$healthcarePartyIds"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a healthcare party
    * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
    * @param groupId  
    * @param healthcarePartyIds  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteHealthcarePartiesInGroup(groupId: kotlin.String, healthcarePartyIds: kotlin.String) : kotlin.collections.List<DocIdentifier>  {
        val localVariableConfig = deleteHealthcarePartiesInGroupRequestConfig(groupId = groupId, healthcarePartyIds = healthcarePartyIds)

        return request<Unit, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteHealthcarePartiesInGroup
    *
    * @param groupId  
    * @param healthcarePartyIds  
    * @return RequestConfig
    */
    fun deleteHealthcarePartiesInGroupRequestConfig(groupId: kotlin.String, healthcarePartyIds: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/hcparty/inGroup/{groupId}/{healthcarePartyIds}".replace("{"+"groupId"+"}", "$groupId").replace("{"+"healthcarePartyIds"+"}", "$healthcarePartyIds"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Find healthcare parties by name with(out) pagination
    * Returns a list of healthcare parties.
    * @param name The Last name search value (optional)
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByName(name: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findByNameRequestConfig(name = name, startKey = startKey, startDocumentId = startDocumentId, limit = limit, desc = desc)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByName
    *
    * @param name The Last name search value (optional)
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return RequestConfig
    */
    fun findByNameRequestConfig(name: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/byName",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Find healthcare parties by name with(out) pagination
    * Returns a list of healthcare parties.
    * @param type The type of the HCP (persphysician) 
    * @param spec The speciality of the HCP 
    * @param firstCode The first postCode for the HCP 
    * @param lastCode The last postCode for the HCP 
    * @param limit Number of rows (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findBySpecialityAndPostCode(type: kotlin.String, spec: kotlin.String, firstCode: kotlin.String, lastCode: kotlin.String, limit: kotlin.Int?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findBySpecialityAndPostCodeRequestConfig(type = type, spec = spec, firstCode = firstCode, lastCode = lastCode, limit = limit)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findBySpecialityAndPostCode
    *
    * @param type The type of the HCP (persphysician) 
    * @param spec The speciality of the HCP 
    * @param firstCode The first postCode for the HCP 
    * @param lastCode The last postCode for the HCP 
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findBySpecialityAndPostCodeRequestConfig(type: kotlin.String, spec: kotlin.String, firstCode: kotlin.String, lastCode: kotlin.String, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/bySpecialityAndPostCode/{type}/{spec}/{firstCode}/to/{lastCode}".replace("{"+"type"+"}", "$type").replace("{"+"spec"+"}", "$spec").replace("{"+"firstCode"+"}", "$firstCode").replace("{"+"lastCode"+"}", "$lastCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Find healthcare parties by nihii or ssin with(out) pagination
    * Returns a list of healthcare parties.
    * @param searchValue  
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findBySsinOrNihii(searchValue: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findBySsinOrNihiiRequestConfig(searchValue = searchValue, startKey = startKey, startDocumentId = startDocumentId, limit = limit, desc = desc)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findBySsinOrNihii
    *
    * @param searchValue  
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return RequestConfig
    */
    fun findBySsinOrNihiiRequestConfig(searchValue: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/byNihiiOrSsin/{searchValue}".replace("{"+"searchValue"+"}", "$searchValue"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the current healthcare party if logged in.
    * General information about the current healthcare Party
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCurrentHealthcareParty() : HealthcarePartyDto  {
        val localVariableConfig = getCurrentHealthcarePartyRequestConfig()

        return request<Unit, HealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getCurrentHealthcareParty
    *
    * @return RequestConfig
    */
    fun getCurrentHealthcarePartyRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the HcParty encrypted AES keys indexed by owner
    * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
    * @param healthcarePartyId  
    * @return kotlin.collections.Map<kotlin.String, kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHcPartyKeysForDelegate(healthcarePartyId: kotlin.String) : kotlin.collections.Map<kotlin.String, kotlin.String>  {
        val localVariableConfig = getHcPartyKeysForDelegateRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, kotlin.collections.Map<kotlin.String, kotlin.String>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getHcPartyKeysForDelegate
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun getHcPartyKeysForDelegateRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/{healthcarePartyId}/keys".replace("{"+"healthcarePartyId"+"}", "$healthcarePartyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get healthcareParties by their IDs
    * General information about the healthcare Party
    * @param healthcarePartyIds  
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcareParties(healthcarePartyIds: kotlin.String) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = getHealthcarePartiesRequestConfig(healthcarePartyIds = healthcarePartyIds)

        return request<Unit, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getHealthcareParties
    *
    * @param healthcarePartyIds  
    * @return RequestConfig
    */
    fun getHealthcarePartiesRequestConfig(healthcarePartyIds: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/byIds/{healthcarePartyIds}".replace("{"+"healthcarePartyIds"+"}", "$healthcarePartyIds"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Find children of an healthcare parties
    * Return a list of children hcp.
    * @param parentId  
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcarePartiesByParentId(parentId: kotlin.String) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = getHealthcarePartiesByParentIdRequestConfig(parentId = parentId)

        return request<Unit, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getHealthcarePartiesByParentId
    *
    * @param parentId  
    * @return RequestConfig
    */
    fun getHealthcarePartiesByParentIdRequestConfig(parentId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/{parentId}/children".replace("{"+"parentId"+"}", "$parentId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get healthcareParties by their IDs
    * General information about the healthcare Party
    * @param groupId  
    * @param listOfIdsDto  (optional)
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcarePartiesInGroup(groupId: kotlin.String, listOfIdsDto: ListOfIdsDto?) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = getHealthcarePartiesInGroupRequestConfig(groupId = groupId, listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getHealthcarePartiesInGroup
    *
    * @param groupId  
    * @param listOfIdsDto  (optional)
    * @return RequestConfig
    */
    fun getHealthcarePartiesInGroupRequestConfig(groupId: kotlin.String, listOfIdsDto: ListOfIdsDto?) : RequestConfig<ListOfIdsDto> {
        val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/hcparty/inGroup/{groupId}/byIds".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a healthcareParty by his ID
    * General information about the healthcare Party
    * @param healthcarePartyId  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcareParty(healthcarePartyId: kotlin.String) : HealthcarePartyDto  {
        val localVariableConfig = getHealthcarePartyRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, HealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getHealthcareParty
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun getHealthcarePartyRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/{healthcarePartyId}".replace("{"+"healthcarePartyId"+"}", "$healthcarePartyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get public key of a healthcare party
    * Returns the public key of a healthcare party in Hex
    * @param healthcarePartyId  
    * @return PublicKeyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getPublicKey(healthcarePartyId: kotlin.String) : PublicKeyDto  {
        val localVariableConfig = getPublicKeyRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, PublicKeyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getPublicKey
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun getPublicKeyRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/{healthcarePartyId}/publicKey".replace("{"+"healthcarePartyId"+"}", "$healthcarePartyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Find healthcare parties by name with(out) pagination
    * Returns a list of healthcare parties.
    * @param name The Last name search value 
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listByName(name: kotlin.String) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = listByNameRequestConfig(name = name)

        return request<Unit, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listByName
    *
    * @param name The Last name search value 
    * @return RequestConfig
    */
    fun listByNameRequestConfig(name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty/byNameStrict/{name}".replace("{"+"name"+"}", "$name"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List healthcare parties with(out) pagination
    * Returns a list of healthcare parties.
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listHealthcareParties(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = listHealthcarePartiesRequestConfig(startKey = startKey, startDocumentId = startDocumentId, limit = limit, desc = desc)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listHealthcareParties
    *
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return RequestConfig
    */
    fun listHealthcarePartiesRequestConfig(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/hcparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a Healthcare Party.
    * No particular return value. It&#39;s just a message.
    * @param healthcarePartyDto  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyHealthcareParty(healthcarePartyDto: HealthcarePartyDto) : HealthcarePartyDto  {
        val localVariableConfig = modifyHealthcarePartyRequestConfig(healthcarePartyDto = healthcarePartyDto)

        return request<HealthcarePartyDto, HealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyHealthcareParty
    *
    * @param healthcarePartyDto  
    * @return RequestConfig
    */
    fun modifyHealthcarePartyRequestConfig(healthcarePartyDto: HealthcarePartyDto) : RequestConfig<HealthcarePartyDto> {
        val localVariableBody = healthcarePartyDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/hcparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a Healthcare Party.
    * No particular return value. It&#39;s just a message.
    * @param groupId  
    * @param healthcarePartyDto  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyHealthcarePartyInGroup(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto) : HealthcarePartyDto  {
        val localVariableConfig = modifyHealthcarePartyInGroupRequestConfig(groupId = groupId, healthcarePartyDto = healthcarePartyDto)

        return request<HealthcarePartyDto, HealthcarePartyDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyHealthcarePartyInGroup
    *
    * @param groupId  
    * @param healthcarePartyDto  
    * @return RequestConfig
    */
    fun modifyHealthcarePartyInGroupRequestConfig(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto) : RequestConfig<HealthcarePartyDto> {
        val localVariableBody = healthcarePartyDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/hcparty/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
