/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import org.taktik.icure.services.external.rest.v2.dto.embed.DelegationDto
import io.icure.kraken.client.models.DocIdentifier
import org.taktik.icure.services.external.rest.v2.dto.IcureStubDto
import org.taktik.icure.services.external.rest.v2.dto.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListHealthElementDto
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.taktik.icure.services.external.rest.v2.dto.HealthElementDto
import java.net.URLEncoder
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class HealthElementApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Create a health element with the current user
     * Returns an instance of created health element.
     * @param healthElementDto
     * @return HealthElementDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createHealthElement(healthElementDto: HealthElementDto): HealthElementDto {
        val localVariableConfig = createHealthElementRequestConfig(healthElementDto = healthElementDto)

        return request<HealthElementDto, HealthElementDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createHealthElement
     *
     * @param healthElementDto
     * @return RequestConfig
     */
    fun createHealthElementRequestConfig(healthElementDto: HealthElementDto): RequestConfig<HealthElementDto> {
        // val localVariableBody = healthElementDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = healthElementDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create a batch of healthcare elements
     * Returns the created healthcare elements.
     * @param healthElementDto
     * @return kotlin.collections.List<HealthElementDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createHealthElements(healthElementDto: List<HealthElementDto>): List<HealthElementDto> {
        val localVariableConfig = createHealthElementsRequestConfig(healthElementDto = healthElementDto)

        return request<List<HealthElementDto>, List<HealthElementDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createHealthElements
     *
     * @param healthElementDto
     * @return RequestConfig
     */
    fun createHealthElementsRequestConfig(healthElementDto: List<HealthElementDto>): RequestConfig<List<HealthElementDto>> {
        // val localVariableBody = healthElementDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = healthElementDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete health elements.
     * Response is a set containing the ID&#39;s of deleted health elements.
     * @param listOfIdsDto
     * @return kotlin.collections.List<DocIdentifier>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteHealthElements(listOfIdsDto: ListOfIdsDto): List<DocIdentifier> {
        val localVariableConfig = deleteHealthElementsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<DocIdentifier>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteHealthElements
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun deleteHealthElementsRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Filter health elements for the current user (HcParty)
     * Returns a list of health elements along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     * @param filterChainHealthElement
     * @param startDocumentId A HealthElement document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListHealthElementDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterHealthElementsBy(
        filterChainHealthElement: io.icure.kraken.client.models.filter.chain.FilterChain<HealthElementDto>,
        startDocumentId: String?,
        limit: Int?
    ): PaginatedListHealthElementDto {
        val localVariableConfig = filterHealthElementsByRequestConfig(
            filterChainHealthElement = filterChainHealthElement,
            startDocumentId = startDocumentId,
            limit = limit
        )

        return request<io.icure.kraken.client.models.filter.chain.FilterChain<HealthElementDto>, PaginatedListHealthElementDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation filterHealthElementsBy
     *
     * @param filterChainHealthElement
     * @param startDocumentId A HealthElement document ID (optional)
     * @param limit Number of rows (optional)
     * @return RequestConfig
     */
    fun filterHealthElementsByRequestConfig(
        filterChainHealthElement: io.icure.kraken.client.models.filter.chain.FilterChain<HealthElementDto>,
        startDocumentId: String?,
        limit: Int?
    ): RequestConfig<io.icure.kraken.client.models.filter.chain.FilterChain<HealthElementDto>> {
        // val localVariableBody = filterChainHealthElement
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = filterChainHealthElement

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get a health element
     *
     * @param healthElementId
     * @return HealthElementDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthElement(healthElementId: String): HealthElementDto {
        val localVariableConfig = getHealthElementRequestConfig(healthElementId = healthElementId)

        return request<Unit, HealthElementDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getHealthElement
     *
     * @param healthElementId
     * @return RequestConfig
     */
    fun getHealthElementRequestConfig(healthElementId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/helement/{healthElementId}".replace(
                "{" + "healthElementId" + "}",
                URLEncoder.encode(healthElementId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get healthElements by batch
     * Get a list of healthElement by ids/keys.
     * @param listOfIdsDto
     * @return kotlin.collections.List<HealthElementDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthElements(listOfIdsDto: ListOfIdsDto): List<HealthElementDto> {
        val localVariableConfig = getHealthElementsRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, List<HealthElementDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getHealthElements
     *
     * @param listOfIdsDto
     * @return RequestConfig
     */
    fun getHealthElementsRequestConfig(listOfIdsDto: ListOfIdsDto): RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List health elements found By Healthcare Party and secret foreign keyelementIds.
     * Keys hast to delimited by coma
     * @param hcPartyId
     * @param secretFKeys
     * @return kotlin.collections.List<HealthElementDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listHealthElementsByHCPartyAndPatientForeignKeys(
        hcPartyId: String,
        secretFKeys: String
    ): List<HealthElementDto> {
        val localVariableConfig = listHealthElementsByHCPartyAndPatientForeignKeysRequestConfig(
            hcPartyId = hcPartyId,
            secretFKeys = secretFKeys
        )

        return request<Unit, List<HealthElementDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listHealthElementsByHCPartyAndPatientForeignKeys
     *
     * @param hcPartyId
     * @param secretFKeys
     * @return RequestConfig
     */
    fun listHealthElementsByHCPartyAndPatientForeignKeysRequestConfig(
        hcPartyId: String,
        secretFKeys: String
    ): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId))
                put("secretFKeys", listOf(secretFKeys))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/helement/byHcPartySecretForeignKeys",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List helement stubs found By Healthcare Party and secret foreign keys.
     * Keys must be delimited by coma
     * @param hcPartyId
     * @param secretFKeys
     * @return kotlin.collections.List<IcureStubDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listHealthElementsDelegationsStubsByHCPartyAndPatientForeignKeys(
        hcPartyId: String,
        secretFKeys: String
    ): List<IcureStubDto> {
        val localVariableConfig = listHealthElementsDelegationsStubsByHCPartyAndPatientForeignKeysRequestConfig(
            hcPartyId = hcPartyId,
            secretFKeys = secretFKeys
        )

        return request<Unit, List<IcureStubDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation listHealthElementsDelegationsStubsByHCPartyAndPatientForeignKeys
     *
     * @param hcPartyId
     * @param secretFKeys
     * @return RequestConfig
     */
    fun listHealthElementsDelegationsStubsByHCPartyAndPatientForeignKeysRequestConfig(
        hcPartyId: String,
        secretFKeys: String
    ): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                put("hcPartyId", listOf(hcPartyId))
                put("secretFKeys", listOf(secretFKeys))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/helement/byHcPartySecretForeignKeys/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get ids of health element matching the provided filter for the current user (HcParty)
     *
     * @param abstractFilterDtoHealthElement
     * @return kotlin.collections.List<kotlin.String>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchHealthElementsBy(abstractFilterDtoHealthElement: io.icure.kraken.client.models.filter.AbstractFilterDto<HealthElementDto>): List<String> {
        val localVariableConfig =
            matchHealthElementsByRequestConfig(abstractFilterDtoHealthElement = abstractFilterDtoHealthElement)

        return request<io.icure.kraken.client.models.filter.AbstractFilterDto<HealthElementDto>, List<String>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation matchHealthElementsBy
     *
     * @param abstractFilterDtoHealthElement
     * @return RequestConfig
     */
    fun matchHealthElementsByRequestConfig(abstractFilterDtoHealthElement: io.icure.kraken.client.models.filter.AbstractFilterDto<HealthElementDto>): RequestConfig<io.icure.kraken.client.models.filter.AbstractFilterDto<HealthElementDto>> {
        // val localVariableBody = abstractFilterDtoHealthElement
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = abstractFilterDtoHealthElement

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/match",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Modify a health element
     * Returns the modified health element.
     * @param healthElementDto
     * @return HealthElementDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyHealthElement(healthElementDto: HealthElementDto): HealthElementDto {
        val localVariableConfig = modifyHealthElementRequestConfig(healthElementDto = healthElementDto)

        return request<HealthElementDto, HealthElementDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyHealthElement
     *
     * @param healthElementDto
     * @return RequestConfig
     */
    fun modifyHealthElementRequestConfig(healthElementDto: HealthElementDto): RequestConfig<HealthElementDto> {
        // val localVariableBody = healthElementDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = healthElementDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/helement",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Modify a batch of health elements
     * Returns the modified health elements.
     * @param healthElementDto
     * @return kotlin.collections.List<HealthElementDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyHealthElements(healthElementDto: List<HealthElementDto>): List<HealthElementDto> {
        val localVariableConfig = modifyHealthElementsRequestConfig(healthElementDto = healthElementDto)

        return request<List<HealthElementDto>, List<HealthElementDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyHealthElements
     *
     * @param healthElementDto
     * @return RequestConfig
     */
    fun modifyHealthElementsRequestConfig(healthElementDto: List<HealthElementDto>): RequestConfig<List<HealthElementDto>> {
        // val localVariableBody = healthElementDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = healthElementDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/helement/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delegates a health element to a healthcare party
     * It delegates a health element to a healthcare party (By current healthcare party). Returns the element with new delegations.
     * @param healthElementId
     * @param delegationDto
     * @return HealthElementDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun newHealthElementDelegations(
        healthElementId: String,
        delegationDto: List<DelegationDto>
    ): HealthElementDto {
        val localVariableConfig =
            newHealthElementDelegationsRequestConfig(healthElementId = healthElementId, delegationDto = delegationDto)

        return request<List<DelegationDto>, HealthElementDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation newHealthElementDelegations
     *
     * @param healthElementId
     * @param delegationDto
     * @return RequestConfig
     */
    fun newHealthElementDelegationsRequestConfig(
        healthElementId: String,
        delegationDto: List<DelegationDto>
    ): RequestConfig<List<DelegationDto>> {
        // val localVariableBody = delegationDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = delegationDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/{healthElementId}/delegate".replace(
                "{" + "healthElementId" + "}",
                URLEncoder.encode(healthElementId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Update delegations in healthElements.
     * Keys must be delimited by coma
     * @param icureStubDto
     * @return kotlin.collections.List<HealthElementDto>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun setHealthElementsDelegations(icureStubDto: List<IcureStubDto>): List<HealthElementDto> {
        val localVariableConfig = setHealthElementsDelegationsRequestConfig(icureStubDto = icureStubDto)

        return request<List<IcureStubDto>, List<HealthElementDto>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation setHealthElementsDelegations
     *
     * @param icureStubDto
     * @return RequestConfig
     */
    fun setHealthElementsDelegationsRequestConfig(icureStubDto: List<IcureStubDto>): RequestConfig<List<IcureStubDto>> {
        // val localVariableBody = icureStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = icureStubDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/helement/delegations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
