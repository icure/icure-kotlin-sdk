/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*

import io.icure.kraken.client.models.DocIdentifier

import io.icure.kraken.client.models.HealthcarePartyDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListHealthcarePartyDto
import io.icure.kraken.client.models.PublicKeyDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import kotlinx.coroutines.flow.flowOf
import java.nio.ByteBuffer
import java.util.*
import javax.inject.Named
import kotlinx.coroutines.flow.Flow
import java.net.URLEncoder

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class HealthcarePartyApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
    * Create a healthcare party
    * One of Name or Last name+First name, Nihii, and Public key are required.
    * @param healthcarePartyDto  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createHealthcareParty(healthcarePartyDto: HealthcarePartyDto) : HealthcarePartyDto  {
        val localVariableConfig = createHealthcarePartyRequestConfig(healthcarePartyDto = healthcarePartyDto)

        return request<HealthcarePartyDto, HealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation createHealthcareParty
    *
    * @param healthcarePartyDto  
    * @return RequestConfig
    */
    fun createHealthcarePartyRequestConfig(healthcarePartyDto: HealthcarePartyDto) : RequestConfig<HealthcarePartyDto> {
        // val localVariableBody = healthcarePartyDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = healthcarePartyDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/hcparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Delete healthcare parties
    * Deleting healthcareParties. Response is an array containing the id of deleted healthcare parties.
    * @param listOfIdsDto  
    * @return kotlin.collections.List<DocIdentifier>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteHealthcareParties(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<DocIdentifier>  {
        val localVariableConfig = deleteHealthcarePartiesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<DocIdentifier>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation deleteHealthcareParties
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun deleteHealthcarePartiesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/hcparty/delete/batch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Filter healthcare parties for the current user (HcParty)
    * Returns a list of healthcare party along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
    * @param filterChainHealthcareParty  
    * @param startDocumentId A HealthcareParty document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterHealthPartiesBy(filterChainHealthcareParty: io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.HealthcarePartyDto>, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = filterHealthPartiesByRequestConfig(filterChainHealthcareParty = filterChainHealthcareParty, startDocumentId = startDocumentId, limit = limit)

        return request<io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.HealthcarePartyDto>, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation filterHealthPartiesBy
    *
    * @param filterChainHealthcareParty  
    * @param startDocumentId A HealthcareParty document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun filterHealthPartiesByRequestConfig(filterChainHealthcareParty: io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.HealthcarePartyDto>, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.HealthcarePartyDto>> {
        // val localVariableBody = filterChainHealthcareParty
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = filterChainHealthcareParty

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/hcparty/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * List healthcare parties with(out) pagination
    * Returns a list of healthcare parties.
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findHealthcarePartiesBy(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findHealthcarePartiesByRequestConfig(startKey = startKey, startDocumentId = startDocumentId, limit = limit, desc = desc)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findHealthcarePartiesBy
    *
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return RequestConfig
    */
    fun findHealthcarePartiesByRequestConfig(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Find healthcare parties by name with(out) pagination
    * Returns a list of healthcare parties.
    * @param name The Last name search value (optional)
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findHealthcarePartiesByName(name: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findHealthcarePartiesByNameRequestConfig(name = name, startKey = startKey, startDocumentId = startDocumentId, limit = limit, desc = desc)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findHealthcarePartiesByName
    *
    * @param name The Last name search value (optional)
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return RequestConfig
    */
    fun findHealthcarePartiesByNameRequestConfig(name: kotlin.String?, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/byName",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Find healthcare parties by name with(out) pagination
    * Returns a list of healthcare parties.
    * @param type The type of the HCP (persphysician) 
    * @param spec The speciality of the HCP 
    * @param firstCode The first postCode for the HCP 
    * @param lastCode The last postCode for the HCP 
    * @param limit Number of rows (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findHealthcarePartiesBySpecialityAndPostCode(type: kotlin.String, spec: kotlin.String, firstCode: kotlin.String, lastCode: kotlin.String, limit: kotlin.Int?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findHealthcarePartiesBySpecialityAndPostCodeRequestConfig(type = type, spec = spec, firstCode = firstCode, lastCode = lastCode, limit = limit)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findHealthcarePartiesBySpecialityAndPostCode
    *
    * @param type The type of the HCP (persphysician) 
    * @param spec The speciality of the HCP 
    * @param firstCode The first postCode for the HCP 
    * @param lastCode The last postCode for the HCP 
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun findHealthcarePartiesBySpecialityAndPostCodeRequestConfig(type: kotlin.String, spec: kotlin.String, firstCode: kotlin.String, lastCode: kotlin.String, limit: kotlin.Int?) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/bySpecialityAndPostCode/{type}/{spec}/{firstCode}/to/{lastCode}".replace("{"+"type"+"}", "${URLEncoder.encode(type.toString(), Charsets.UTF_8)}").replace("{"+"spec"+"}", "${URLEncoder.encode(spec.toString(), Charsets.UTF_8)}").replace("{"+"firstCode"+"}", "${URLEncoder.encode(firstCode.toString(), Charsets.UTF_8)}").replace("{"+"lastCode"+"}", "${URLEncoder.encode(lastCode.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Find healthcare parties by nihii or ssin with(out) pagination
    * Returns a list of healthcare parties.
    * @param searchValue  
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return PaginatedListHealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findHealthcarePartiesBySsinOrNihii(searchValue: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : PaginatedListHealthcarePartyDto  {
        val localVariableConfig = findHealthcarePartiesBySsinOrNihiiRequestConfig(searchValue = searchValue, startKey = startKey, startDocumentId = startDocumentId, limit = limit, desc = desc)

        return request<Unit, PaginatedListHealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation findHealthcarePartiesBySsinOrNihii
    *
    * @param searchValue  
    * @param startKey A healthcare party Last name (optional)
    * @param startDocumentId A healthcare party document ID (optional)
    * @param limit Number of rows (optional)
    * @param desc Descending (optional)
    * @return RequestConfig
    */
    fun findHealthcarePartiesBySsinOrNihiiRequestConfig(searchValue: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?, desc: kotlin.Boolean?) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (desc != null) {
                    put("desc", listOf(desc.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/byNihiiOrSsin/{searchValue}".replace("{"+"searchValue"+"}", "${URLEncoder.encode(searchValue.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get the current healthcare party if logged in.
    * General information about the current healthcare Party
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCurrentHealthcareParty() : HealthcarePartyDto  {
        val localVariableConfig = getCurrentHealthcarePartyRequestConfig()

        return request<Unit, HealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getCurrentHealthcareParty
    *
    * @return RequestConfig
    */
    fun getCurrentHealthcarePartyRequestConfig() : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get the HcParty encrypted AES keys indexed by owner
    * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
    * @param healthcarePartyId  
    * @return kotlin.collections.Map<kotlin.String, kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHcPartyKeysForDelegate(healthcarePartyId: kotlin.String) : kotlin.collections.Map<kotlin.String, kotlin.String>  {
        val localVariableConfig = getHcPartyKeysForDelegateRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, kotlin.collections.Map<kotlin.String, kotlin.String>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getHcPartyKeysForDelegate
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun getHcPartyKeysForDelegateRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/byKeys/{healthcarePartyId}".replace("{"+"healthcarePartyId"+"}", "${URLEncoder.encode(healthcarePartyId.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get healthcareParties by their IDs
    * General information about the healthcare Party
    * @param listOfIdsDto  
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcareParties(listOfIdsDto: ListOfIdsDto) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = getHealthcarePartiesRequestConfig(listOfIdsDto = listOfIdsDto)

        return request<ListOfIdsDto, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getHealthcareParties
    *
    * @param listOfIdsDto  
    * @return RequestConfig
    */
    fun getHealthcarePartiesRequestConfig(listOfIdsDto: ListOfIdsDto) : RequestConfig<ListOfIdsDto> {
        // val localVariableBody = listOfIdsDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = listOfIdsDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/hcparty/byIds",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get a healthcareParty by his ID
    * General information about the healthcare Party
    * @param healthcarePartyId  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getHealthcareParty(healthcarePartyId: kotlin.String) : HealthcarePartyDto  {
        val localVariableConfig = getHealthcarePartyRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, HealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getHealthcareParty
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun getHealthcarePartyRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/{healthcarePartyId}".replace("{"+"healthcarePartyId"+"}", "${URLEncoder.encode(healthcarePartyId.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get public key of a healthcare party
    * Returns the public key of a healthcare party in Hex
    * @param healthcarePartyId  
    * @return PublicKeyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getPublicKey(healthcarePartyId: kotlin.String) : PublicKeyDto  {
        val localVariableConfig = getPublicKeyRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, PublicKeyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation getPublicKey
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun getPublicKeyRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/{healthcarePartyId}/publicKey".replace("{"+"healthcarePartyId"+"}", "${URLEncoder.encode(healthcarePartyId.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Find healthcare parties by name with(out) pagination
    * Returns a list of healthcare parties.
    * @param name The Last name search value 
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listHealthcarePartiesByName(name: kotlin.String) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = listHealthcarePartiesByNameRequestConfig(name = name)

        return request<Unit, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listHealthcarePartiesByName
    *
    * @param name The Last name search value 
    * @return RequestConfig
    */
    fun listHealthcarePartiesByNameRequestConfig(name: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/byNameStrict/{name}".replace("{"+"name"+"}", "${URLEncoder.encode(name.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Find children of an healthcare parties
    * Return a list of children hcp.
    * @param parentId  
    * @return kotlin.collections.List<HealthcarePartyDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listHealthcarePartiesByParentId(parentId: kotlin.String) : kotlin.collections.List<HealthcarePartyDto>  {
        val localVariableConfig = listHealthcarePartiesByParentIdRequestConfig(parentId = parentId)

        return request<Unit, kotlin.collections.List<HealthcarePartyDto>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation listHealthcarePartiesByParentId
    *
    * @param parentId  
    * @return RequestConfig
    */
    fun listHealthcarePartiesByParentIdRequestConfig(parentId: kotlin.String) : RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/hcparty/{parentId}/children".replace("{"+"parentId"+"}", "${URLEncoder.encode(parentId.toString(), Charsets.UTF_8)}"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Get ids of healthcare party matching the provided filter for the current user (HcParty) 
    * 
    * @param abstractFilterDtoHealthcareParty  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun matchHealthcarePartiesBy(abstractFilterDtoHealthcareParty: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.HealthcarePartyDto>) : kotlin.collections.List<kotlin.String>  {
        val localVariableConfig = matchHealthcarePartiesByRequestConfig(abstractFilterDtoHealthcareParty = abstractFilterDtoHealthcareParty)

        return request<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.HealthcarePartyDto>, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation matchHealthcarePartiesBy
    *
    * @param abstractFilterDtoHealthcareParty  
    * @return RequestConfig
    */
    fun matchHealthcarePartiesByRequestConfig(abstractFilterDtoHealthcareParty: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.HealthcarePartyDto>) : RequestConfig<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.HealthcarePartyDto>> {
        // val localVariableBody = abstractFilterDtoHealthcareParty
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = abstractFilterDtoHealthcareParty

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/hcparty/match",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

    /**
    * Modify a Healthcare Party.
    * No particular return value. It&#39;s just a message.
    * @param healthcarePartyDto  
    * @return HealthcarePartyDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyHealthcareParty(healthcarePartyDto: HealthcarePartyDto) : HealthcarePartyDto  {
        val localVariableConfig = modifyHealthcarePartyRequestConfig(healthcarePartyDto = healthcarePartyDto)

        return request<HealthcarePartyDto, HealthcarePartyDto>(
            localVariableConfig
        )!!
    }
    /**
    * To obtain the request config of the operation modifyHealthcareParty
    *
    * @param healthcarePartyDto  
    * @return RequestConfig
    */
    fun modifyHealthcarePartyRequestConfig(healthcarePartyDto: HealthcarePartyDto) : RequestConfig<HealthcarePartyDto> {
        // val localVariableBody = healthcarePartyDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = healthcarePartyDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/hcparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody        )
    }

}
