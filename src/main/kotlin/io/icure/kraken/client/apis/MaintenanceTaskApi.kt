/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.infrastructure.*
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.PaginatedListMaintenanceTaskDto
import io.icure.kraken.client.security.AuthProvider
import io.icure.kraken.client.security.NoAuthProvider
import kotlinx.coroutines.ExperimentalCoroutinesApi
import org.taktik.icure.services.external.rest.v2.dto.MaintenanceTaskDto
import java.net.URLEncoder
import java.util.*
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class MaintenanceTaskApi(
    basePath: String = defaultBasePath,
    webClient: WebClient = NettyWebClient(),
    authProvider: AuthProvider = NoAuthProvider()
) : ApiClient(basePath, webClient, authProvider) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
     * Creates a maintenanceTask
     *
     * @param maintenanceTaskDto
     * @return MaintenanceTaskDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createMaintenanceTask(maintenanceTaskDto: MaintenanceTaskDto): MaintenanceTaskDto {
        val localVariableConfig = createMaintenanceTaskRequestConfig(maintenanceTaskDto = maintenanceTaskDto)

        return request<MaintenanceTaskDto, MaintenanceTaskDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation createMaintenanceTask
     *
     * @param maintenanceTaskDto
     * @return RequestConfig
     */
    fun createMaintenanceTaskRequestConfig(maintenanceTaskDto: MaintenanceTaskDto): RequestConfig<MaintenanceTaskDto> {
        // val localVariableBody = maintenanceTaskDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = maintenanceTaskDto

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/maintenancetask",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete maintenanceTasks
     *
     * @param maintenanceTaskIds
     * @return kotlin.collections.List<DocIdentifier>
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteMaintenanceTask(maintenanceTaskIds: String): List<DocIdentifier> {
        val localVariableConfig = deleteMaintenanceTaskRequestConfig(maintenanceTaskIds = maintenanceTaskIds)

        return request<Unit, List<DocIdentifier>>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation deleteMaintenanceTask
     *
     * @param maintenanceTaskIds
     * @return RequestConfig
     */
    fun deleteMaintenanceTaskRequestConfig(maintenanceTaskIds: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v2/maintenancetask/{maintenanceTaskIds}".replace(
                "{" + "maintenanceTaskIds" + "}",
                URLEncoder.encode(maintenanceTaskIds, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Filter maintenanceTasks for the current user (HcParty)
     * Returns a list of maintenanceTasks along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     * @param filterChainMaintenanceTask
     * @param startDocumentId A maintenanceTask document ID (optional)
     * @param limit Number of rows (optional)
     * @return PaginatedListMaintenanceTaskDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun filterMaintenanceTasksBy(
        filterChainMaintenanceTask: io.icure.kraken.client.models.filter.chain.FilterChain<MaintenanceTaskDto>,
        startDocumentId: String?,
        limit: Int?
    ): PaginatedListMaintenanceTaskDto {
        val localVariableConfig = filterMaintenanceTasksByRequestConfig(
            filterChainMaintenanceTask = filterChainMaintenanceTask,
            startDocumentId = startDocumentId,
            limit = limit
        )

        return request<io.icure.kraken.client.models.filter.chain.FilterChain<MaintenanceTaskDto>, PaginatedListMaintenanceTaskDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation filterMaintenanceTasksBy
     *
     * @param filterChainMaintenanceTask
     * @param startDocumentId A maintenanceTask document ID (optional)
     * @param limit Number of rows (optional)
     * @return RequestConfig
     */
    fun filterMaintenanceTasksByRequestConfig(
        filterChainMaintenanceTask: io.icure.kraken.client.models.filter.chain.FilterChain<MaintenanceTaskDto>,
        startDocumentId: String?,
        limit: Int?
    ): RequestConfig<io.icure.kraken.client.models.filter.chain.FilterChain<MaintenanceTaskDto>> {
        // val localVariableBody = filterChainMaintenanceTask
        val localVariableQuery: MultiValueMap = mutableMapOf<String, List<String>>()
            .apply {
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = filterChainMaintenanceTask

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/maintenancetask/filter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Gets a maintenanceTask
     *
     * @param maintenanceTaskId
     * @return MaintenanceTaskDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getMaintenanceTask(maintenanceTaskId: String): MaintenanceTaskDto {
        val localVariableConfig = getMaintenanceTaskRequestConfig(maintenanceTaskId = maintenanceTaskId)

        return request<Unit, MaintenanceTaskDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation getMaintenanceTask
     *
     * @param maintenanceTaskId
     * @return RequestConfig
     */
    fun getMaintenanceTaskRequestConfig(maintenanceTaskId: String): RequestConfig<Unit> {
        // val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = null

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/maintenancetask/{maintenanceTaskId}".replace(
                "{" + "maintenanceTaskId" + "}",
                URLEncoder.encode(maintenanceTaskId, Charsets.UTF_8)
            ),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Updates a maintenanceTask
     *
     * @param maintenanceTaskDto
     * @return MaintenanceTaskDto
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyMaintenanceTask(maintenanceTaskDto: MaintenanceTaskDto): MaintenanceTaskDto {
        val localVariableConfig = modifyMaintenanceTaskRequestConfig(maintenanceTaskDto = maintenanceTaskDto)

        return request<MaintenanceTaskDto, MaintenanceTaskDto>(
            localVariableConfig
        )!!
    }

    /**
     * To obtain the request config of the operation modifyMaintenanceTask
     *
     * @param maintenanceTaskDto
     * @return RequestConfig
     */
    fun modifyMaintenanceTaskRequestConfig(maintenanceTaskDto: MaintenanceTaskDto): RequestConfig<MaintenanceTaskDto> {
        // val localVariableBody = maintenanceTaskDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/json")
        localVariableHeaders["Accept"] = "*/*"
        val localVariableBody = maintenanceTaskDto

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/maintenancetask",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
