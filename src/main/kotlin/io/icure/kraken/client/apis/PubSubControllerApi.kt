/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class PubSubControllerApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub1(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub1RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub1
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub1RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub10(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub10RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub10
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub10RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param msg  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub11(topic: kotlin.String, msg: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = pub11RequestConfig(topic = topic, msg = msg, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub11
    *
    * @param topic  
    * @param msg  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun pub11RequestConfig(topic: kotlin.String, msg: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("msg", listOf(msg.toString()))
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub12(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub12RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub12
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub12RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub13(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub13RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub13
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub13RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.OPTIONS,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub14(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub14RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub14
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub14RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub2(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub2RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub2
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub2RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub3(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub3RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub3
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub3RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param msg  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub4(topic: kotlin.String, msg: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = pub4RequestConfig(topic = topic, msg = msg, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub4
    *
    * @param topic  
    * @param msg  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun pub4RequestConfig(topic: kotlin.String, msg: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("msg", listOf(msg.toString()))
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub5(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub5RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub5
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub5RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub6(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub6RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub6
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub6RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.OPTIONS,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub7(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub7RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub7
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub7RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/ws/v2/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub8(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub8RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub8
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub8RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pub9(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : kotlin.Any?  {
        val localVariableConfig = pub9RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME, body = body)

        return request<kotlin.String, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation pub9
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @param body  (optional)
    * @return RequestConfig
    */
    fun pub9RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: , body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/ws/pubsub/{topic}/pub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub1(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub1RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub1
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub1RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub10(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub10RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub10
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub10RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub11(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub11RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub11
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub11RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub12(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub12RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub12
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub12RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub13(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub13RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub13
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub13RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.OPTIONS,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub14(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub14RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub14
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub14RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub2(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub2RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub2
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub2RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub3(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub3RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub3
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub3RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub4(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub4RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub4
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub4RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub5(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub5RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub5
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub5RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub6(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub6RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub6
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub6RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.OPTIONS,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub7(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub7RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub7
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub7RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/ws/v2/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub8(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub8RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub8
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub8RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun sub9(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : kotlin.Any?  {
        val localVariableConfig = sub9RequestConfig(topic = topic, UNKNOWN_PARAMETER_NAME = UNKNOWN_PARAMETER_NAME)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation sub9
    *
    * @param topic  
    * @param UNKNOWN_PARAMETER_NAME  
    * @return RequestConfig
    */
    fun sub9RequestConfig(topic: kotlin.String, UNKNOWN_PARAMETER_NAME: ) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                put("operation", listOf(UNKNOWN_PARAMETER_NAME.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/ws/pubsub/{topic}/sub".replace("{"+"topic"+"}", "$topic"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
