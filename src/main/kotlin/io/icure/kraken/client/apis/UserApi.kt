/**
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.apis

import io.icure.asyncjacksonhttpclient.net.web.WebClient
import io.icure.asyncjacksonhttpclient.netty.NettyWebClient
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.EmailTemplateDto
import io.icure.kraken.client.models.PaginatedListUserDto
import io.icure.kraken.client.models.PropertyStubDto
import io.icure.kraken.client.models.UserDto
import io.icure.kraken.client.models.UserGroupDto

import kotlinx.coroutines.ExperimentalCoroutinesApi

import io.icure.kraken.client.infrastructure.ApiClient
import io.icure.kraken.client.infrastructure.ClientException
import io.icure.kraken.client.infrastructure.ServerException
import io.icure.kraken.client.infrastructure.MultiValueMap
import io.icure.kraken.client.infrastructure.RequestConfig
import io.icure.kraken.client.infrastructure.RequestMethod
import javax.inject.Named

@Named
@ExperimentalStdlibApi
@ExperimentalCoroutinesApi
class UserApi(basePath: kotlin.String = defaultBasePath, webClient: WebClient = NettyWebClient(), authHeader: String? = null) : ApiClient(basePath, webClient, authHeader) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("io.icure.kraken.client.baseUrl", "https://kraken.icure.dev")
        }
    }

    /**
    * Assign a healthcare party ID to current user
    * UserDto gets returned.
    * @param healthcarePartyId  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun assignHealthcareParty(healthcarePartyId: kotlin.String) : UserDto?  {
        val localVariableConfig = assignHealthcarePartyRequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation assignHealthcareParty
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun assignHealthcarePartyRequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/user/current/hcparty/{healthcarePartyId}".replace("{"+"healthcarePartyId"+"}", "$healthcarePartyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Assign a healthcare party ID to current user
    * UserDto gets returned.
    * @param healthcarePartyId  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun assignHealthcareParty1(healthcarePartyId: kotlin.String) : UserDto?  {
        val localVariableConfig = assignHealthcareParty1RequestConfig(healthcarePartyId = healthcarePartyId)

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation assignHealthcareParty1
    *
    * @param healthcarePartyId  
    * @return RequestConfig
    */
    fun assignHealthcareParty1RequestConfig(healthcarePartyId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/user/current/hcparty/{healthcarePartyId}".replace("{"+"healthcarePartyId"+"}", "$healthcarePartyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param password  
    * @return kotlin.Boolean
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun checkPassword(password: kotlin.String) : kotlin.Boolean?  {
        val localVariableConfig = checkPasswordRequestConfig(password = password)

        return request<Unit, kotlin.Boolean>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation checkPassword
    *
    * @param password  
    * @return RequestConfig
    */
    fun checkPasswordRequestConfig(password: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        password.apply { localVariableHeaders["password"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/checkPassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param password  
    * @return kotlin.Boolean
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun checkPassword1(password: kotlin.String) : kotlin.Boolean?  {
        val localVariableConfig = checkPassword1RequestConfig(password = password)

        return request<Unit, kotlin.Boolean>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation checkPassword1
    *
    * @param password  
    * @return RequestConfig
    */
    fun checkPassword1RequestConfig(password: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        password.apply { localVariableHeaders["password"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/checkPassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a user
    * Create a user. HealthcareParty ID should be set. Email or Login have to be set. If login hasn&#39;t been set, Email will be used for Login instead.
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createUser(userDto: UserDto) : UserDto?  {
        val localVariableConfig = createUserRequestConfig(userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createUser
    *
    * @param userDto  
    * @return RequestConfig
    */
    fun createUserRequestConfig(userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a user
    * Create a user. HealthcareParty ID should be set. Email or Login have to be set. If login hasn&#39;t been set, Email will be used for Login instead.
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createUser1(userDto: UserDto) : UserDto?  {
        val localVariableConfig = createUser1RequestConfig(userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createUser1
    *
    * @param userDto  
    * @return RequestConfig
    */
    fun createUser1RequestConfig(userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a user
    * Create a user. HealthcareParty ID should be set. Email has to be set and the Login has to be null. On server-side, Email will be used for Login.
    * @param groupId  
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createUserInGroup(groupId: kotlin.String, userDto: UserDto) : UserDto?  {
        val localVariableConfig = createUserInGroupRequestConfig(groupId = groupId, userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createUserInGroup
    *
    * @param groupId  
    * @param userDto  
    * @return RequestConfig
    */
    fun createUserInGroupRequestConfig(groupId: kotlin.String, userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/user/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create a user
    * Create a user. HealthcareParty ID should be set. Email has to be set and the Login has to be null. On server-side, Email will be used for Login.
    * @param groupId  
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createUserInGroup1(groupId: kotlin.String, userDto: UserDto) : UserDto?  {
        val localVariableConfig = createUserInGroup1RequestConfig(groupId = groupId, userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation createUserInGroup1
    *
    * @param groupId  
    * @param userDto  
    * @return RequestConfig
    */
    fun createUserInGroup1RequestConfig(groupId: kotlin.String, userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/user/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a User based on his/her ID.
    * Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.
    * @param userId  
    * @return DocIdentifier
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteUser(userId: kotlin.String) : DocIdentifier?  {
        val localVariableConfig = deleteUserRequestConfig(userId = userId)

        return request<Unit, DocIdentifier>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteUser
    *
    * @param userId  
    * @return RequestConfig
    */
    fun deleteUserRequestConfig(userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v2/user/{userId}".replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a User based on his/her ID.
    * Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.
    * @param userId  
    * @return DocIdentifier
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteUser1(userId: kotlin.String) : DocIdentifier?  {
        val localVariableConfig = deleteUser1RequestConfig(userId = userId)

        return request<Unit, DocIdentifier>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteUser1
    *
    * @param userId  
    * @return RequestConfig
    */
    fun deleteUser1RequestConfig(userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/user/{userId}".replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a User based on his/her ID.
    * Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.
    * @param groupId  
    * @param userId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteUserInGroup(groupId: kotlin.String, userId: kotlin.String) : kotlin.Any?  {
        val localVariableConfig = deleteUserInGroupRequestConfig(groupId = groupId, userId = userId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteUserInGroup
    *
    * @param groupId  
    * @param userId  
    * @return RequestConfig
    */
    fun deleteUserInGroupRequestConfig(groupId: kotlin.String, userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v2/user/inGroup/{groupId}/{userId}".replace("{"+"groupId"+"}", "$groupId").replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Delete a User based on his/her ID.
    * Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.
    * @param groupId  
    * @param userId  
    * @return kotlin.Any
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun deleteUserInGroup1(groupId: kotlin.String, userId: kotlin.String) : kotlin.Any?  {
        val localVariableConfig = deleteUserInGroup1RequestConfig(groupId = groupId, userId = userId)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deleteUserInGroup1
    *
    * @param groupId  
    * @param userId  
    * @return RequestConfig
    */
    fun deleteUserInGroup1RequestConfig(groupId: kotlin.String, userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/rest/v1/user/inGroup/{groupId}/{userId}".replace("{"+"groupId"+"}", "$groupId").replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param password  
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun encodePassword(password: kotlin.String) : kotlin.String?  {
        val localVariableConfig = encodePasswordRequestConfig(password = password)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation encodePassword
    *
    * @param password  
    * @return RequestConfig
    */
    fun encodePasswordRequestConfig(password: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        password.apply { localVariableHeaders["password"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/encodePassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param password  
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun encodePassword1(password: kotlin.String) : kotlin.String?  {
        val localVariableConfig = encodePassword1RequestConfig(password = password)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation encodePassword1
    *
    * @param password  
    * @return RequestConfig
    */
    fun encodePassword1RequestConfig(password: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        password.apply { localVariableHeaders["password"] = this.toString() }

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/encodePassword",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the list of users by healthcare party id
    * 
    * @param id  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByHcpartyId(id: kotlin.String) : kotlin.collections.List<kotlin.String>?  {
        val localVariableConfig = findByHcpartyIdRequestConfig(id = id)

        return request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByHcpartyId
    *
    * @param id  
    * @return RequestConfig
    */
    fun findByHcpartyIdRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/byHealthcarePartyId/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the list of users by healthcare party id
    * 
    * @param id  
    * @return kotlin.collections.List<kotlin.String>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun findByHcpartyId1(id: kotlin.String) : kotlin.collections.List<kotlin.String>?  {
        val localVariableConfig = findByHcpartyId1RequestConfig(id = id)

        return request<Unit, kotlin.collections.List<kotlin.String>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation findByHcpartyId1
    *
    * @param id  
    * @return RequestConfig
    */
    fun findByHcpartyId1RequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/byHealthcarePartyId/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Send a forgotten email message to an user
    * 
    * @param email the email of the user  
    * @param emailTemplateDto  
    * @return kotlin.Boolean
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun forgottenPassword(email: kotlin.String, emailTemplateDto: EmailTemplateDto) : kotlin.Boolean?  {
        val localVariableConfig = forgottenPasswordRequestConfig(email = email, emailTemplateDto = emailTemplateDto)

        return request<EmailTemplateDto, kotlin.Boolean>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation forgottenPassword
    *
    * @param email the email of the user  
    * @param emailTemplateDto  
    * @return RequestConfig
    */
    fun forgottenPasswordRequestConfig(email: kotlin.String, emailTemplateDto: EmailTemplateDto) : RequestConfig<EmailTemplateDto> {
        val localVariableBody = emailTemplateDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v2/user/forgottenPassword/{email}".replace("{"+"email"+"}", "$email"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Send a forgotten email message to an user
    * 
    * @param email the email of the user  
    * @param emailTemplateDto  
    * @return kotlin.Boolean
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun forgottenPassword1(email: kotlin.String, emailTemplateDto: EmailTemplateDto) : kotlin.Boolean?  {
        val localVariableConfig = forgottenPassword1RequestConfig(email = email, emailTemplateDto = emailTemplateDto)

        return request<EmailTemplateDto, kotlin.Boolean>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation forgottenPassword1
    *
    * @param email the email of the user  
    * @param emailTemplateDto  
    * @return RequestConfig
    */
    fun forgottenPassword1RequestConfig(email: kotlin.String, emailTemplateDto: EmailTemplateDto) : RequestConfig<EmailTemplateDto> {
        val localVariableBody = emailTemplateDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/rest/v1/user/forgottenPassword/{email}".replace("{"+"email"+"}", "$email"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Currently logged-in user session.
    * Get current user.
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCurrentSession() : kotlin.String?  {
        val localVariableConfig = getCurrentSessionRequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getCurrentSession
    *
    * @return RequestConfig
    */
    fun getCurrentSessionRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/session",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get Currently logged-in user session.
    * Get current user.
    * @return kotlin.String
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCurrentSession1() : kotlin.String?  {
        val localVariableConfig = getCurrentSession1RequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getCurrentSession1
    *
    * @return RequestConfig
    */
    fun getCurrentSession1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/session",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get presently logged-in user.
    * Get current user.
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCurrentUser() : UserDto?  {
        val localVariableConfig = getCurrentUserRequestConfig()

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getCurrentUser
    *
    * @return RequestConfig
    */
    fun getCurrentUserRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get presently logged-in user.
    * Get current user.
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getCurrentUser1() : UserDto?  {
        val localVariableConfig = getCurrentUser1RequestConfig()

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getCurrentUser1
    *
    * @return RequestConfig
    */
    fun getCurrentUser1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get presently logged-in user.
    * Get current user.
    * @return kotlin.collections.List<UserGroupDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getMatchingUsers() : kotlin.collections.List<UserGroupDto>?  {
        val localVariableConfig = getMatchingUsersRequestConfig()

        return request<Unit, kotlin.collections.List<UserGroupDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getMatchingUsers
    *
    * @return RequestConfig
    */
    fun getMatchingUsersRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/matches",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get presently logged-in user.
    * Get current user.
    * @return kotlin.collections.List<UserGroupDto>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getMatchingUsers1() : kotlin.collections.List<UserGroupDto>?  {
        val localVariableConfig = getMatchingUsers1RequestConfig()

        return request<Unit, kotlin.collections.List<UserGroupDto>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getMatchingUsers1
    *
    * @return RequestConfig
    */
    fun getMatchingUsers1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/matches",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a user by his ID
    * General information about the user
    * @param userId  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getUser(userId: kotlin.String) : UserDto?  {
        val localVariableConfig = getUserRequestConfig(userId = userId)

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getUser
    *
    * @param userId  
    * @return RequestConfig
    */
    fun getUserRequestConfig(userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/{userId}".replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a user by his ID
    * General information about the user
    * @param userId  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getUser1(userId: kotlin.String) : UserDto?  {
        val localVariableConfig = getUser1RequestConfig(userId = userId)

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getUser1
    *
    * @param userId  
    * @return RequestConfig
    */
    fun getUser1RequestConfig(userId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/{userId}".replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a user by his Email/Login
    * General information about the user
    * @param email  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getUserByEmail(email: kotlin.String) : UserDto?  {
        val localVariableConfig = getUserByEmailRequestConfig(email = email)

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getUserByEmail
    *
    * @param email  
    * @return RequestConfig
    */
    fun getUserByEmailRequestConfig(email: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/byEmail/{email}".replace("{"+"email"+"}", "$email"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get a user by his Email/Login
    * General information about the user
    * @param email  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun getUserByEmail1(email: kotlin.String) : UserDto?  {
        val localVariableConfig = getUserByEmail1RequestConfig(email = email)

        return request<Unit, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getUserByEmail1
    *
    * @param email  
    * @return RequestConfig
    */
    fun getUserByEmail1RequestConfig(email: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/byEmail/{email}".replace("{"+"email"+"}", "$email"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List users with(out) pagination
    * Returns a list of users.
    * @param startKey An user email (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListUserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listUsers(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListUserDto?  {
        val localVariableConfig = listUsersRequestConfig(startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListUserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUsers
    *
    * @param startKey An user email (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun listUsersRequestConfig(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List users with(out) pagination
    * Returns a list of users.
    * @param startKey An user email (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListUserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listUsersBy(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListUserDto?  {
        val localVariableConfig = listUsersByRequestConfig(startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListUserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUsersBy
    *
    * @param startKey An user email (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun listUsersByRequestConfig(startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List users with(out) pagination
    * Returns a list of users.
    * @param groupId  
    * @param startKey An user login (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListUserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listUsersInGroup(groupId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListUserDto?  {
        val localVariableConfig = listUsersInGroupRequestConfig(groupId = groupId, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListUserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUsersInGroup
    *
    * @param groupId  
    * @param startKey An user login (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun listUsersInGroupRequestConfig(groupId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v2/user/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * List users with(out) pagination
    * Returns a list of users.
    * @param groupId  
    * @param startKey An user login (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return PaginatedListUserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun listUsersInGroup1(groupId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : PaginatedListUserDto?  {
        val localVariableConfig = listUsersInGroup1RequestConfig(groupId = groupId, startKey = startKey, startDocumentId = startDocumentId, limit = limit)

        return request<Unit, PaginatedListUserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation listUsersInGroup1
    *
    * @param groupId  
    * @param startKey An user login (optional)
    * @param startDocumentId An user document ID (optional)
    * @param limit Number of rows (optional)
    * @return RequestConfig
    */
    fun listUsersInGroup1RequestConfig(groupId: kotlin.String, startKey: kotlin.String?, startDocumentId: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (startKey != null) {
                    put("startKey", listOf(startKey.toString()))
                }
                if (startDocumentId != null) {
                    put("startDocumentId", listOf(startDocumentId.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/rest/v1/user/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a User property
    * Modify a User properties based on his/her ID. The return value is the modified user.
    * @param userId  
    * @param propertyStubDto  (optional)
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyProperties(userId: kotlin.String, propertyStubDto: kotlin.collections.List<PropertyStubDto>?) : UserDto?  {
        val localVariableConfig = modifyPropertiesRequestConfig(userId = userId, propertyStubDto = propertyStubDto)

        return request<kotlin.collections.List<PropertyStubDto>, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyProperties
    *
    * @param userId  
    * @param propertyStubDto  (optional)
    * @return RequestConfig
    */
    fun modifyPropertiesRequestConfig(userId: kotlin.String, propertyStubDto: kotlin.collections.List<PropertyStubDto>?) : RequestConfig<kotlin.collections.List<PropertyStubDto>> {
        val localVariableBody = propertyStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/user/{userId}/properties".replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a User property
    * Modify a User properties based on his/her ID. The return value is the modified user.
    * @param userId  
    * @param propertyStubDto  (optional)
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyProperties1(userId: kotlin.String, propertyStubDto: kotlin.collections.List<PropertyStubDto>?) : UserDto?  {
        val localVariableConfig = modifyProperties1RequestConfig(userId = userId, propertyStubDto = propertyStubDto)

        return request<kotlin.collections.List<PropertyStubDto>, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyProperties1
    *
    * @param userId  
    * @param propertyStubDto  (optional)
    * @return RequestConfig
    */
    fun modifyProperties1RequestConfig(userId: kotlin.String, propertyStubDto: kotlin.collections.List<PropertyStubDto>?) : RequestConfig<kotlin.collections.List<PropertyStubDto>> {
        val localVariableBody = propertyStubDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/user/{userId}/properties".replace("{"+"userId"+"}", "$userId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a user.
    * No particular return value. It&#39;s just a message.
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyUser(userDto: UserDto) : UserDto?  {
        val localVariableConfig = modifyUserRequestConfig(userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyUser
    *
    * @param userDto  
    * @return RequestConfig
    */
    fun modifyUserRequestConfig(userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a user.
    * No particular return value. It&#39;s just a message.
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyUser1(userDto: UserDto) : UserDto?  {
        val localVariableConfig = modifyUser1RequestConfig(userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyUser1
    *
    * @param userDto  
    * @return RequestConfig
    */
    fun modifyUser1RequestConfig(userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/user",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a user.
    * No particular return value. It&#39;s just a message.
    * @param groupId  
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyUserInGroup(groupId: kotlin.String, userDto: UserDto) : UserDto?  {
        val localVariableConfig = modifyUserInGroupRequestConfig(groupId = groupId, userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyUserInGroup
    *
    * @param groupId  
    * @param userDto  
    * @return RequestConfig
    */
    fun modifyUserInGroupRequestConfig(groupId: kotlin.String, userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v2/user/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Modify a user.
    * No particular return value. It&#39;s just a message.
    * @param groupId  
    * @param userDto  
    * @return UserDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun modifyUserInGroup1(groupId: kotlin.String, userDto: UserDto) : UserDto?  {
        val localVariableConfig = modifyUserInGroup1RequestConfig(groupId = groupId, userDto = userDto)

        return request<UserDto, UserDto>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation modifyUserInGroup1
    *
    * @param groupId  
    * @param userDto  
    * @return RequestConfig
    */
    fun modifyUserInGroup1RequestConfig(groupId: kotlin.String, userDto: UserDto) : RequestConfig<UserDto> {
        val localVariableBody = userDto
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/rest/v1/user/inGroup/{groupId}".replace("{"+"groupId"+"}", "$groupId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
