/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models

import io.icure.kraken.client.models.TelecomDto

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude


/**
 * This entity represents an Address
 *
 * @param telecoms List of other contact details available through telecom services, ex: email, phone number, fax, etc.
 * @param addressType The type of place the address represents, ex: home, office, hospital, clinic, etc. 
 * @param descr Descriptive notes about the address
 * @param street Street name
 * @param houseNumber Building / house number
 * @param postboxNumber Post / PO box number
 * @param postalCode Postal/PIN/ZIP/Area code
 * @param city Name of city in the address
 * @param state Name of state in the Address
 * @param country Name / code of country in the address
 * @param note Additional notes
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class AddressDto (

    /* List of other contact details available through telecom services, ex: email, phone number, fax, etc. */
    @field:JsonProperty("telecoms")
    val telecoms: kotlin.collections.List<TelecomDto> = listOf(),

    /* The type of place the address represents, ex: home, office, hospital, clinic, etc.  */
    @field:JsonProperty("addressType")
    val addressType: AddressDto.AddressType? = null,

    /* Descriptive notes about the address */
    @field:JsonProperty("descr")
    val descr: kotlin.String? = null,

    /* Street name */
    @field:JsonProperty("street")
    val street: kotlin.String? = null,

    /* Building / house number */
    @field:JsonProperty("houseNumber")
    val houseNumber: kotlin.String? = null,

    /* Post / PO box number */
    @field:JsonProperty("postboxNumber")
    val postboxNumber: kotlin.String? = null,

    /* Postal/PIN/ZIP/Area code */
    @field:JsonProperty("postalCode")
    val postalCode: kotlin.String? = null,

    /* Name of city in the address */
    @field:JsonProperty("city")
    val city: kotlin.String? = null,

    /* Name of state in the Address */
    @field:JsonProperty("state")
    val state: kotlin.String? = null,

    /* Name / code of country in the address */
    @field:JsonProperty("country")
    val country: kotlin.String? = null,

    /* Additional notes */
    @field:JsonProperty("note")
    val note: kotlin.String? = null,

    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */
    @field:JsonProperty("encryptedSelf")
    val encryptedSelf: kotlin.String? = null

) {

    /**
     * The type of place the address represents, ex: home, office, hospital, clinic, etc. 
     *
     * Values: home,work,vacation,hospital,clinic,hq,other,temporary,postal,diplomatic,reference,careaddress
     */
    enum class AddressType(val value: kotlin.String) {
        @JsonProperty(value = "home") home("home"),
        @JsonProperty(value = "work") work("work"),
        @JsonProperty(value = "vacation") vacation("vacation"),
        @JsonProperty(value = "hospital") hospital("hospital"),
        @JsonProperty(value = "clinic") clinic("clinic"),
        @JsonProperty(value = "hq") hq("hq"),
        @JsonProperty(value = "other") other("other"),
        @JsonProperty(value = "temporary") temporary("temporary"),
        @JsonProperty(value = "postal") postal("postal"),
        @JsonProperty(value = "diplomatic") diplomatic("diplomatic"),
        @JsonProperty(value = "reference") reference("reference"),
        @JsonProperty(value = "careaddress") careaddress("careaddress");
    }
}

