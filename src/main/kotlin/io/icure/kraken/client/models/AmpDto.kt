/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models

import io.icure.kraken.client.models.AmpComponentDto
import io.icure.kraken.client.models.AmppDto
import io.icure.kraken.client.models.CompanyDto
import io.icure.kraken.client.models.SamTextDto
import io.icure.kraken.client.models.VmpStubDto

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude


/**
 * 
 *
 * @param id 
 * @param blackTriangle 
 * @param ampps 
 * @param components 
 * @param rev 
 * @param deletionDate hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
 * @param from 
 * @param to 
 * @param code 
 * @param vmp 
 * @param officialName 
 * @param status 
 * @param name 
 * @param medicineType 
 * @param company 
 * @param abbreviatedName 
 * @param proprietarySuffix 
 * @param prescriptionName 
 */

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class AmpDto (

    @field:JsonProperty("id")
    val id: kotlin.String,

    @field:JsonProperty("blackTriangle")
    val blackTriangle: kotlin.Boolean,

    @field:JsonProperty("ampps")
    val ampps: kotlin.collections.List<AmppDto> = emptyList(),

    @field:JsonProperty("components")
    val components: kotlin.collections.List<AmpComponentDto> = emptyList(),

    @field:JsonProperty("rev")
    val rev: kotlin.String? = null,

    /* hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called. */
    @field:JsonProperty("deletionDate")
    val deletionDate: kotlin.Long? = null,

    @field:JsonProperty("from")
    val from: kotlin.Long? = null,

    @field:JsonProperty("to")
    val to: kotlin.Long? = null,

    @field:JsonProperty("code")
    val code: kotlin.String? = null,

    @field:JsonProperty("vmp")
    val vmp: VmpStubDto? = null,

    @field:JsonProperty("officialName")
    val officialName: kotlin.String? = null,

    @field:JsonProperty("status")
    val status: AmpDto.Status? = null,

    @field:JsonProperty("name")
    val name: SamTextDto? = null,

    @field:JsonProperty("medicineType")
    val medicineType: AmpDto.MedicineType? = null,

    @field:JsonProperty("company")
    val company: CompanyDto? = null,

    @field:JsonProperty("abbreviatedName")
    val abbreviatedName: SamTextDto? = null,

    @field:JsonProperty("proprietarySuffix")
    val proprietarySuffix: SamTextDto? = null,

    @field:JsonProperty("prescriptionName")
    val prescriptionName: SamTextDto? = null

) {

    /**
     * 
     *
     * Values: aUTHORIZED,sUSPENDED,rEVOKED
     */
    enum class Status(val value: kotlin.String) {
        @JsonProperty(value = "AUTHORIZED") aUTHORIZED("AUTHORIZED"),
        @JsonProperty(value = "SUSPENDED") sUSPENDED("SUSPENDED"),
        @JsonProperty(value = "REVOKED") rEVOKED("REVOKED");
    }
    /**
     * 
     *
     * Values: aLLOPATHIC,hOMEOPATHIC
     */
    enum class MedicineType(val value: kotlin.String) {
        @JsonProperty(value = "ALLOPATHIC") aLLOPATHIC("ALLOPATHIC"),
        @JsonProperty(value = "HOMEOPATHIC") hOMEOPATHIC("HOMEOPATHIC");
    }
}

