
/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude

/**
 *
 *
 * @param codeNomenclature
 * @param units
 * @param reimbursedAmount
 * @param patientFee
 * @param doctorSupplement
 * @param dateCode
 * @param relatedCode
 * @param eidItem
 * @param insuranceRef
 * @param insuranceRefDate
 * @param sideCode
 * @param timeOfDay
 * @param override3rdPayerCode
 * @param gnotionNihii
 * @param derogationMaxNumber
 * @param prescriberNorm
 * @param prescriberNihii
 * @param prescriptionDate
 * @param personalInterventionCoveredByThirdPartyCode
 * @param doctorIdentificationNumber
 * @param invoiceRef
 * @param percentNorm
 */

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class InvoiceItem (

    @field:JsonProperty("codeNomenclature")
    val codeNomenclature: Long = 0,

    @field:JsonProperty("units")
    val units: Int = 0,

    @field:JsonProperty("reimbursedAmount")
    val reimbursedAmount: Long = 0,

    @field:JsonProperty("patientFee")
    val patientFee: Long = 0,

    @field:JsonProperty("doctorSupplement")
    val doctorSupplement: Long = 0,

    @field:JsonProperty("dateCode")
    val dateCode: Long? = null,

    @field:JsonProperty("relatedCode")
    val relatedCode: Long? = null,

    @field:JsonProperty("eidItem")
    val eidItem: EIDItem? = null,

    @field:JsonProperty("insuranceRef")
    val insuranceRef: String? = null,

    @field:JsonProperty("insuranceRefDate")
    val insuranceRefDate: Long? = null,

    @field:JsonProperty("sideCode")
    val sideCode: SideCode? = null,

    @field:JsonProperty("timeOfDay")
    val timeOfDay: TimeOfDay? = null,

    @field:JsonProperty("override3rdPayerCode")
    val override3rdPayerCode: Int? = null,

    @field:JsonProperty("gnotionNihii")
    val gnotionNihii: String? = null,

    @field:JsonProperty("derogationMaxNumber")
    val derogationMaxNumber: DerogationMaxNumber? = null,

    @field:JsonProperty("prescriberNorm")
    val prescriberNorm: PrescriberNorm? = null,

    @field:JsonProperty("prescriberNihii")
    val prescriberNihii: String? = null,

    @field:JsonProperty("prescriptionDate")
    val prescriptionDate: Long? = null,

    @field:JsonProperty("personalInterventionCoveredByThirdPartyCode")
    val personalInterventionCoveredByThirdPartyCode: Int? = null,

    @field:JsonProperty("doctorIdentificationNumber")
    val doctorIdentificationNumber: String? = null,

    @field:JsonProperty("invoiceRef")
    val invoiceRef: String? = null,

    @field:JsonProperty("percentNorm")
    val percentNorm: PercentNorm? = null

) {

    /**
     *
     *
     * Values: none,left,right
     */
    enum class SideCode(val value: String) {
        @JsonProperty(value = "None") none("None"),
        @JsonProperty(value = "Left") left("Left"),
        @JsonProperty(value = "Right") right("Right");
    }
    /**
     *
     *
     * Values: other,night,weekend,bankholiday,urgent
     */
    enum class TimeOfDay(val value: String) {
        @JsonProperty(value = "Other") other("Other"),
        @JsonProperty(value = "Night") night("Night"),
        @JsonProperty(value = "Weekend") weekend("Weekend"),
        @JsonProperty(value = "Bankholiday") bankholiday("Bankholiday"),
        @JsonProperty(value = "Urgent") urgent("Urgent");
    }
    /**
     *
     *
     * Values: other,derogationMaxNumber,otherPrescription,secondPrestationOfDay,thirdAndNextPrestationOfDay
     */
    enum class DerogationMaxNumber(val value: String) {
        @JsonProperty(value = "Other") other("Other"),
        @JsonProperty(value = "DerogationMaxNumber") derogationMaxNumber("DerogationMaxNumber"),
        @JsonProperty(value = "OtherPrescription") otherPrescription("OtherPrescription"),
        @JsonProperty(value = "SecondPrestationOfDay") secondPrestationOfDay("SecondPrestationOfDay"),
        @JsonProperty(value = "ThirdAndNextPrestationOfDay") thirdAndNextPrestationOfDay("ThirdAndNextPrestationOfDay");
    }
    /**
     *
     *
     * Values: none,onePrescriber,selfPrescriber,addedCode,manyPrescribers
     */
    enum class PrescriberNorm(val value: String) {
        @JsonProperty(value = "None") none("None"),
        @JsonProperty(value = "OnePrescriber") onePrescriber("OnePrescriber"),
        @JsonProperty(value = "SelfPrescriber") selfPrescriber("SelfPrescriber"),
        @JsonProperty(value = "AddedCode") addedCode("AddedCode"),
        @JsonProperty(value = "ManyPrescribers") manyPrescribers("ManyPrescribers");
    }
    /**
     *
     *
     * Values: none,surgicalAid1,surgicalAid2,reducedFee,ah1n1,halfPriceSecondAct,invoiceException,forInformation
     */
    enum class PercentNorm(val value: String) {
        @JsonProperty(value = "None") none("None"),
        @JsonProperty(value = "SurgicalAid1") surgicalAid1("SurgicalAid1"),
        @JsonProperty(value = "SurgicalAid2") surgicalAid2("SurgicalAid2"),
        @JsonProperty(value = "ReducedFee") reducedFee("ReducedFee"),
        @JsonProperty(value = "Ah1n1") ah1n1("Ah1n1"),
        @JsonProperty(value = "HalfPriceSecondAct") halfPriceSecondAct("HalfPriceSecondAct"),
        @JsonProperty(value = "InvoiceException") invoiceException("InvoiceException"),
        @JsonProperty(value = "ForInformation") forInformation("ForInformation");
    }
}
