/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure. This version is obsolete, please use v2.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models


import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
import com.github.pozo.KotlinBuilder


/**
 * A relationship between this patient and another person.
 *
 * @param type Type of relationship.
 * @param status Status of the relationship.
 * @param partnerId UUID of the contact person or patient in this relationship.
 * @param meToOtherRelationshipDescription 
 * @param otherToMeRelationshipDescription 
 */

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@KotlinBuilder
data class PartnershipDto (

    /* Type of relationship. */
    @field:JsonProperty("type")
    val type: PartnershipDto.Type? = null,

    /* Status of the relationship. */
    @field:JsonProperty("status")
    val status: PartnershipDto.Status? = null,

    /* UUID of the contact person or patient in this relationship. */
    @field:JsonProperty("partnerId")
    val partnerId: kotlin.String? = null,

    @field:JsonProperty("meToOtherRelationshipDescription")
    @Deprecated(message = "This property is deprecated.")
    val meToOtherRelationshipDescription: kotlin.String? = null,

    @field:JsonProperty("otherToMeRelationshipDescription")
    @Deprecated(message = "This property is deprecated.")
    val otherToMeRelationshipDescription: kotlin.String? = null

) {

    /**
     * Type of relationship.
     *
     * Values: primaryContact,primaryContactFor,family,friend,counselor,contact,brother,brotherinlaw,child,daughter,employer,father,grandchild,grandparent,husband,lawyer,mother,neighbour,notary,partner,sister,sisterinlaw,son,spouse,stepdaughter,stepfather,stepmother,stepson,tutor,nextofkin,federalagency,insurancecompany,stateagency,other,unknown
     */
    enum class Type(val value: kotlin.String) {
        @JsonProperty(value = "primary_contact") primaryContact("primary_contact"),
        @JsonProperty(value = "primary_contact_for") primaryContactFor("primary_contact_for"),
        @JsonProperty(value = "family") family("family"),
        @JsonProperty(value = "friend") friend("friend"),
        @JsonProperty(value = "counselor") counselor("counselor"),
        @JsonProperty(value = "contact") contact("contact"),
        @JsonProperty(value = "brother") brother("brother"),
        @JsonProperty(value = "brotherinlaw") brotherinlaw("brotherinlaw"),
        @JsonProperty(value = "child") child("child"),
        @JsonProperty(value = "daughter") daughter("daughter"),
        @JsonProperty(value = "employer") employer("employer"),
        @JsonProperty(value = "father") father("father"),
        @JsonProperty(value = "grandchild") grandchild("grandchild"),
        @JsonProperty(value = "grandparent") grandparent("grandparent"),
        @JsonProperty(value = "husband") husband("husband"),
        @JsonProperty(value = "lawyer") lawyer("lawyer"),
        @JsonProperty(value = "mother") mother("mother"),
        @JsonProperty(value = "neighbour") neighbour("neighbour"),
        @JsonProperty(value = "notary") notary("notary"),
        @JsonProperty(value = "partner") partner("partner"),
        @JsonProperty(value = "sister") sister("sister"),
        @JsonProperty(value = "sisterinlaw") sisterinlaw("sisterinlaw"),
        @JsonProperty(value = "son") son("son"),
        @JsonProperty(value = "spouse") spouse("spouse"),
        @JsonProperty(value = "stepdaughter") stepdaughter("stepdaughter"),
        @JsonProperty(value = "stepfather") stepfather("stepfather"),
        @JsonProperty(value = "stepmother") stepmother("stepmother"),
        @JsonProperty(value = "stepson") stepson("stepson"),
        @JsonProperty(value = "tutor") tutor("tutor"),
        @JsonProperty(value = "nextofkin") nextofkin("nextofkin"),
        @JsonProperty(value = "federalagency") federalagency("federalagency"),
        @JsonProperty(value = "insurancecompany") insurancecompany("insurancecompany"),
        @JsonProperty(value = "stateagency") stateagency("stateagency"),
        @JsonProperty(value = "other") other("other"),
        @JsonProperty(value = "unknown") unknown("unknown");
    }
    /**
     * Status of the relationship.
     *
     * Values: active,complicated,past
     */
    enum class Status(val value: kotlin.String) {
        @JsonProperty(value = "active") active("active"),
        @JsonProperty(value = "complicated") complicated("complicated"),
        @JsonProperty(value = "past") past("past");
    }
}

