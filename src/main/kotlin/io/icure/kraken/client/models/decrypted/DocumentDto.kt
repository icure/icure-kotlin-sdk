/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models.decrypted

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.annotation.JsonProperty
import org.taktik.icure.services.external.rest.v2.dto.base.CodeStubDto
import org.taktik.icure.services.external.rest.v2.dto.embed.DataAttachmentDto
import org.taktik.icure.services.external.rest.v2.dto.embed.DelegationDto
import org.taktik.icure.services.external.rest.v2.dto.embed.DeletedAttachmentDto
import org.taktik.icure.services.external.rest.v2.dto.embed.SecurityMetadataDto

/**
 * This entity is a root level object. It represents a Document. It is serialized in JSON and saved in the underlying CouchDB database.
 *
 * @param id The Id of the document. We encourage using either a v4 UUID or a HL7 Id.
 * @param tags A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
 * @param codes A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
 * @param otherUtis Extra Uniform Type Identifiers
 * @param secretForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.
 * @param cryptedForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.
 * @param delegations When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well
 * @param encryptionKeys When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation
 * @param rev The revision of the document in the database, used for conflict management / optimistic locking.
 * @param created The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param modified The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param author The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param responsible The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param medicalLocationId The id of the medical location where this entity was created.
 * @param endOfLife Soft delete (unix epoch in ms) timestamp of the object.
 * @param deletionDate hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
 * @param objectStoreReference Reference in object store
 * @param documentLocation Location of the document
 * @param documentType The type of document, ex: admission, clinical path, document report,invoice, etc.
 * @param documentStatus The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc.
 * @param externalUri When the document is stored in an external repository, this is the uri of the document in that repository
 * @param mainUti The main Uniform Type Identifier of the document (https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE)
 * @param name Name of the document
 * @param version The document version
 * @param storedICureDocumentId The ICureDocument (Form, Contact, ...) that has been used to generate the document
 * @param externalUuid A unique external id (from another external source).
 * @param propertySize Size of the document file
 * @param hash Hashed version of the document
 * @param openingContactId Id of the contact during which the document was created
 * @param attachmentId Id of attachment to this document
 * @param encryptedAttachment
 * @param decryptedAttachment
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
data class DocumentDto(

    /* The Id of the document. We encourage using either a v4 UUID or a HL7 Id. */
    @field:JsonProperty("id")
    val id: String,

    /* A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags. */
    @field:JsonProperty("tags")
    val tags: List<CodeStubDto> = emptyList(),

    /* A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes */
    @field:JsonProperty("codes")
    val codes: List<CodeStubDto> = emptyList(),

    /* Extra Uniform Type Identifiers */
    @field:JsonProperty("otherUtis")
    val otherUtis: List<String> = emptyList(),

    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space. */
    @field:JsonProperty("secretForeignKeys")
    val secretForeignKeys: List<String> = emptyList(),

    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys. */
    @field:JsonProperty("cryptedForeignKeys")
    val cryptedForeignKeys: Map<String, Set<DelegationDto>> = emptyMap(),

    /* When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well */
    @field:JsonProperty("delegations")
    val delegations: Map<String, Set<DelegationDto>> = emptyMap(),

    /* When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation */
    @field:JsonProperty("encryptionKeys")
    val encryptionKeys: Map<String, Set<DelegationDto>> = emptyMap(),

    /* The revision of the document in the database, used for conflict management / optimistic locking. */
    @field:JsonProperty("rev")
    val rev: String? = null,

    /* The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server. */
    @field:JsonProperty("created")
    val created: Long? = null,

    /* The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server. */
    @field:JsonProperty("modified")
    val modified: Long? = null,

    /* The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server. */
    @field:JsonProperty("author")
    val author: String? = null,

    /* The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server. */
    @field:JsonProperty("responsible")
    val responsible: String? = null,

    /* The id of the medical location where this entity was created. */
    @field:JsonProperty("medicalLocationId")
    val medicalLocationId: String? = null,

    /* Soft delete (unix epoch in ms) timestamp of the object. */
    @field:JsonProperty("endOfLife")
    val endOfLife: Long? = null,

    /* hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called. */
    @field:JsonProperty("deletionDate")
    val deletionDate: Long? = null,

    /* Reference in object store */
    @field:JsonProperty("objectStoreReference")
    val objectStoreReference: String? = null,

    /* Location of the document */
    @field:JsonProperty("documentLocation")
    val documentLocation: DocumentLocation? = null,

    /* The type of document, ex: admission, clinical path, document report,invoice, etc. */
    @field:JsonProperty("documentType")
    val documentType: DocumentType? = null,

    /* The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc. */
    @field:JsonProperty("documentStatus")
    val documentStatus: DocumentStatus? = null,

    /* When the document is stored in an external repository, this is the uri of the document in that repository */
    @field:JsonProperty("externalUri")
    val externalUri: String? = null,

    /* The main Uniform Type Identifier of the document (https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html#//apple_ref/doc/uid/TP40001319-CH202-CHDHIJDE) */
    @field:JsonProperty("mainUti")
    val mainUti: String? = null,

    /* Name of the document */
    @field:JsonProperty("name")
    val name: String? = null,

    /* The document version */
    @field:JsonProperty("version")
    val version: String? = null,

    /* The ICureDocument (Form, Contact, ...) that has been used to generate the document */
    @field:JsonProperty("storedICureDocumentId")
    val storedICureDocumentId: String? = null,

    /* A unique external id (from another external source). */
    @field:JsonProperty("externalUuid")
    val externalUuid: String? = null,

    /* Size of the document file */
    @field:JsonProperty("size")
    val size: Long? = null,

    /* Hashed version of the document */
    @field:JsonProperty("hash")
    val hash: String? = null,

    /* Id of the contact during which the document was created */
    @field:JsonProperty("openingContactId")
    val openingContactId: String? = null,

    /* Id of attachment to this document */
    @field:JsonProperty("attachmentId")
    val attachmentId: String? = null,

    val secondaryAttachments: Map<String, DataAttachmentDto> = emptyMap(),

    val deletedAttachments: List<DeletedAttachmentDto> = emptyList(),

    @field:JsonProperty("encryptedAttachment")
    val encryptedAttachment: io.icure.kraken.client.infrastructure.ByteArrayWrapper? = null,

    @field:JsonProperty("decryptedAttachment")
    val decryptedAttachment: io.icure.kraken.client.infrastructure.ByteArrayWrapper? = null,

    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */
    @field:JsonProperty("encryptedSelf")
    val encryptedSelf: String? = null,

    @field:JsonProperty("securityMetadata")
    val securityMetadata: SecurityMetadataDto? = null

) {

    /**
     * Location of the document
     *
     * Values: annex,body
     */
    enum class DocumentLocation(val value: String) {
        @JsonProperty(value = "annex")
        annex("annex"),
        @JsonProperty(value = "body")
        body("body");
    }

    /**
     * The type of document, ex: admission, clinical path, document report,invoice, etc.
     *
     * Values: admission,alert,bvtSample,clinicalpath,clinicalsummary,contactreport,quote,invoice,death,discharge,dischargereport,ebirthBabyMedicalform,ebirthBabyNotification,ebirthMotherMedicalform,ebirthMotherNotification,ecareSafeConsultation,epidemiology,intervention,labrequest,labresult,medicaladvisoragreement,medicationschemeelement,note,notification,pharmaceuticalprescription,prescription,productdelivery,quickdischargereport,radiationexposuremonitoring,referral,report,request,result,sumehr,telemonitoring,template,templateAdmin,treatmentsuspension,vaccination
     */
    enum class DocumentType(val value: String) {
        @JsonProperty(value = "admission")
        admission("admission"),
        @JsonProperty(value = "alert")
        alert("alert"),
        @JsonProperty(value = "bvt_sample")
        bvtSample("bvt_sample"),
        @JsonProperty(value = "clinicalpath")
        clinicalpath("clinicalpath"),
        @JsonProperty(value = "clinicalsummary")
        clinicalsummary("clinicalsummary"),
        @JsonProperty(value = "contactreport")
        contactreport("contactreport"),
        @JsonProperty(value = "quote")
        quote("quote"),
        @JsonProperty(value = "invoice")
        invoice("invoice"),
        @JsonProperty(value = "death")
        death("death"),
        @JsonProperty(value = "discharge")
        discharge("discharge"),
        @JsonProperty(value = "dischargereport")
        dischargereport("dischargereport"),
        @JsonProperty(value = "ebirth_baby_medicalform")
        ebirthBabyMedicalform("ebirth_baby_medicalform"),
        @JsonProperty(value = "ebirth_baby_notification")
        ebirthBabyNotification("ebirth_baby_notification"),
        @JsonProperty(value = "ebirth_mother_medicalform")
        ebirthMotherMedicalform("ebirth_mother_medicalform"),
        @JsonProperty(value = "ebirth_mother_notification")
        ebirthMotherNotification("ebirth_mother_notification"),
        @JsonProperty(value = "ecare_safe_consultation")
        ecareSafeConsultation("ecare_safe_consultation"),
        @JsonProperty(value = "epidemiology")
        epidemiology("epidemiology"),
        @JsonProperty(value = "intervention")
        intervention("intervention"),
        @JsonProperty(value = "labrequest")
        labrequest("labrequest"),
        @JsonProperty(value = "labresult")
        labresult("labresult"),
        @JsonProperty(value = "medicaladvisoragreement")
        medicaladvisoragreement("medicaladvisoragreement"),
        @JsonProperty(value = "medicationschemeelement")
        medicationschemeelement("medicationschemeelement"),
        @JsonProperty(value = "note")
        note("note"),
        @JsonProperty(value = "notification")
        notification("notification"),
        @JsonProperty(value = "pharmaceuticalprescription")
        pharmaceuticalprescription("pharmaceuticalprescription"),
        @JsonProperty(value = "prescription")
        prescription("prescription"),
        @JsonProperty(value = "productdelivery")
        productdelivery("productdelivery"),
        @JsonProperty(value = "quickdischargereport")
        quickdischargereport("quickdischargereport"),
        @JsonProperty(value = "radiationexposuremonitoring")
        radiationexposuremonitoring("radiationexposuremonitoring"),
        @JsonProperty(value = "referral")
        referral("referral"),
        @JsonProperty(value = "report")
        report("report"),
        @JsonProperty(value = "request")
        request("request"),
        @JsonProperty(value = "result")
        result("result"),
        @JsonProperty(value = "sumehr")
        sumehr("sumehr"),
        @JsonProperty(value = "telemonitoring")
        telemonitoring("telemonitoring"),
        @JsonProperty(value = "template")
        template("template"),
        @JsonProperty(value = "template_admin")
        templateAdmin("template_admin"),
        @JsonProperty(value = "treatmentsuspension")
        treatmentsuspension("treatmentsuspension"),
        @JsonProperty(value = "vaccination")
        vaccination("vaccination");
    }

    /**
     * The status of the development of the document. Ex: Draft, finalized, reviewed, signed, etc.
     *
     * Values: draft,finalized,pendingReview,reviewed,pendingSignature,signed,canceled,sent,delivered
     */
    enum class DocumentStatus(val value: String) {
        @JsonProperty(value = "draft")
        draft("draft"),
        @JsonProperty(value = "finalized")
        finalized("finalized"),
        @JsonProperty(value = "pending_review")
        pendingReview("pending_review"),
        @JsonProperty(value = "reviewed")
        reviewed("reviewed"),
        @JsonProperty(value = "pending_signature")
        pendingSignature("pending_signature"),
        @JsonProperty(value = "signed")
        signed("signed"),
        @JsonProperty(value = "canceled")
        canceled("canceled"),
        @JsonProperty(value = "sent")
        sent("sent"),
        @JsonProperty(value = "delivered")
        delivered("delivered");
    }
}

