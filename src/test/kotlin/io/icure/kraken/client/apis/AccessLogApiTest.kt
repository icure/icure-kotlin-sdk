/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis

import io.icure.kraken.client.models.AccessLogDto
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListAccessLogDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.infrastructure.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import kotlinx.coroutines.runBlocking
import io.icure.kraken.client.infrastructure.TestUtils
import io.icure.kraken.client.infrastructure.TestUtils.Companion.basicAuth
import io.icure.kraken.client.infrastructure.differences
import kotlin.reflect.full.callSuspendBy
import kotlin.reflect.javaType



/**
 * API tests for AccessLogApi
 */
@ExperimentalStdlibApi
class AccessLogApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("AccessLogApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("AccessLogApi.json")
    }

    fun api(fileName: String) = AccessLogApi(basePath = "https://kraken.icure.dev", authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                super.setupModule(context)
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    suspend fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    val parameters = createFunction!!.parameters.mapNotNull {
                        when {
                            it.type.javaType == body!!.javaClass -> it to body
                            it.type.javaType == AccessLogApi::class.java -> it to api(credentialsFile)
                            else -> null
                        }
                    }.toMap()


                    createFunction.callSuspendBy(parameters)
                    println("created")
                }
            }
        }
    }

    
    /**
     * Creates an access log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createAccessLogTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "createAccessLog")) {
			assert(true)
			println("Endpoint createAccessLog skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createAccessLog")
        val accessLogDto: AccessLogDto = TestUtils.getParameter(fileName, "createAccessLog.accessLogDto")!!
		if (accessLogDto as? Collection<*> == null) {
			accessLogDto.also {
            if (TestUtils.isAutoRev(fileName, "createAccessLog") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<AccessLogDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = accessLogDto as? Collection<AccessLogDto> ?: emptyList<AccessLogDto>() as Collection<AccessLogDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createAccessLog") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).createAccessLog(accessLogDto)

        val testFileName = "AccessLogApi.createAccessLog"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AccessLogDto>? != null) {
                if ("AccessLogDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AccessLogDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createAccessLog", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Deletes an access log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deleteAccessLogsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "deleteAccessLogs")) {
			assert(true)
			println("Endpoint deleteAccessLogs skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteAccessLogs")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "deleteAccessLogs.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "deleteAccessLogs") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<ListOfIdsDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ListOfIdsDto> ?: emptyList<ListOfIdsDto>() as Collection<ListOfIdsDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteAccessLogs") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).deleteAccessLogs(listOfIdsDto)

        val testFileName = "AccessLogApi.deleteAccessLogs"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteAccessLogs", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Get Paginated List of Access logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findAccessLogsByTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "findAccessLogsBy")) {
			assert(true)
			println("Endpoint findAccessLogsBy skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findAccessLogsBy")
        val fromEpoch: kotlin.Long? = TestUtils.getParameter(fileName, "findAccessLogsBy.fromEpoch")
		if (fromEpoch as? Collection<*> == null) {
			fromEpoch.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = fromEpoch as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val toEpoch: kotlin.Long? = TestUtils.getParameter(fileName, "findAccessLogsBy.toEpoch")
		if (toEpoch as? Collection<*> == null) {
			toEpoch.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = toEpoch as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.Long? = TestUtils.getParameter(fileName, "findAccessLogsBy.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findAccessLogsBy.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findAccessLogsBy.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val descending: kotlin.Boolean? = TestUtils.getParameter(fileName, "findAccessLogsBy.descending")
		if (descending as? Collection<*> == null) {
			descending.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = descending as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).findAccessLogsBy(fromEpoch,toEpoch,startKey,startDocumentId,limit,descending)

        val testFileName = "AccessLogApi.findAccessLogsBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAccessLogDto>? != null) {
                if ("PaginatedListAccessLogDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAccessLogDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findAccessLogsBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Get Paginated List of Access logs by user after date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findAccessLogsByUserAfterDateTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "findAccessLogsByUserAfterDate")) {
			assert(true)
			println("Endpoint findAccessLogsByUserAfterDate skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findAccessLogsByUserAfterDate")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val accessType: kotlin.String? = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.accessType")
		if (accessType as? Collection<*> == null) {
			accessType.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = accessType as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDate: kotlin.Long? = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.startDate")
		if (startDate as? Collection<*> == null) {
			startDate.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDate as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val descending: kotlin.Boolean? = TestUtils.getParameter(fileName, "findAccessLogsByUserAfterDate.descending")
		if (descending as? Collection<*> == null) {
			descending.also {
            if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = descending as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAccessLogsByUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).findAccessLogsByUserAfterDate(userId,accessType,startDate,startKey,startDocumentId,limit,descending)

        val testFileName = "AccessLogApi.findAccessLogsByUserAfterDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAccessLogDto>? != null) {
                if ("PaginatedListAccessLogDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAccessLogDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findAccessLogsByUserAfterDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Gets an access log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getAccessLogTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getAccessLog")) {
			assert(true)
			println("Endpoint getAccessLog skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getAccessLog")
        val accessLogId: kotlin.String = TestUtils.getParameter(fileName, "getAccessLog.accessLogId")!!
		if (accessLogId as? Collection<*> == null) {
			accessLogId.also {
            if (TestUtils.isAutoRev(fileName, "getAccessLog") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = accessLogId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getAccessLog") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getAccessLog(accessLogId)

        val testFileName = "AccessLogApi.getAccessLog"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AccessLogDto>? != null) {
                if ("AccessLogDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AccessLogDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getAccessLog", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * List access logs found By Healthcare Party and secret foreign keyelementIds.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listAccessLogsByHCPartyAndPatientForeignKeysTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys")) {
			assert(true)
			println("Endpoint listAccessLogsByHCPartyAndPatientForeignKeys skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAccessLogsByHCPartyAndPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listAccessLogsByHCPartyAndPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "AccessLogApi.listAccessLogsByHCPartyAndPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AccessLogDto>? != null) {
                if ("kotlin.collections.List<AccessLogDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AccessLogDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAccessLogsByHCPartyAndPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Modifies an access log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyAccessLogTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "modifyAccessLog")) {
			assert(true)
			println("Endpoint modifyAccessLog skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyAccessLog")
        val accessLogDto: AccessLogDto = TestUtils.getParameter(fileName, "modifyAccessLog.accessLogDto")!!
		if (accessLogDto as? Collection<*> == null) {
			accessLogDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyAccessLog") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                val rev = object: TypeReference<AccessLogDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = accessLogDto as? Collection<AccessLogDto> ?: emptyList<AccessLogDto>() as Collection<AccessLogDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyAccessLog") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getAccessLog(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).modifyAccessLog(accessLogDto)

        val testFileName = "AccessLogApi.modifyAccessLog"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AccessLogDto>? != null) {
                if ("AccessLogDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AccessLogDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyAccessLog", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            val diffs = response.differences(objectFromFile)
            assertTrue(diffs.isEmpty())
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
