/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.CheckSMFPatientResult;
import io.icure.kraken.client.models.ContentDto;
import io.icure.kraken.client.models.DiaryNoteExportInfoDto;
import io.icure.kraken.client.models.ImportMapping;
import io.icure.kraken.client.models.ImportResultDto;
import io.icure.kraken.client.models.MedicationSchemeExportInfoDto;
import io.icure.kraken.client.models.SoftwareMedicalFileExportDto;
import io.icure.kraken.client.models.SumehrContentDto;
import io.icure.kraken.client.models.SumehrExportInfoDto;
import io.icure.kraken.client.models.SumehrValidityDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for BekmehrApi
 */
@ExperimentalStdlibApi
class BekmehrApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("BekmehrApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("BekmehrApi.json")
    }

    private val api = BekmehrApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Check whether patients in SMF already exists in DB
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun checkIfSMFPatientsExistsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "checkIfSMFPatientsExists")) {
			assert(true)
			println("Endpoint checkIfSMFPatientsExists skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "checkIfSMFPatientsExists")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "checkIfSMFPatientsExists.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<CheckSMFPatientResult> ?: emptyList<CheckSMFPatientResult>() as Collection<CheckSMFPatientResult>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val documentKey: kotlin.String = TestUtils.getParameter(fileName, "checkIfSMFPatientsExists.documentKey")!!
		if (documentKey as? Collection<*> == null) {
			documentKey.also {
            if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentKey as? Collection<CheckSMFPatientResult> ?: emptyList<CheckSMFPatientResult>() as Collection<CheckSMFPatientResult>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "checkIfSMFPatientsExists.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<CheckSMFPatientResult> ?: emptyList<CheckSMFPatientResult>() as Collection<CheckSMFPatientResult>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "checkIfSMFPatientsExists.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<CheckSMFPatientResult> ?: emptyList<CheckSMFPatientResult>() as Collection<CheckSMFPatientResult>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>> = TestUtils.getParameter(fileName, "checkIfSMFPatientsExists.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<CheckSMFPatientResult> ?: emptyList<CheckSMFPatientResult>() as Collection<CheckSMFPatientResult>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "checkIfSMFPatientsExists") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.checkIfSMFPatientsExists(documentId,documentKey,patientId,language,requestBody)

        val testFileName = "BekmehrApi.checkIfSMFPatientsExists"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CheckSMFPatientResult>? != null) {
                if ("kotlin.collections.List<CheckSMFPatientResult>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CheckSMFPatientResult>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("checkIfSMFPatientsExists", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr contactreport
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateContactreportExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateContactreportExport")) {
			assert(true)
			println("Endpoint generateContactreportExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateContactreportExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generateContactreportExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generateContactreportExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generateContactreportExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateContactreportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateContactreportExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generateContactreportExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateContactreportExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Generate diarynote
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateDiaryNoteTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateDiaryNote")) {
			assert(true)
			println("Endpoint generateDiaryNote skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateDiaryNote")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateDiaryNote.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateDiaryNote") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateDiaryNote") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateDiaryNote.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateDiaryNote") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateDiaryNote") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val diaryNoteExportInfoDto: DiaryNoteExportInfoDto = TestUtils.getParameter(fileName, "generateDiaryNote.diaryNoteExportInfoDto")!!
		if (diaryNoteExportInfoDto as? Collection<*> == null) {
			diaryNoteExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "generateDiaryNote") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = DiaryNoteExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = diaryNoteExportInfoDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateDiaryNote") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateDiaryNote(patientId,language,diaryNoteExportInfoDto)

        val testFileName = "BekmehrApi.generateDiaryNote"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateDiaryNote", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr labresult
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateLabresultExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateLabresultExport")) {
			assert(true)
			println("Endpoint generateLabresultExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateLabresultExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generateLabresultExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generateLabresultExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generateLabresultExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateLabresultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateLabresultExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generateLabresultExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateLabresultExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Medicationscheme export
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateMedicationSchemeExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateMedicationSchemeExport")) {
			assert(true)
			println("Endpoint generateMedicationSchemeExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateMedicationSchemeExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateMedicationSchemeExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateMedicationSchemeExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSafe: kotlin.String = TestUtils.getParameter(fileName, "generateMedicationSchemeExport.recipientSafe")!!
		if (recipientSafe as? Collection<*> == null) {
			recipientSafe.also {
            if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSafe as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.Int = TestUtils.getParameter(fileName, "generateMedicationSchemeExport.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val medicationSchemeExportInfoDto: MedicationSchemeExportInfoDto = TestUtils.getParameter(fileName, "generateMedicationSchemeExport.medicationSchemeExportInfoDto")!!
		if (medicationSchemeExportInfoDto as? Collection<*> == null) {
			medicationSchemeExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = MedicationSchemeExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = medicationSchemeExportInfoDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateMedicationSchemeExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateMedicationSchemeExport(patientId,language,recipientSafe,version,medicationSchemeExportInfoDto)

        val testFileName = "BekmehrApi.generateMedicationSchemeExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateMedicationSchemeExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr note
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateNoteExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateNoteExport")) {
			assert(true)
			println("Endpoint generateNoteExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateNoteExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generateNoteExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generateNoteExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generateNoteExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateNoteExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateNoteExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generateNoteExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateNoteExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get KMEHR Patient Info export
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generatePatientInfoExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generatePatientInfoExport")) {
			assert(true)
			println("Endpoint generatePatientInfoExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generatePatientInfoExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generatePatientInfoExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generatePatientInfoExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePatientInfoExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generatePatientInfoExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generatePatientInfoExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePatientInfoExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generatePatientInfoExport(patientId,language)

        val testFileName = "BekmehrApi.generatePatientInfoExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generatePatientInfoExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr prescription
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generatePrescriptionExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generatePrescriptionExport")) {
			assert(true)
			println("Endpoint generatePrescriptionExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generatePrescriptionExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generatePrescriptionExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generatePrescriptionExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generatePrescriptionExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generatePrescriptionExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generatePrescriptionExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generatePrescriptionExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generatePrescriptionExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateReportExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateReportExport")) {
			assert(true)
			println("Endpoint generateReportExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateReportExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generateReportExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generateReportExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generateReportExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateReportExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateReportExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generateReportExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateReportExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateRequestExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateRequestExport")) {
			assert(true)
			println("Endpoint generateRequestExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateRequestExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generateRequestExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generateRequestExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generateRequestExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateRequestExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateRequestExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generateRequestExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateRequestExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Kmehr result
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateResultExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateResultExport")) {
			assert(true)
			println("Endpoint generateResultExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateResultExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val date: kotlin.Long = TestUtils.getParameter(fileName, "generateResultExport.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientNihii: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.recipientNihii")!!
		if (recipientNihii as? Collection<*> == null) {
			recipientNihii.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientNihii as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientSsin: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.recipientSsin")!!
		if (recipientSsin as? Collection<*> == null) {
			recipientSsin.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientSsin as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientFirstName: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.recipientFirstName")!!
		if (recipientFirstName as? Collection<*> == null) {
			recipientFirstName.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientFirstName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val recipientLastName: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.recipientLastName")!!
		if (recipientLastName as? Collection<*> == null) {
			recipientLastName.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientLastName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mimeType: kotlin.String = TestUtils.getParameter(fileName, "generateResultExport.mimeType")!!
		if (mimeType as? Collection<*> == null) {
			mimeType.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mimeType as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "generateResultExport.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateResultExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateResultExport(patientId,id,date,language,recipientNihii,recipientSsin,recipientFirstName,recipientLastName,mimeType,body)

        val testFileName = "BekmehrApi.generateResultExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateResultExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get SMF (Software Medical File) export
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateSmfExportTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateSmfExport")) {
			assert(true)
			println("Endpoint generateSmfExport skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateSmfExport")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateSmfExport.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateSmfExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSmfExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateSmfExport.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateSmfExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSmfExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val softwareMedicalFileExportDto: SoftwareMedicalFileExportDto = TestUtils.getParameter(fileName, "generateSmfExport.softwareMedicalFileExportDto")!!
		if (softwareMedicalFileExportDto as? Collection<*> == null) {
			softwareMedicalFileExportDto.also {
            if (TestUtils.isAutoRev(fileName, "generateSmfExport") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SoftwareMedicalFileExportDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = softwareMedicalFileExportDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSmfExport") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateSmfExport(patientId,language,softwareMedicalFileExportDto)

        val testFileName = "BekmehrApi.generateSmfExport"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateSmfExport", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Generate sumehr
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateSumehrTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateSumehr")) {
			assert(true)
			println("Endpoint generateSumehr skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateSumehr")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateSumehr.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateSumehr.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "generateSumehr.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "generateSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateSumehr(patientId,language,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.generateSumehr"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateSumehr", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Generate sumehr
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun generateSumehrV2Test(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "generateSumehrV2")) {
			assert(true)
			println("Endpoint generateSumehrV2 skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "generateSumehrV2")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "generateSumehrV2.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "generateSumehrV2") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSumehrV2") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "generateSumehrV2.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "generateSumehrV2") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSumehrV2") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "generateSumehrV2.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "generateSumehrV2") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "generateSumehrV2") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.generateSumehrV2(patientId,language,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.generateSumehrV2"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("generateSumehrV2", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get sumehr elements
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getSumehrContentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getSumehrContent")) {
			assert(true)
			println("Endpoint getSumehrContent skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getSumehrContent")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "getSumehrContent.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrContent") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<SumehrContentDto> ?: emptyList<SumehrContentDto>() as Collection<SumehrContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrContent") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "getSumehrContent.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrContent") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<SumehrContentDto> ?: emptyList<SumehrContentDto>() as Collection<SumehrContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrContent") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getSumehrContent(patientId,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.getSumehrContent"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<SumehrContentDto>? != null) {
                if ("SumehrContentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<SumehrContentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getSumehrContent", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Check sumehr signature
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getSumehrMd5Test(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getSumehrMd5")) {
			assert(true)
			println("Endpoint getSumehrMd5 skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getSumehrMd5")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "getSumehrMd5.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrMd5") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<ContentDto> ?: emptyList<ContentDto>() as Collection<ContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrMd5") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "getSumehrMd5.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrMd5") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<ContentDto> ?: emptyList<ContentDto>() as Collection<ContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrMd5") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getSumehrMd5(patientId,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.getSumehrMd5"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContentDto>? != null) {
                if ("ContentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getSumehrMd5", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get sumehr elements
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getSumehrV2ContentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getSumehrV2Content")) {
			assert(true)
			println("Endpoint getSumehrV2Content skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getSumehrV2Content")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "getSumehrV2Content.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrV2Content") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<SumehrContentDto> ?: emptyList<SumehrContentDto>() as Collection<SumehrContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrV2Content") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "getSumehrV2Content.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrV2Content") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<SumehrContentDto> ?: emptyList<SumehrContentDto>() as Collection<SumehrContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrV2Content") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getSumehrV2Content(patientId,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.getSumehrV2Content"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<SumehrContentDto>? != null) {
                if ("SumehrContentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<SumehrContentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getSumehrV2Content", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Check sumehr signature
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getSumehrV2Md5Test(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getSumehrV2Md5")) {
			assert(true)
			println("Endpoint getSumehrV2Md5 skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getSumehrV2Md5")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "getSumehrV2Md5.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrV2Md5") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<ContentDto> ?: emptyList<ContentDto>() as Collection<ContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrV2Md5") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "getSumehrV2Md5.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "getSumehrV2Md5") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<ContentDto> ?: emptyList<ContentDto>() as Collection<ContentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getSumehrV2Md5") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getSumehrV2Md5(patientId,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.getSumehrV2Md5"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContentDto>? != null) {
                if ("ContentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getSumehrV2Md5", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Import MedicationScheme into patient(s) using existing document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun importMedicationSchemeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "importMedicationScheme")) {
			assert(true)
			println("Endpoint importMedicationScheme skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "importMedicationScheme")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "importMedicationScheme.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val documentKey: kotlin.String = TestUtils.getParameter(fileName, "importMedicationScheme.documentKey")!!
		if (documentKey as? Collection<*> == null) {
			documentKey.also {
            if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentKey as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val dryRun: kotlin.Boolean = TestUtils.getParameter(fileName, "importMedicationScheme.dryRun")!!
		if (dryRun as? Collection<*> == null) {
			dryRun.also {
            if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = dryRun as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "importMedicationScheme.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "importMedicationScheme.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>> = TestUtils.getParameter(fileName, "importMedicationScheme.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importMedicationScheme") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.importMedicationScheme(documentId,documentKey,dryRun,patientId,language,requestBody)

        val testFileName = "BekmehrApi.importMedicationScheme"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ImportResultDto>? != null) {
                if ("kotlin.collections.List<ImportResultDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ImportResultDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("importMedicationScheme", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Import SMF into patient(s) using existing document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun importSmfTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "importSmf")) {
			assert(true)
			println("Endpoint importSmf skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "importSmf")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "importSmf.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val documentKey: kotlin.String = TestUtils.getParameter(fileName, "importSmf.documentKey")!!
		if (documentKey as? Collection<*> == null) {
			documentKey.also {
            if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentKey as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "importSmf.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "importSmf.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val dryRun: kotlin.Boolean = TestUtils.getParameter(fileName, "importSmf.dryRun")!!
		if (dryRun as? Collection<*> == null) {
			dryRun.also {
            if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = dryRun as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>> = TestUtils.getParameter(fileName, "importSmf.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSmf") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.importSmf(documentId,documentKey,patientId,language,dryRun,requestBody)

        val testFileName = "BekmehrApi.importSmf"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ImportResultDto>? != null) {
                if ("kotlin.collections.List<ImportResultDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ImportResultDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("importSmf", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Import sumehr into patient(s) using existing document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun importSumehrTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "importSumehr")) {
			assert(true)
			println("Endpoint importSumehr skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "importSumehr")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "importSumehr.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val documentKey: kotlin.String = TestUtils.getParameter(fileName, "importSumehr.documentKey")!!
		if (documentKey as? Collection<*> == null) {
			documentKey.also {
            if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentKey as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val dryRun: kotlin.Boolean = TestUtils.getParameter(fileName, "importSumehr.dryRun")!!
		if (dryRun as? Collection<*> == null) {
			dryRun.also {
            if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = dryRun as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "importSumehr.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "importSumehr.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>> = TestUtils.getParameter(fileName, "importSumehr.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.importSumehr(documentId,documentKey,dryRun,patientId,language,requestBody)

        val testFileName = "BekmehrApi.importSumehr"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ImportResultDto>? != null) {
                if ("kotlin.collections.List<ImportResultDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ImportResultDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("importSumehr", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Import sumehr into patient(s) using existing document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun importSumehrByItemIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "importSumehrByItemId")) {
			assert(true)
			println("Endpoint importSumehrByItemId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "importSumehrByItemId")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "importSumehrByItemId.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val itemId: kotlin.String = TestUtils.getParameter(fileName, "importSumehrByItemId.itemId")!!
		if (itemId as? Collection<*> == null) {
			itemId.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = itemId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val documentKey: kotlin.String = TestUtils.getParameter(fileName, "importSumehrByItemId.documentKey")!!
		if (documentKey as? Collection<*> == null) {
			documentKey.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentKey as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val dryRun: kotlin.Boolean = TestUtils.getParameter(fileName, "importSumehrByItemId.dryRun")!!
		if (dryRun as? Collection<*> == null) {
			dryRun.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = dryRun as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "importSumehrByItemId.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "importSumehrByItemId.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>> = TestUtils.getParameter(fileName, "importSumehrByItemId.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.collections.Map<kotlin.String, kotlin.collections.List<ImportMapping>>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ImportResultDto> ?: emptyList<ImportResultDto>() as Collection<ImportResultDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "importSumehrByItemId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.importSumehrByItemId(documentId,itemId,documentKey,dryRun,patientId,language,requestBody)

        val testFileName = "BekmehrApi.importSumehrByItemId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ImportResultDto>? != null) {
                if ("kotlin.collections.List<ImportResultDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ImportResultDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("importSumehrByItemId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get sumehr validity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun isSumehrV2ValidTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "isSumehrV2Valid")) {
			assert(true)
			println("Endpoint isSumehrV2Valid skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "isSumehrV2Valid")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "isSumehrV2Valid.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "isSumehrV2Valid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<SumehrValidityDto> ?: emptyList<SumehrValidityDto>() as Collection<SumehrValidityDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "isSumehrV2Valid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "isSumehrV2Valid.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "isSumehrV2Valid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<SumehrValidityDto> ?: emptyList<SumehrValidityDto>() as Collection<SumehrValidityDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "isSumehrV2Valid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.isSumehrV2Valid(patientId,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.isSumehrV2Valid"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<SumehrValidityDto>? != null) {
                if ("SumehrValidityDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<SumehrValidityDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("isSumehrV2Valid", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get sumehr validity
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun isSumehrValidTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "isSumehrValid")) {
			assert(true)
			println("Endpoint isSumehrValid skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "isSumehrValid")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "isSumehrValid.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "isSumehrValid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<SumehrValidityDto> ?: emptyList<SumehrValidityDto>() as Collection<SumehrValidityDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "isSumehrValid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "isSumehrValid.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "isSumehrValid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<SumehrValidityDto> ?: emptyList<SumehrValidityDto>() as Collection<SumehrValidityDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "isSumehrValid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.isSumehrValid(patientId,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.isSumehrValid"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<SumehrValidityDto>? != null) {
                if ("SumehrValidityDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<SumehrValidityDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("isSumehrValid", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Validate sumehr
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun validateSumehrTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "validateSumehr")) {
			assert(true)
			println("Endpoint validateSumehr skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "validateSumehr")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "validateSumehr.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "validateSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validateSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "validateSumehr.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "validateSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validateSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "validateSumehr.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "validateSumehr") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validateSumehr") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.validateSumehr(patientId,language,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.validateSumehr"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("validateSumehr", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Validate sumehr
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun validateSumehrV2Test(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "validateSumehrV2")) {
			assert(true)
			println("Endpoint validateSumehrV2 skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "validateSumehrV2")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "validateSumehrV2.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "validateSumehrV2") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validateSumehrV2") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "validateSumehrV2.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "validateSumehrV2") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validateSumehrV2") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sumehrExportInfoDto: SumehrExportInfoDto = TestUtils.getParameter(fileName, "validateSumehrV2.sumehrExportInfoDto")!!
		if (sumehrExportInfoDto as? Collection<*> == null) {
			sumehrExportInfoDto.also {
            if (TestUtils.isAutoRev(fileName, "validateSumehrV2") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                val rev = SumehrExportInfoDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sumehrExportInfoDto as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validateSumehrV2") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBekmehr(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.validateSumehrV2(patientId,language,sumehrExportInfoDto)

        val testFileName = "BekmehrApi.validateSumehrV2"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("validateSumehrV2", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
