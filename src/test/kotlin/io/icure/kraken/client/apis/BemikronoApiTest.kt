/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.AppointmentDto;
import io.icure.kraken.client.models.AppointmentImportDto;
import io.icure.kraken.client.models.EmailOrSmsMessageDto;
import io.icure.kraken.client.models.MikronoAppointmentTypeRestDto;
import io.icure.kraken.client.models.MikronoCredentialsDto;
import io.icure.kraken.client.models.UserDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for BemikronoApi
 */
@ExperimentalStdlibApi
class BemikronoApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("BemikronoApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("BemikronoApi.json")
    }

    private val api = BemikronoApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Get appointments for patient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun appointmentsByDateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "appointmentsByDate")) {
			assert(true)
			println("Endpoint appointmentsByDate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "appointmentsByDate")
        val calendarDate: kotlin.Long = TestUtils.getParameter(fileName, "appointmentsByDate.calendarDate")!!
		if (calendarDate as? Collection<*> == null) {
			calendarDate.also {
            if (TestUtils.isAutoRev(fileName, "appointmentsByDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = calendarDate as? Collection<AppointmentDto> ?: emptyList<AppointmentDto>() as Collection<AppointmentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appointmentsByDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.appointmentsByDate(calendarDate)

        val testFileName = "BemikronoApi.appointmentsByDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AppointmentDto>? != null) {
                if ("kotlin.collections.List<AppointmentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AppointmentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("appointmentsByDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get appointments for patient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun appointmentsByPatientTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "appointmentsByPatient")) {
			assert(true)
			println("Endpoint appointmentsByPatient skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "appointmentsByPatient")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "appointmentsByPatient.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "appointmentsByPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<AppointmentDto> ?: emptyList<AppointmentDto>() as Collection<AppointmentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appointmentsByPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val from: kotlin.Long = TestUtils.getParameter(fileName, "appointmentsByPatient.from")!!
		if (from as? Collection<*> == null) {
			from.also {
            if (TestUtils.isAutoRev(fileName, "appointmentsByPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = from as? Collection<AppointmentDto> ?: emptyList<AppointmentDto>() as Collection<AppointmentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appointmentsByPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val to: kotlin.Long = TestUtils.getParameter(fileName, "appointmentsByPatient.to")!!
		if (to as? Collection<*> == null) {
			to.also {
            if (TestUtils.isAutoRev(fileName, "appointmentsByPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = to as? Collection<AppointmentDto> ?: emptyList<AppointmentDto>() as Collection<AppointmentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appointmentsByPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.appointmentsByPatient(patientId,from,to)

        val testFileName = "BemikronoApi.appointmentsByPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AppointmentDto>? != null) {
                if ("kotlin.collections.List<AppointmentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AppointmentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("appointmentsByPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createAppointmentTypesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createAppointmentTypes")) {
			assert(true)
			println("Endpoint createAppointmentTypes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createAppointmentTypes")
        val mikronoAppointmentTypeRestDto: kotlin.collections.List<MikronoAppointmentTypeRestDto> = TestUtils.getParameter(fileName, "createAppointmentTypes.mikronoAppointmentTypeRestDto")!!
		if (mikronoAppointmentTypeRestDto as? Collection<*> == null) {
			mikronoAppointmentTypeRestDto.also {
            if (TestUtils.isAutoRev(fileName, "createAppointmentTypes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<MikronoAppointmentTypeRestDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mikronoAppointmentTypeRestDto as? Collection<MikronoAppointmentTypeRestDto> ?: emptyList<MikronoAppointmentTypeRestDto>() as Collection<MikronoAppointmentTypeRestDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createAppointmentTypes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createAppointmentTypes(mikronoAppointmentTypeRestDto)

        val testFileName = "BemikronoApi.createAppointmentTypes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MikronoAppointmentTypeRestDto>? != null) {
                if ("kotlin.collections.List<MikronoAppointmentTypeRestDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MikronoAppointmentTypeRestDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createAppointmentTypes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create appointments for owner
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createAppointmentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createAppointments")) {
			assert(true)
			println("Endpoint createAppointments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createAppointments")
        val appointmentImportDto: kotlin.collections.List<AppointmentImportDto> = TestUtils.getParameter(fileName, "createAppointments.appointmentImportDto")!!
		if (appointmentImportDto as? Collection<*> == null) {
			appointmentImportDto.also {
            if (TestUtils.isAutoRev(fileName, "createAppointments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<AppointmentImportDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = appointmentImportDto as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createAppointments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createAppointments(appointmentImportDto)

        val testFileName = "BemikronoApi.createAppointments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createAppointments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Notify of an appointment change
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun notifyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "notify")) {
			assert(true)
			println("Endpoint notify skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "notify")
        val appointmentId: kotlin.String = TestUtils.getParameter(fileName, "notify.appointmentId")!!
		if (appointmentId as? Collection<*> == null) {
			appointmentId.also {
            if (TestUtils.isAutoRev(fileName, "notify") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = appointmentId as? Collection<> ?: emptyList<>() as Collection<>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "notify") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val action: kotlin.String = TestUtils.getParameter(fileName, "notify.action")!!
		if (action as? Collection<*> == null) {
			action.also {
            if (TestUtils.isAutoRev(fileName, "notify") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = action as? Collection<> ?: emptyList<>() as Collection<>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "notify") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        api.notify(appointmentId,action)

    }
    
    /**
     * Set credentials for provided user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun registerTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "register")) {
			assert(true)
			println("Endpoint register skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "register")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "register.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "register") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "register") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mikronoCredentialsDto: MikronoCredentialsDto = TestUtils.getParameter(fileName, "register.mikronoCredentialsDto")!!
		if (mikronoCredentialsDto as? Collection<*> == null) {
			mikronoCredentialsDto.also {
            if (TestUtils.isAutoRev(fileName, "register") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = MikronoCredentialsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mikronoCredentialsDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "register") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.register(userId,mikronoCredentialsDto)

        val testFileName = "BemikronoApi.register"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("register", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Send message using mikrono from logged user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun sendMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "sendMessage")) {
			assert(true)
			println("Endpoint sendMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "sendMessage")
        val emailOrSmsMessageDto: EmailOrSmsMessageDto = TestUtils.getParameter(fileName, "sendMessage.emailOrSmsMessageDto")!!
		if (emailOrSmsMessageDto as? Collection<*> == null) {
			emailOrSmsMessageDto.also {
            if (TestUtils.isAutoRev(fileName, "sendMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = EmailOrSmsMessageDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = emailOrSmsMessageDto as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "sendMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.sendMessage(emailOrSmsMessageDto)

        val testFileName = "BemikronoApi.sendMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Any>? != null) {
                if ("kotlin.Any".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Any>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("sendMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Set credentials for provided user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setUserCredentialsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setUserCredentials")) {
			assert(true)
			println("Endpoint setUserCredentials skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setUserCredentials")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "setUserCredentials.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "setUserCredentials") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setUserCredentials") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val mikronoCredentialsDto: MikronoCredentialsDto = TestUtils.getParameter(fileName, "setUserCredentials.mikronoCredentialsDto")!!
		if (mikronoCredentialsDto as? Collection<*> == null) {
			mikronoCredentialsDto.also {
            if (TestUtils.isAutoRev(fileName, "setUserCredentials") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                val rev = MikronoCredentialsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = mikronoCredentialsDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setUserCredentials") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBemikrono(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setUserCredentials(userId,mikronoCredentialsDto)

        val testFileName = "BemikronoApi.setUserCredentials"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setUserCredentials", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
