/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.AmpDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.NmpDto;
import io.icure.kraken.client.models.PaginatedListAmpDto;
import io.icure.kraken.client.models.PaginatedListNmpDto;
import io.icure.kraken.client.models.PaginatedListVmpDto;
import io.icure.kraken.client.models.PaginatedListVmpGroupDto;
import io.icure.kraken.client.models.PharmaceuticalFormDto;
import io.icure.kraken.client.models.SamVersionDto;
import io.icure.kraken.client.models.SubstanceDto;
import io.icure.kraken.client.models.VmpDto;
import io.icure.kraken.client.models.VmpGroupDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for Besamv2Api
 */
@ExperimentalStdlibApi
class Besamv2ApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("Besamv2Api.json")
        }

        @JvmStatic
        fun fileNames() = listOf("Besamv2Api.json")
    }

    private val api = Besamv2Api()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Finding AMPs by dmpp code
     *
     * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findAmpsByDmppCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findAmpsByDmppCode")) {
			assert(true)
			println("Endpoint findAmpsByDmppCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findAmpsByDmppCode")
        val dmppCode: kotlin.String = TestUtils.getParameter(fileName, "findAmpsByDmppCode.dmppCode")!!
		if (dmppCode as? Collection<*> == null) {
			dmppCode.also {
            if (TestUtils.isAutoRev(fileName, "findAmpsByDmppCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = dmppCode as? Collection<AmpDto> ?: emptyList<AmpDto>() as Collection<AmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAmpsByDmppCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findAmpsByDmppCode(dmppCode)

        val testFileName = "Besamv2Api.findAmpsByDmppCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AmpDto>? != null) {
                if ("kotlin.collections.List<AmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findAmpsByDmppCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by atc code with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedAmpsByAtcTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedAmpsByAtc")) {
			assert(true)
			println("Endpoint findPaginatedAmpsByAtc skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedAmpsByAtc")
        val atcCode: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByAtc.atcCode")!!
		if (atcCode as? Collection<*> == null) {
			atcCode.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = atcCode as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByAtc.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByAtc.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedAmpsByAtc.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByAtc") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedAmpsByAtc(atcCode,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedAmpsByAtc"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAmpDto>? != null) {
                if ("PaginatedListAmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedAmpsByAtc", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by group with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedAmpsByGroupCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedAmpsByGroupCode")) {
			assert(true)
			println("Endpoint findPaginatedAmpsByGroupCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedAmpsByGroupCode")
        val vmpgCode: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupCode.vmpgCode")!!
		if (vmpgCode as? Collection<*> == null) {
			vmpgCode.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpgCode as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupCode.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupCode.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupCode.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedAmpsByGroupCode(vmpgCode,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedAmpsByGroupCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAmpDto>? != null) {
                if ("PaginatedListAmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedAmpsByGroupCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by group with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedAmpsByGroupIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedAmpsByGroupId")) {
			assert(true)
			println("Endpoint findPaginatedAmpsByGroupId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedAmpsByGroupId")
        val vmpgId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupId.vmpgId")!!
		if (vmpgId as? Collection<*> == null) {
			vmpgId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpgId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupId.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupId.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedAmpsByGroupId.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedAmpsByGroupId(vmpgId,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedAmpsByGroupId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAmpDto>? != null) {
                if ("PaginatedListAmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedAmpsByGroupId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by label with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedAmpsByLabelTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedAmpsByLabel")) {
			assert(true)
			println("Endpoint findPaginatedAmpsByLabel skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedAmpsByLabel")
        val language: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByLabel.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val label: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByLabel.label")!!
		if (label as? Collection<*> == null) {
			label.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = label as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByLabel.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByLabel.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedAmpsByLabel.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedAmpsByLabel(language,label,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedAmpsByLabel"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAmpDto>? != null) {
                if ("PaginatedListAmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedAmpsByLabel", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by vmp code with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedAmpsByVmpCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedAmpsByVmpCode")) {
			assert(true)
			println("Endpoint findPaginatedAmpsByVmpCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedAmpsByVmpCode")
        val vmpCode: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpCode.vmpCode")!!
		if (vmpCode as? Collection<*> == null) {
			vmpCode.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpCode as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpCode.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpCode.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpCode.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedAmpsByVmpCode(vmpCode,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedAmpsByVmpCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAmpDto>? != null) {
                if ("PaginatedListAmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedAmpsByVmpCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by vmp id with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedAmpsByVmpIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedAmpsByVmpId")) {
			assert(true)
			println("Endpoint findPaginatedAmpsByVmpId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedAmpsByVmpId")
        val vmpId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpId.vmpId")!!
		if (vmpId as? Collection<*> == null) {
			vmpId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpId.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpId.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedAmpsByVmpId.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListAmpDto> ?: emptyList<PaginatedListAmpDto>() as Collection<PaginatedListAmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedAmpsByVmpId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedAmpsByVmpId(vmpId,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedAmpsByVmpId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListAmpDto>? != null) {
                if ("PaginatedListAmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListAmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedAmpsByVmpId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding NMPs by label with pagination.
     *
     * Returns a paginated list of NMPs by matching label. Matches occur per word
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedNmpsByLabelTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedNmpsByLabel")) {
			assert(true)
			println("Endpoint findPaginatedNmpsByLabel skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedNmpsByLabel")
        val language: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedNmpsByLabel.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<PaginatedListNmpDto> ?: emptyList<PaginatedListNmpDto>() as Collection<PaginatedListNmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val label: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedNmpsByLabel.label")!!
		if (label as? Collection<*> == null) {
			label.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = label as? Collection<PaginatedListNmpDto> ?: emptyList<PaginatedListNmpDto>() as Collection<PaginatedListNmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedNmpsByLabel.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListNmpDto> ?: emptyList<PaginatedListNmpDto>() as Collection<PaginatedListNmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedNmpsByLabel.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListNmpDto> ?: emptyList<PaginatedListNmpDto>() as Collection<PaginatedListNmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedNmpsByLabel.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListNmpDto> ?: emptyList<PaginatedListNmpDto>() as Collection<PaginatedListNmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedNmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedNmpsByLabel(language,label,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedNmpsByLabel"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListNmpDto>? != null) {
                if ("PaginatedListNmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListNmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedNmpsByLabel", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMP groups by language label with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedVmpGroupsByLabelTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedVmpGroupsByLabel")) {
			assert(true)
			println("Endpoint findPaginatedVmpGroupsByLabel skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedVmpGroupsByLabel")
        val language: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByLabel.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val label: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByLabel.label")!!
		if (label as? Collection<*> == null) {
			label.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = label as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByLabel.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByLabel.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByLabel.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedVmpGroupsByLabel(language,label,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedVmpGroupsByLabel"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListVmpGroupDto>? != null) {
                if ("PaginatedListVmpGroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListVmpGroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedVmpGroupsByLabel", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMP groups by cmpgCode with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedVmpGroupsByVmpGroupCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedVmpGroupsByVmpGroupCode")) {
			assert(true)
			println("Endpoint findPaginatedVmpGroupsByVmpGroupCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedVmpGroupsByVmpGroupCode")
        val vmpgCode: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByVmpGroupCode.vmpgCode")!!
		if (vmpgCode as? Collection<*> == null) {
			vmpgCode.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpgCode as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByVmpGroupCode.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByVmpGroupCode.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedVmpGroupsByVmpGroupCode.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListVmpGroupDto> ?: emptyList<PaginatedListVmpGroupDto>() as Collection<PaginatedListVmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpGroupsByVmpGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedVmpGroupsByVmpGroupCode(vmpgCode,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedVmpGroupsByVmpGroupCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListVmpGroupDto>? != null) {
                if ("PaginatedListVmpGroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListVmpGroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedVmpGroupsByVmpGroupCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMPs by group with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedVmpsByGroupCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedVmpsByGroupCode")) {
			assert(true)
			println("Endpoint findPaginatedVmpsByGroupCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedVmpsByGroupCode")
        val vmpgCode: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupCode.vmpgCode")!!
		if (vmpgCode as? Collection<*> == null) {
			vmpgCode.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpgCode as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupCode.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupCode.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupCode.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedVmpsByGroupCode(vmpgCode,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedVmpsByGroupCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListVmpDto>? != null) {
                if ("PaginatedListVmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListVmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedVmpsByGroupCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMPs by group with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedVmpsByGroupIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedVmpsByGroupId")) {
			assert(true)
			println("Endpoint findPaginatedVmpsByGroupId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedVmpsByGroupId")
        val vmpgId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupId.vmpgId")!!
		if (vmpgId as? Collection<*> == null) {
			vmpgId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpgId as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupId.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupId.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedVmpsByGroupId.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedVmpsByGroupId(vmpgId,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedVmpsByGroupId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListVmpDto>? != null) {
                if ("PaginatedListVmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListVmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedVmpsByGroupId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMPs by label with pagination.
     *
     * Returns a paginated list of VMPs by matching label. Matches occur per word
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedVmpsByLabelTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedVmpsByLabel")) {
			assert(true)
			println("Endpoint findPaginatedVmpsByLabel skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedVmpsByLabel")
        val language: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByLabel.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val label: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByLabel.label")!!
		if (label as? Collection<*> == null) {
			label.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = label as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByLabel.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByLabel.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedVmpsByLabel.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedVmpsByLabel(language,label,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedVmpsByLabel"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListVmpDto>? != null) {
                if ("PaginatedListVmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListVmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedVmpsByLabel", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMPs by group with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedVmpsByVmpCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedVmpsByVmpCode")) {
			assert(true)
			println("Endpoint findPaginatedVmpsByVmpCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedVmpsByVmpCode")
        val vmpCode: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByVmpCode.vmpCode")!!
		if (vmpCode as? Collection<*> == null) {
			vmpCode.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = vmpCode as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByVmpCode.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedVmpsByVmpCode.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedVmpsByVmpCode.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListVmpDto> ?: emptyList<PaginatedListVmpDto>() as Collection<PaginatedListVmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedVmpsByVmpCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedVmpsByVmpCode(vmpCode,startKey,startDocumentId,limit)

        val testFileName = "Besamv2Api.findPaginatedVmpsByVmpCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListVmpDto>? != null) {
                if ("PaginatedListVmpDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListVmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedVmpsByVmpCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get Samv2 version.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getSamVersionTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getSamVersion")) {
			assert(true)
			println("Endpoint getSamVersion skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getSamVersion")

        val response = api.getSamVersion()

        val testFileName = "Besamv2Api.getSamVersion"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<SamVersionDto>? != null) {
                if ("SamVersionDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<SamVersionDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getSamVersion", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by dmpp code
     *
     * Returns a list of amps matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listAmpsByDmppCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listAmpsByDmppCodes")) {
			assert(true)
			println("Endpoint listAmpsByDmppCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAmpsByDmppCodes")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listAmpsByDmppCodes.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listAmpsByDmppCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<AmpDto> ?: emptyList<AmpDto>() as Collection<AmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAmpsByDmppCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listAmpsByDmppCodes(listOfIdsDto)

        val testFileName = "Besamv2Api.listAmpsByDmppCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AmpDto>? != null) {
                if ("kotlin.collections.List<AmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAmpsByDmppCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by group.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listAmpsByGroupCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listAmpsByGroupCodes")) {
			assert(true)
			println("Endpoint listAmpsByGroupCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAmpsByGroupCodes")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listAmpsByGroupCodes.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listAmpsByGroupCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<AmpDto> ?: emptyList<AmpDto>() as Collection<AmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAmpsByGroupCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listAmpsByGroupCodes(listOfIdsDto)

        val testFileName = "Besamv2Api.listAmpsByGroupCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AmpDto>? != null) {
                if ("kotlin.collections.List<AmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAmpsByGroupCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by group.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listAmpsByGroupIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listAmpsByGroupIds")) {
			assert(true)
			println("Endpoint listAmpsByGroupIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAmpsByGroupIds")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listAmpsByGroupIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listAmpsByGroupIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<AmpDto> ?: emptyList<AmpDto>() as Collection<AmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAmpsByGroupIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listAmpsByGroupIds(listOfIdsDto)

        val testFileName = "Besamv2Api.listAmpsByGroupIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AmpDto>? != null) {
                if ("kotlin.collections.List<AmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAmpsByGroupIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by vmp code.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listAmpsByVmpCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listAmpsByVmpCodes")) {
			assert(true)
			println("Endpoint listAmpsByVmpCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAmpsByVmpCodes")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listAmpsByVmpCodes.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listAmpsByVmpCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<AmpDto> ?: emptyList<AmpDto>() as Collection<AmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAmpsByVmpCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listAmpsByVmpCodes(listOfIdsDto)

        val testFileName = "Besamv2Api.listAmpsByVmpCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AmpDto>? != null) {
                if ("kotlin.collections.List<AmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAmpsByVmpCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by vmp id.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listAmpsByVmpIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listAmpsByVmpIds")) {
			assert(true)
			println("Endpoint listAmpsByVmpIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAmpsByVmpIds")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listAmpsByVmpIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listAmpsByVmpIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<AmpDto> ?: emptyList<AmpDto>() as Collection<AmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAmpsByVmpIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listAmpsByVmpIds(listOfIdsDto)

        val testFileName = "Besamv2Api.listAmpsByVmpIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<AmpDto>? != null) {
                if ("kotlin.collections.List<AmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<AmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAmpsByVmpIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding NMPs by cnk id.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listNmpsByCnksTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listNmpsByCnks")) {
			assert(true)
			println("Endpoint listNmpsByCnks skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listNmpsByCnks")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listNmpsByCnks.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listNmpsByCnks") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<NmpDto> ?: emptyList<NmpDto>() as Collection<NmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listNmpsByCnks") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listNmpsByCnks(listOfIdsDto)

        val testFileName = "Besamv2Api.listNmpsByCnks"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<NmpDto>? != null) {
                if ("kotlin.collections.List<NmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<NmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listNmpsByCnks", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List all pharmaceutical forms.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listPharmaceuticalFormsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listPharmaceuticalForms")) {
			assert(true)
			println("Endpoint listPharmaceuticalForms skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listPharmaceuticalForms")

        val response = api.listPharmaceuticalForms()

        val testFileName = "Besamv2Api.listPharmaceuticalForms"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PharmaceuticalFormDto>? != null) {
                if ("kotlin.collections.List<PharmaceuticalFormDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PharmaceuticalFormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listPharmaceuticalForms", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List all substances.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listSubstancesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listSubstances")) {
			assert(true)
			println("Endpoint listSubstances skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listSubstances")

        val response = api.listSubstances()

        val testFileName = "Besamv2Api.listSubstances"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<SubstanceDto>? != null) {
                if ("kotlin.collections.List<SubstanceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<SubstanceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listSubstances", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding AMPs by group.
     *
     * Returns a list of group codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listVmpGroupsByVmpGroupCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listVmpGroupsByVmpGroupCodes")) {
			assert(true)
			println("Endpoint listVmpGroupsByVmpGroupCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listVmpGroupsByVmpGroupCodes")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listVmpGroupsByVmpGroupCodes.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listVmpGroupsByVmpGroupCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<VmpGroupDto> ?: emptyList<VmpGroupDto>() as Collection<VmpGroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listVmpGroupsByVmpGroupCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listVmpGroupsByVmpGroupCodes(listOfIdsDto)

        val testFileName = "Besamv2Api.listVmpGroupsByVmpGroupCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<VmpGroupDto>? != null) {
                if ("kotlin.collections.List<VmpGroupDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<VmpGroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listVmpGroupsByVmpGroupCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMPs by group.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listVmpsByGroupIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listVmpsByGroupIds")) {
			assert(true)
			println("Endpoint listVmpsByGroupIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listVmpsByGroupIds")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listVmpsByGroupIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listVmpsByGroupIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<VmpDto> ?: emptyList<VmpDto>() as Collection<VmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listVmpsByGroupIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listVmpsByGroupIds(listOfIdsDto)

        val testFileName = "Besamv2Api.listVmpsByGroupIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<VmpDto>? != null) {
                if ("kotlin.collections.List<VmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<VmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listVmpsByGroupIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding VMPs by group.
     *
     * Returns a list of codes matched with given input. If several types are provided, paginantion is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listVmpsByVmpCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listVmpsByVmpCodes")) {
			assert(true)
			println("Endpoint listVmpsByVmpCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listVmpsByVmpCodes")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listVmpsByVmpCodes.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listVmpsByVmpCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<VmpDto> ?: emptyList<VmpDto>() as Collection<VmpDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listVmpsByVmpCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getBesamv2(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listVmpsByVmpCodes(listOfIdsDto)

        val testFileName = "Besamv2Api.listVmpsByVmpCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<VmpDto>? != null) {
                if ("kotlin.collections.List<VmpDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<VmpDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listVmpsByVmpCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
