/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.CalendarItemDto;
import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.IcureStubDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for CalendarItemApi
 */
@ExperimentalStdlibApi
class CalendarItemApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("CalendarItemApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("CalendarItemApi.json")
    }

    private val api = CalendarItemApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Creates a calendarItem
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createCalendarItemTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createCalendarItem")) {
			assert(true)
			println("Endpoint createCalendarItem skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createCalendarItem")
        val calendarItemDto: CalendarItemDto = TestUtils.getParameter(fileName, "createCalendarItem.calendarItemDto")!!
		if (calendarItemDto as? Collection<*> == null) {
			calendarItemDto.also {
            if (TestUtils.isAutoRev(fileName, "createCalendarItem") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = CalendarItemDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = calendarItemDto as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createCalendarItem") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createCalendarItem(calendarItemDto)

        val testFileName = "CalendarItemApi.createCalendarItem"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("CalendarItemDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createCalendarItem", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes an calendarItem
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteCalendarItemTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteCalendarItem")) {
			assert(true)
			println("Endpoint deleteCalendarItem skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteCalendarItem")
        val calendarItemIds: kotlin.String = TestUtils.getParameter(fileName, "deleteCalendarItem.calendarItemIds")!!
		if (calendarItemIds as? Collection<*> == null) {
			calendarItemIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteCalendarItem") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = calendarItemIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteCalendarItem") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteCalendarItem(calendarItemIds)

        val testFileName = "CalendarItemApi.deleteCalendarItem"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteCalendarItem", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Find CalendarItems by hcparty and patient
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findCalendarItemsByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findCalendarItemsByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findCalendarItemsByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findCalendarItemsByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findCalendarItemsByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findCalendarItemsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCalendarItemsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findCalendarItemsByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findCalendarItemsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCalendarItemsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findCalendarItemsByHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "CalendarItemApi.findCalendarItemsByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("kotlin.collections.List<CalendarItemDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findCalendarItemsByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets an calendarItem
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCalendarItemTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCalendarItem")) {
			assert(true)
			println("Endpoint getCalendarItem skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCalendarItem")
        val calendarItemId: kotlin.String = TestUtils.getParameter(fileName, "getCalendarItem.calendarItemId")!!
		if (calendarItemId as? Collection<*> == null) {
			calendarItemId.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarItem") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = calendarItemId as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarItem") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCalendarItem(calendarItemId)

        val testFileName = "CalendarItemApi.getCalendarItem"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("CalendarItemDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCalendarItem", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all calendarItems
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCalendarItemsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCalendarItems")) {
			assert(true)
			println("Endpoint getCalendarItems skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCalendarItems")

        val response = api.getCalendarItems()

        val testFileName = "CalendarItemApi.getCalendarItems"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("kotlin.collections.List<CalendarItemDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCalendarItems", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get CalendarItems by Period and HcPartyId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCalendarItemsByPeriodAndHcPartyIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCalendarItemsByPeriodAndHcPartyId")) {
			assert(true)
			println("Endpoint getCalendarItemsByPeriodAndHcPartyId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCalendarItemsByPeriodAndHcPartyId")
        val startDate: kotlin.Long = TestUtils.getParameter(fileName, "getCalendarItemsByPeriodAndHcPartyId.startDate")!!
		if (startDate as? Collection<*> == null) {
			startDate.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarItemsByPeriodAndHcPartyId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDate as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarItemsByPeriodAndHcPartyId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val endDate: kotlin.Long = TestUtils.getParameter(fileName, "getCalendarItemsByPeriodAndHcPartyId.endDate")!!
		if (endDate as? Collection<*> == null) {
			endDate.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarItemsByPeriodAndHcPartyId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = endDate as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarItemsByPeriodAndHcPartyId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "getCalendarItemsByPeriodAndHcPartyId.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarItemsByPeriodAndHcPartyId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarItemsByPeriodAndHcPartyId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCalendarItemsByPeriodAndHcPartyId(startDate,endDate,hcPartyId)

        val testFileName = "CalendarItemApi.getCalendarItemsByPeriodAndHcPartyId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("kotlin.collections.List<CalendarItemDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCalendarItemsByPeriodAndHcPartyId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get calendarItems by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCalendarItemsWithIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCalendarItemsWithIds")) {
			assert(true)
			println("Endpoint getCalendarItemsWithIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCalendarItemsWithIds")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getCalendarItemsWithIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarItemsWithIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarItemsWithIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCalendarItemsWithIds(listOfIdsDto)

        val testFileName = "CalendarItemApi.getCalendarItemsWithIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("kotlin.collections.List<CalendarItemDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCalendarItemsWithIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get CalendarItems by Period and AgendaId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCalendarsByPeriodAndAgendaIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCalendarsByPeriodAndAgendaId")) {
			assert(true)
			println("Endpoint getCalendarsByPeriodAndAgendaId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCalendarsByPeriodAndAgendaId")
        val startDate: kotlin.Long = TestUtils.getParameter(fileName, "getCalendarsByPeriodAndAgendaId.startDate")!!
		if (startDate as? Collection<*> == null) {
			startDate.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarsByPeriodAndAgendaId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDate as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarsByPeriodAndAgendaId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val endDate: kotlin.Long = TestUtils.getParameter(fileName, "getCalendarsByPeriodAndAgendaId.endDate")!!
		if (endDate as? Collection<*> == null) {
			endDate.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarsByPeriodAndAgendaId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = endDate as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarsByPeriodAndAgendaId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val agendaId: kotlin.String = TestUtils.getParameter(fileName, "getCalendarsByPeriodAndAgendaId.agendaId")!!
		if (agendaId as? Collection<*> == null) {
			agendaId.also {
            if (TestUtils.isAutoRev(fileName, "getCalendarsByPeriodAndAgendaId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = agendaId as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCalendarsByPeriodAndAgendaId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCalendarsByPeriodAndAgendaId(startDate,endDate,agendaId)

        val testFileName = "CalendarItemApi.getCalendarsByPeriodAndAgendaId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("kotlin.collections.List<CalendarItemDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCalendarsByPeriodAndAgendaId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modifies an calendarItem
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyCalendarItemTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyCalendarItem")) {
			assert(true)
			println("Endpoint modifyCalendarItem skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyCalendarItem")
        val calendarItemDto: CalendarItemDto = TestUtils.getParameter(fileName, "modifyCalendarItem.calendarItemDto")!!
		if (calendarItemDto as? Collection<*> == null) {
			calendarItemDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyCalendarItem") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = CalendarItemDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = calendarItemDto as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyCalendarItem") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyCalendarItem(calendarItemDto)

        val testFileName = "CalendarItemApi.modifyCalendarItem"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("CalendarItemDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyCalendarItem", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Update delegations in calendarItems
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setCalendarItemsDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setCalendarItemsDelegations")) {
			assert(true)
			println("Endpoint setCalendarItemsDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setCalendarItemsDelegations")
        val icureStubDto: kotlin.collections.List<IcureStubDto> = TestUtils.getParameter(fileName, "setCalendarItemsDelegations.icureStubDto")!!
		if (icureStubDto as? Collection<*> == null) {
			icureStubDto.also {
            if (TestUtils.isAutoRev(fileName, "setCalendarItemsDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<IcureStubDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = icureStubDto as? Collection<CalendarItemDto> ?: emptyList<CalendarItemDto>() as Collection<CalendarItemDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setCalendarItemsDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCalendarItem(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setCalendarItemsDelegations(icureStubDto)

        val testFileName = "CalendarItemApi.setCalendarItemsDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CalendarItemDto>? != null) {
                if ("kotlin.collections.List<CalendarItemDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CalendarItemDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setCalendarItemsDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
