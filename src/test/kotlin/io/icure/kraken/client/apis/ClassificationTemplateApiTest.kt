/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.ClassificationTemplateDto;
import io.icure.kraken.client.models.DelegationDto;
import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.PaginatedListClassificationTemplateDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for ClassificationTemplateApi
 */
@ExperimentalStdlibApi
class ClassificationTemplateApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("ClassificationTemplateApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("ClassificationTemplateApi.json")
    }

    private val api = ClassificationTemplateApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a classification Template with the current user
     *
     * Returns an instance of created classification Template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createClassificationTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createClassificationTemplate")) {
			assert(true)
			println("Endpoint createClassificationTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createClassificationTemplate")
        val classificationTemplateDto: ClassificationTemplateDto = TestUtils.getParameter(fileName, "createClassificationTemplate.classificationTemplateDto")!!
		if (classificationTemplateDto as? Collection<*> == null) {
			classificationTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "createClassificationTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = ClassificationTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationTemplateDto as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createClassificationTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createClassificationTemplate(classificationTemplateDto)

        val testFileName = "ClassificationTemplateApi.createClassificationTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationTemplateDto>? != null) {
                if ("ClassificationTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createClassificationTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Delete classification Templates.
     *
     * Response is a set containing the ID&#39;s of deleted classification Templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteClassificationTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteClassificationTemplates")) {
			assert(true)
			println("Endpoint deleteClassificationTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteClassificationTemplates")
        val classificationTemplateIds: kotlin.String = TestUtils.getParameter(fileName, "deleteClassificationTemplates.classificationTemplateIds")!!
		if (classificationTemplateIds as? Collection<*> == null) {
			classificationTemplateIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteClassificationTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationTemplateIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteClassificationTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteClassificationTemplates(classificationTemplateIds)

        val testFileName = "ClassificationTemplateApi.deleteClassificationTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteClassificationTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List classification Templates found By Healthcare Party and secret foreign keyelementIds.
     *
     * Keys hast to delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findClassificationTemplatesByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findClassificationTemplatesByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findClassificationTemplatesByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findClassificationTemplatesByHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "ClassificationTemplateApi.findClassificationTemplatesByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationTemplateDto>? != null) {
                if ("kotlin.collections.List<ClassificationTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findClassificationTemplatesByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a classification Template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getClassificationTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getClassificationTemplate")) {
			assert(true)
			println("Endpoint getClassificationTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getClassificationTemplate")
        val classificationTemplateId: kotlin.String = TestUtils.getParameter(fileName, "getClassificationTemplate.classificationTemplateId")!!
		if (classificationTemplateId as? Collection<*> == null) {
			classificationTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "getClassificationTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationTemplateId as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getClassificationTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getClassificationTemplate(classificationTemplateId)

        val testFileName = "ClassificationTemplateApi.getClassificationTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationTemplateDto>? != null) {
                if ("ClassificationTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getClassificationTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a list of classifications Templates
     *
     * Ids are seperated by a coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getClassificationTemplateByIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getClassificationTemplateByIds")) {
			assert(true)
			println("Endpoint getClassificationTemplateByIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getClassificationTemplateByIds")
        val ids: kotlin.String = TestUtils.getParameter(fileName, "getClassificationTemplateByIds.ids")!!
		if (ids as? Collection<*> == null) {
			ids.also {
            if (TestUtils.isAutoRev(fileName, "getClassificationTemplateByIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = ids as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getClassificationTemplateByIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getClassificationTemplateByIds(ids)

        val testFileName = "ClassificationTemplateApi.getClassificationTemplateByIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationTemplateDto>? != null) {
                if ("kotlin.collections.List<ClassificationTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getClassificationTemplateByIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List all classification templates with pagination
     *
     * Returns a list of classification templates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listClassificationTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listClassificationTemplates")) {
			assert(true)
			println("Endpoint listClassificationTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listClassificationTemplates")
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "listClassificationTemplates.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listClassificationTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListClassificationTemplateDto> ?: emptyList<PaginatedListClassificationTemplateDto>() as Collection<PaginatedListClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listClassificationTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "listClassificationTemplates.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listClassificationTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListClassificationTemplateDto> ?: emptyList<PaginatedListClassificationTemplateDto>() as Collection<PaginatedListClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listClassificationTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "listClassificationTemplates.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listClassificationTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListClassificationTemplateDto> ?: emptyList<PaginatedListClassificationTemplateDto>() as Collection<PaginatedListClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listClassificationTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listClassificationTemplates(startKey,startDocumentId,limit)

        val testFileName = "ClassificationTemplateApi.listClassificationTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListClassificationTemplateDto>? != null) {
                if ("PaginatedListClassificationTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listClassificationTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a classification Template
     *
     * Returns the modified classification Template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyClassificationTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyClassificationTemplate")) {
			assert(true)
			println("Endpoint modifyClassificationTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyClassificationTemplate")
        val classificationTemplateDto: ClassificationTemplateDto = TestUtils.getParameter(fileName, "modifyClassificationTemplate.classificationTemplateDto")!!
		if (classificationTemplateDto as? Collection<*> == null) {
			classificationTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyClassificationTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = ClassificationTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationTemplateDto as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyClassificationTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyClassificationTemplate(classificationTemplateDto)

        val testFileName = "ClassificationTemplateApi.modifyClassificationTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationTemplateDto>? != null) {
                if ("ClassificationTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyClassificationTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Delegates a classification Template to a healthcare party
     *
     * It delegates a classification Template to a healthcare party (By current healthcare party). Returns the element with new delegations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun newClassificationTemplateDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "newClassificationTemplateDelegations")) {
			assert(true)
			println("Endpoint newClassificationTemplateDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "newClassificationTemplateDelegations")
        val classificationTemplateId: kotlin.String = TestUtils.getParameter(fileName, "newClassificationTemplateDelegations.classificationTemplateId")!!
		if (classificationTemplateId as? Collection<*> == null) {
			classificationTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "newClassificationTemplateDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationTemplateId as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newClassificationTemplateDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val delegationDto: kotlin.collections.List<DelegationDto> = TestUtils.getParameter(fileName, "newClassificationTemplateDelegations.delegationDto")!!
		if (delegationDto as? Collection<*> == null) {
			delegationDto.also {
            if (TestUtils.isAutoRev(fileName, "newClassificationTemplateDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<DelegationDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = delegationDto as? Collection<ClassificationTemplateDto> ?: emptyList<ClassificationTemplateDto>() as Collection<ClassificationTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newClassificationTemplateDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getClassificationTemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.newClassificationTemplateDelegations(classificationTemplateId,delegationDto)

        val testFileName = "ClassificationTemplateApi.newClassificationTemplateDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationTemplateDto>? != null) {
                if ("ClassificationTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("newClassificationTemplateDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
