/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.CodeDto;
import io.icure.kraken.client.models.FilterChainCode;
import io.icure.kraken.client.models.PaginatedListCodeDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for CodeApi
 */
@ExperimentalStdlibApi
class CodeApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("CodeApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("CodeApi.json")
    }

    private val api = CodeApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a Code
     *
     * Type, Code and Version are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createCode")) {
			assert(true)
			println("Endpoint createCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createCode")
        val codeDto: CodeDto = TestUtils.getParameter(fileName, "createCode.codeDto")!!
		if (codeDto as? Collection<*> == null) {
			codeDto.also {
            if (TestUtils.isAutoRev(fileName, "createCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = CodeDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = codeDto as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createCode(codeDto)

        val testFileName = "CodeApi.createCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CodeDto>? != null) {
                if ("CodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Filter codes 
     *
     * Returns a list of codes along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun filterCodesByTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "filterCodesBy")) {
			assert(true)
			println("Endpoint filterCodesBy skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterCodesBy")
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "filterCodesBy.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "filterCodesBy.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "filterCodesBy.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val skip: kotlin.Int = TestUtils.getParameter(fileName, "filterCodesBy.skip")!!
		if (skip as? Collection<*> == null) {
			skip.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = skip as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sort: kotlin.String = TestUtils.getParameter(fileName, "filterCodesBy.sort")!!
		if (sort as? Collection<*> == null) {
			sort.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sort as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val desc: kotlin.Boolean = TestUtils.getParameter(fileName, "filterCodesBy.desc")!!
		if (desc as? Collection<*> == null) {
			desc.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = desc as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val filterChainCode: FilterChainCode = TestUtils.getParameter(fileName, "filterCodesBy.filterChainCode")!!
		if (filterChainCode as? Collection<*> == null) {
			filterChainCode.also {
            if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = FilterChainCode::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = filterChainCode as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterCodesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.filterCodesBy(startKey,startDocumentId,limit,skip,sort,desc,filterChainCode)

        val testFileName = "CodeApi.filterCodesBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListCodeDto>? != null) {
                if ("PaginatedListCodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListCodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("filterCodesBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding code types.
     *
     * Returns a list of code types matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findCodeTypesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findCodeTypes")) {
			assert(true)
			println("Endpoint findCodeTypes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findCodeTypes")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findCodeTypes.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findCodeTypes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCodeTypes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findCodeTypes.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findCodeTypes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCodeTypes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findCodeTypes(region,type)

        val testFileName = "CodeApi.findCodeTypes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findCodeTypes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding codes by code, type and version
     *
     * Returns a list of codes matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findCodes")) {
			assert(true)
			println("Endpoint findCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findCodes")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findCodes.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findCodes.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val code: kotlin.String = TestUtils.getParameter(fileName, "findCodes.code")!!
		if (code as? Collection<*> == null) {
			code.also {
            if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = code as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.String = TestUtils.getParameter(fileName, "findCodes.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findCodes(region,type,code,version)

        val testFileName = "CodeApi.findCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CodeDto>? != null) {
                if ("kotlin.collections.List<CodeDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding codes by code, type and version with pagination.
     *
     * Returns a list of codes matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedCodes")) {
			assert(true)
			println("Endpoint findPaginatedCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedCodes")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodes.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodes.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val code: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodes.code")!!
		if (code as? Collection<*> == null) {
			code.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = code as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodes.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodes.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodes.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedCodes.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedCodes(region,type,code,version,startKey,startDocumentId,limit)

        val testFileName = "CodeApi.findPaginatedCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListCodeDto>? != null) {
                if ("PaginatedListCodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListCodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding codes by code, type and version with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, pagination is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedCodesByLabelTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedCodesByLabel")) {
			assert(true)
			println("Endpoint findPaginatedCodesByLabel skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedCodesByLabel")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val types: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.types")!!
		if (types as? Collection<*> == null) {
			types.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = types as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val label: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.label")!!
		if (label as? Collection<*> == null) {
			label.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = label as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedCodesByLabel.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedCodesByLabel(region,types,language,label,startKey,startDocumentId,limit)

        val testFileName = "CodeApi.findPaginatedCodesByLabel"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListCodeDto>? != null) {
                if ("PaginatedListCodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListCodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedCodesByLabel", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding codes by code, type and version with pagination.
     *
     * Returns a list of codes matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedCodesWithLinkTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedCodesWithLink")) {
			assert(true)
			println("Endpoint findPaginatedCodesWithLink skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedCodesWithLink")
        val linkType: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesWithLink.linkType")!!
		if (linkType as? Collection<*> == null) {
			linkType.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = linkType as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val linkedId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesWithLink.linkedId")!!
		if (linkedId as? Collection<*> == null) {
			linkedId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = linkedId as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesWithLink.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedCodesWithLink.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedCodesWithLink.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListCodeDto> ?: emptyList<PaginatedListCodeDto>() as Collection<PaginatedListCodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedCodesWithLink") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedCodesWithLink(linkType,linkedId,startKey,startDocumentId,limit)

        val testFileName = "CodeApi.findPaginatedCodesWithLink"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListCodeDto>? != null) {
                if ("PaginatedListCodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListCodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedCodesWithLink", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding tag types.
     *
     * Returns a list of tag types matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findTagTypesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findTagTypes")) {
			assert(true)
			println("Endpoint findTagTypes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findTagTypes")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findTagTypes.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findTagTypes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findTagTypes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findTagTypes.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findTagTypes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findTagTypes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findTagTypes(region,type)

        val testFileName = "CodeApi.findTagTypes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findTagTypes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a code
     *
     * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCode")) {
			assert(true)
			println("Endpoint getCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCode")
        val codeId: kotlin.String = TestUtils.getParameter(fileName, "getCode.codeId")!!
		if (codeId as? Collection<*> == null) {
			codeId.also {
            if (TestUtils.isAutoRev(fileName, "getCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = codeId as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCode(codeId)

        val testFileName = "CodeApi.getCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CodeDto>? != null) {
                if ("CodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a code
     *
     * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCodeWithPartsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCodeWithParts")) {
			assert(true)
			println("Endpoint getCodeWithParts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCodeWithParts")
        val type: kotlin.String = TestUtils.getParameter(fileName, "getCodeWithParts.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "getCodeWithParts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCodeWithParts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val code: kotlin.String = TestUtils.getParameter(fileName, "getCodeWithParts.code")!!
		if (code as? Collection<*> == null) {
			code.also {
            if (TestUtils.isAutoRev(fileName, "getCodeWithParts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = code as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCodeWithParts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.String = TestUtils.getParameter(fileName, "getCodeWithParts.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "getCodeWithParts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCodeWithParts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCodeWithParts(type,code,version)

        val testFileName = "CodeApi.getCodeWithParts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CodeDto>? != null) {
                if ("CodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCodeWithParts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a list of codes by ids
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCodes")) {
			assert(true)
			println("Endpoint getCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCodes")
        val codeIds: kotlin.String = TestUtils.getParameter(fileName, "getCodes.codeIds")!!
		if (codeIds as? Collection<*> == null) {
			codeIds.also {
            if (TestUtils.isAutoRev(fileName, "getCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = codeIds as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getCodes(codeIds)

        val testFileName = "CodeApi.getCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CodeDto>? != null) {
                if ("kotlin.collections.List<CodeDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a code
     *
     * Modification of (type, code, version) is not allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyCode")) {
			assert(true)
			println("Endpoint modifyCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyCode")
        val codeDto: CodeDto = TestUtils.getParameter(fileName, "modifyCode.codeDto")!!
		if (codeDto as? Collection<*> == null) {
			codeDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getCode(id.getter.call(it) as String).rev
                val rev = CodeDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = codeDto as? Collection<CodeDto> ?: emptyList<CodeDto>() as Collection<CodeDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getCode(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyCode(codeDto)

        val testFileName = "CodeApi.modifyCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<CodeDto>? != null) {
                if ("CodeDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<CodeDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
