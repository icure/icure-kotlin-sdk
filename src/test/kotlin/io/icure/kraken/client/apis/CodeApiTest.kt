/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis


import io.icure.kraken.client.models.CodeDto

import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListCodeDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.infrastructure.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import io.icure.kraken.client.models.filter.AbstractFilterDto

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import kotlinx.coroutines.runBlocking
import io.icure.kraken.client.infrastructure.TestUtils
import io.icure.kraken.client.infrastructure.TestUtils.Companion.basicAuth
import io.icure.kraken.client.infrastructure.differences
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.fold
import java.nio.ByteBuffer
import kotlin.reflect.full.callSuspendBy
import kotlin.reflect.javaType
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.toList

/**
 * API tests for CodeApi
 */
@ExperimentalStdlibApi
class CodeApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        fun fileNames() = listOf("CodeApi.json")
    }

    // http://127.0.0.1:16043
    fun api(fileName: String) = CodeApi(basePath = java.lang.System.getProperty("API_URL"), authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                addDeserializer(AbstractFilterDto::class.java, FilterDeserializer())
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
                super.setupModule(context)
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    suspend fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    val parameters = createFunction!!.parameters.mapNotNull {
                        when(it.type.javaType) {
                            CodeDto::class.java -> it to objectMapper.convertValue(body, CodeDto::class.java)
                            CodeApi::class.java -> it to api(credentialsFile)
                            else -> null
                        }
                    }.toMap()

                    createFunction.callSuspendBy(parameters)
                    println("created")
                }
            }
        }
    }

    
    /**
     * Create a Code
     *
     * Type, Code and Version are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createCodeTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createCode")) {
            assertTrue(true, "Test of createCode endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createCode")
                val codeDto: CodeDto = TestUtils.getParameter<CodeDto>(fileName, "createCode.codeDto")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "createCode") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? CodeDto ?: it
                    }

                val response = api(credentialsFile).createCode(codeDto = codeDto)

                val testFileName = "CodeApi.createCode"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<CodeDto>? != null) {
                        if ("CodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<CodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<CodeDto>() {}
                    })
                    assertAreEquals("createCode", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Filter codes 
     *
     * Returns a list of codes along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun filterCodesByTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "filterCodesBy")) {
            assertTrue(true, "Test of filterCodesBy endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterCodesBy")
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "filterCodesBy.startKey")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "filterCodesBy.startDocumentId")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "filterCodesBy.limit")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }
                val skip: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "filterCodesBy.skip")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }
                val sort: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "filterCodesBy.sort")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val desc: kotlin.Boolean? = TestUtils.getParameter<kotlin.Boolean>(fileName, "filterCodesBy.desc")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Boolean ?: it
                    }
                val filterChainCode: io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.CodeDto>? = TestUtils.getParameter<io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.CodeDto>>(fileName, "filterCodesBy.filterChainCode")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? io.icure.kraken.client.models.filter.chain.FilterChain<io.icure.kraken.client.models.CodeDto> ?: it
                    }

                val response = api(credentialsFile).filterCodesBy(startKey = startKey,startDocumentId = startDocumentId,limit = limit,skip = skip,sort = sort,desc = desc,filterChainCode = filterChainCode)

                val testFileName = "CodeApi.filterCodesBy"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListCodeDto>? != null) {
                        if ("PaginatedListCodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListCodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListCodeDto>() {}
                    })
                    assertAreEquals("filterCodesBy", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Finding codes by code, type and version with pagination.
     *
     * Returns a list of codes matched with given input. If several types are provided, pagination is not supported
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findCodesByLabelTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findCodesByLabel")) {
            assertTrue(true, "Test of findCodesByLabel endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findCodesByLabel")
                val region: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLabel.region")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val types: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLabel.types")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val language: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLabel.language")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val label: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLabel.label")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLabel.startKey")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLabel.startDocumentId")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findCodesByLabel.limit")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLabel") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findCodesByLabel(region = region,types = types,language = language,label = label,startKey = startKey,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "CodeApi.findCodesByLabel"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListCodeDto>? != null) {
                        if ("PaginatedListCodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListCodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListCodeDto>() {}
                    })
                    assertAreEquals("findCodesByLabel", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Finding codes by code, type and version with pagination.
     *
     * Returns a list of codes matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findCodesByLinkTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findCodesByLink")) {
            assertTrue(true, "Test of findCodesByLink endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findCodesByLink")
                val linkType: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLink.linkType")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLink") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val linkedId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLink.linkedId")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLink") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLink.startKey")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLink") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByLink.startDocumentId")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLink") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findCodesByLink.limit")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByLink") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findCodesByLink(linkType = linkType,linkedId = linkedId,startKey = startKey,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "CodeApi.findCodesByLink"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListCodeDto>? != null) {
                        if ("PaginatedListCodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListCodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListCodeDto>() {}
                    })
                    assertAreEquals("findCodesByLink", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Finding codes by code, type and version with pagination.
     *
     * Returns a list of codes matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findCodesByTypeTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findCodesByType")) {
            assertTrue(true, "Test of findCodesByType endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findCodesByType")
                val region: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByType.region")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val type: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByType.type")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val code: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByType.code")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val version: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByType.version")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByType.startKey")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findCodesByType.startDocumentId")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findCodesByType.limit")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "findCodesByType") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findCodesByType(region = region,type = type,code = code,version = version,startKey = startKey,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "CodeApi.findCodesByType"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListCodeDto>? != null) {
                        if ("PaginatedListCodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListCodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListCodeDto>() {}
                    })
                    assertAreEquals("findCodesByType", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a code
     *
     * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getCodeTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getCode")) {
            assertTrue(true, "Test of getCode endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCode")
                val codeId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getCode.codeId")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "getCode") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getCode(codeId = codeId)

                val testFileName = "CodeApi.getCode"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<CodeDto>? != null) {
                        if ("CodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<CodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<CodeDto>() {}
                    })
                    assertAreEquals("getCode", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a code
     *
     * Get a code based on ID or (code,type,version) as query strings. (code,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getCodeWithPartsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getCodeWithParts")) {
            assertTrue(true, "Test of getCodeWithParts endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCodeWithParts")
                val type: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getCodeWithParts.type")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "getCodeWithParts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val code: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getCodeWithParts.code")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "getCodeWithParts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val version: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getCodeWithParts.version")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "getCodeWithParts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getCodeWithParts(type = type,code = code,version = version)

                val testFileName = "CodeApi.getCodeWithParts"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<CodeDto>? != null) {
                        if ("CodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<CodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<CodeDto>() {}
                    })
                    assertAreEquals("getCodeWithParts", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a list of codes by ids
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getCodesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getCodes")) {
            assertTrue(true, "Test of getCodes endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCodes")
                val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter<ListOfIdsDto>(fileName, "getCodes.listOfIdsDto")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "getCodes") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ListOfIdsDto ?: it
                    }

                val response = api(credentialsFile).getCodes(listOfIdsDto = listOfIdsDto)

                val testFileName = "CodeApi.getCodes"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<CodeDto>? != null) {
                        if ("kotlin.collections.List<CodeDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<CodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<CodeDto>>() {}
                    })
                    assertAreEquals("getCodes", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Import codes
     *
     * Import codes from the resources XML file depending on the passed pathVariable
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun importCodesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "importCodes")) {
            assertTrue(true, "Test of importCodes endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "importCodes")
                val codeType: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "importCodes.codeType")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "importCodes") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).importCodes(codeType = codeType)

                val testFileName = "CodeApi.importCodes"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.Any>? != null) {
                        if ("kotlin.Any".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.Any>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.Any>() {}
                    })
                    assertAreEquals("importCodes", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Finding code types.
     *
     * Returns a list of code types matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listCodeTypesByTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listCodeTypesBy")) {
            assertTrue(true, "Test of listCodeTypesBy endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listCodeTypesBy")
                val region: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listCodeTypesBy.region")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listCodeTypesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val type: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listCodeTypesBy.type")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listCodeTypesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).listCodeTypesBy(region = region,type = type)

                val testFileName = "CodeApi.listCodeTypesBy"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.String>? != null) {
                        if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.String>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<kotlin.String>>() {}
                    })
                    assertAreEquals("listCodeTypesBy", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Finding codes by code, type and version
     *
     * Returns a list of codes matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listCodesByRegionTypeCodeVersionTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listCodesByRegionTypeCodeVersion")) {
            assertTrue(true, "Test of listCodesByRegionTypeCodeVersion endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listCodesByRegionTypeCodeVersion")
                val region: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listCodesByRegionTypeCodeVersion.region")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listCodesByRegionTypeCodeVersion") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val type: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listCodesByRegionTypeCodeVersion.type")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listCodesByRegionTypeCodeVersion") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val code: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listCodesByRegionTypeCodeVersion.code")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listCodesByRegionTypeCodeVersion") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val version: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listCodesByRegionTypeCodeVersion.version")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listCodesByRegionTypeCodeVersion") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).listCodesByRegionTypeCodeVersion(region = region,type = type,code = code,version = version)

                val testFileName = "CodeApi.listCodesByRegionTypeCodeVersion"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<CodeDto>? != null) {
                        if ("kotlin.collections.List<CodeDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<CodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<CodeDto>>() {}
                    })
                    assertAreEquals("listCodesByRegionTypeCodeVersion", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Finding tag types.
     *
     * Returns a list of tag types matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTagTypesByTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTagTypesBy")) {
            assertTrue(true, "Test of listTagTypesBy endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTagTypesBy")
                val region: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTagTypesBy.region")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTagTypesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val type: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTagTypesBy.type")?.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTagTypesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).listTagTypesBy(region = region,type = type)

                val testFileName = "CodeApi.listTagTypesBy"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.String>? != null) {
                        if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.String>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<kotlin.String>>() {}
                    })
                    assertAreEquals("listTagTypesBy", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get ids of code matching the provided filter for the current user (HcParty) 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun matchCodesByTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "matchCodesBy")) {
            assertTrue(true, "Test of matchCodesBy endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "matchCodesBy")
                val abstractFilterDtoCode: io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.CodeDto> = TestUtils.getParameter<io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.CodeDto>>(fileName, "matchCodesBy.abstractFilterDtoCode")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "matchCodesBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? io.icure.kraken.client.models.filter.AbstractFilterDto<io.icure.kraken.client.models.CodeDto> ?: it
                    }

                val response = api(credentialsFile).matchCodesBy(abstractFilterDtoCode = abstractFilterDtoCode)

                val testFileName = "CodeApi.matchCodesBy"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.String>? != null) {
                        if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.String>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<kotlin.String>>() {}
                    })
                    assertAreEquals("matchCodesBy", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a code
     *
     * Modification of (type, code, version) is not allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyCodeTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyCode")) {
            assertTrue(true, "Test of modifyCode endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyCode")
                val codeDto: CodeDto = TestUtils.getParameter<CodeDto>(fileName, "modifyCode.codeDto")!!.let {
                    (it as? CodeDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyCode") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getCode(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? CodeDto ?: it
                    }

                val response = api(credentialsFile).modifyCode(codeDto = codeDto)

                val testFileName = "CodeApi.modifyCode"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<CodeDto>? != null) {
                        if ("CodeDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<CodeDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<CodeDto>() {}
                    })
                    assertAreEquals("modifyCode", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    

    private suspend fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        when {
            objectFromFile as? Iterable<Any> != null -> {
                val toSkip : kotlin.collections.List<String> = when {
                    functionName.let { name -> listOf("listContact", "modifyContacts").any { name.startsWith(it) } } -> listOf("subContacts.[created, rev, modified]", "services.[openingDate]", "groupId", "created", "modified", "rev")
                    functionName.let { name -> listOf("getServices").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "openingDate")
                    functionName.let { name -> listOf("create", "new", "get", "list", "set").any { name.startsWith(it) } } -> listOf("rev", "created", "modified")
                    functionName.let { name -> listOf("modify", "delete", "undelete", "update").any { name.startsWith(it) } } -> listOf("rev")
                    functionName.let { name -> listOf("append").any { name.startsWith(it) } } -> listOf("id", "created", "modified")
                    functionName.let { name -> listOf("find", "filter").any { name.startsWith(it) } } -> listOf("rows.[created, rev, modified]", "created", "modified", "rev")
                    else -> emptyList()
                }

                val diffs = objectFromFile
                    .takeUnless { (it as ArrayList<Any>).size != (response as ArrayList<Any>).size }
                    ?.let { objectFromFile
                        .zip(response as Iterable<Any>)
                        .map { pair -> filterDiffs(pair.first, pair.second, pair.first.differences(pair.second), toSkip) }
                        .flatten()
                        .toList()
                    }
                    ?: listOf(Diff("Lists are of different sizes ${(objectFromFile as ArrayList<Any>).size} <-> ${(response as ArrayList<Any>).size}", PropertyType.ListItem, emptyList(), objectFromFile, response))
                assertTrue(diffs.isEmpty(), diffs.joinToString { it.toString() })
            }
            objectFromFile as? Flow<ByteBuffer> != null -> {
                assertTrue(objectFromFile.toList().let {
                    it.fold(0 to ByteArray(it.sumOf { it.remaining() })) { (pos, a), b ->
                        val siz = b.remaining()
                        (pos + siz) to a.also {
                            b.get(a, pos, siz)
                        }
                    }.second
                }.contentEquals(
                    (response as Flow<ByteBuffer>).toList().let {
                        it.fold(0 to ByteArray(it.sumOf { it.remaining() })) { (pos, a), b ->
                            val siz = b.remaining()
                            (pos + siz) to a.also {
                                b.get(a, pos, siz)
                            }
                        }.second
                    }
                )
                )}
            else -> {
                val toSkip : kotlin.collections.List<String> = when {
                    functionName.let { name -> listOf("modifyContact").any { name.startsWith(it) } } -> listOf("subContacts.[created, rev, modified]", "services.[openingDate]", "groupId", "created", "modified", "rev")
                    functionName.let { name -> listOf("modifyPatientReferral").any { name.startsWith(it) } } -> listOf("rev", "patientHealthCareParties.[referralPeriods]", "created", "modified")
                    functionName.let { name -> listOf("createContact").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "deletionDate", "groupId")
                    functionName.let { name -> listOf("newContactDelegations").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "groupId")
                    functionName.let { name -> listOf("create", "get", "modify", "new", "update").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "deletionDate")
                    functionName.let { name -> listOf("set", "delete", "merge").any { name.startsWith(it) } } -> listOf("rev", "created", "modified")
                    functionName.let { name -> listOf("validate").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "sentDate")
                    functionName.let { name -> listOf("reassign").any { name.startsWith(it) } } -> listOf("id", "created", "invoicingCodes.id")
                    functionName.let { name -> listOf("find").any { name.startsWith(it) } } -> listOf("rows.[created, rev, modified]")
                    else -> emptyList()
                }
                val diffs = filterDiffs(objectFromFile, response, response.differences(objectFromFile), toSkip)
                assertTrue(diffs.isEmpty(), diffs.joinToString { it.toString() })
            }
        }
    }
}
