/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.filter.AbstractFilterDto
import io.icure.kraken.client.models.ContactDto;
import io.icure.kraken.client.models.ContentDto;
import io.icure.kraken.client.models.DelegationDto;
import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.FilterChainContact;
import io.icure.kraken.client.models.FilterChainService;
import io.icure.kraken.client.models.IcureStubDto;
import io.icure.kraken.client.models.LabelledOccurenceDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.PaginatedListContactDto;
import io.icure.kraken.client.models.PaginatedListServiceDto;
import io.icure.kraken.client.models.ServiceDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for ContactApi
 */
@ExperimentalStdlibApi
class ContactApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("ContactApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("ContactApi.json")
    }

    private val api = ContactApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }


    /**
     * Close contacts for Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun closeForHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "closeForHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint closeForHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "closeForHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "closeForHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "closeForHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "closeForHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "closeForHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "closeForHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "closeForHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.closeForHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "ContactApi.closeForHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("closeForHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Create a contact with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createContactTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createContact")) {
			assert(true)
			println("Endpoint createContact skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createContact")
        val contactDto: ContactDto = TestUtils.getParameter(fileName, "createContact.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "createContact") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ContactDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createContact") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createContact(contactDto)

        val testFileName = "ContactApi.createContact"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createContact", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Create a batch of contacts
     *
     * Returns the modified contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createContacts")) {
			assert(true)
			println("Endpoint createContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createContacts")
        val contactDto: kotlin.collections.List<ContactDto> = TestUtils.getParameter(fileName, "createContacts.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "createContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createContacts(contactDto)

        val testFileName = "ContactApi.createContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Delete contacts.
     *
     * Response is a set containing the ID&#39;s of deleted contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteContacts")) {
			assert(true)
			println("Endpoint deleteContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteContacts")
        val contactIds: kotlin.String = TestUtils.getParameter(fileName, "deleteContacts.contactIds")!!
		if (contactIds as? Collection<*> == null) {
			contactIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteContacts(contactIds)

        val testFileName = "ContactApi.deleteContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts for the current user (HcParty) or the given hcparty in the filter
     *
     * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun filterContactsByTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "filterContactsBy")) {
			assert(true)
			println("Endpoint filterContactsBy skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterContactsBy")
        val filterChainContact: FilterChainContact = TestUtils.getParameter(fileName, "filterContactsBy.filterChainContact")!!
		if (filterChainContact as? Collection<*> == null) {
			filterChainContact.also {
            if (TestUtils.isAutoRev(fileName, "filterContactsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = FilterChainContact::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = filterChainContact as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterContactsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "filterContactsBy.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "filterContactsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterContactsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "filterContactsBy.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "filterContactsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterContactsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.filterContactsBy(filterChainContact,startDocumentId,limit)

        val testFileName = "ContactApi.filterContactsBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListContactDto>? != null) {
                if ("PaginatedListContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("filterContactsBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List services for the current user (HcParty) or the given hcparty in the filter
     *
     * Returns a list of contacts along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun filterServicesByTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "filterServicesBy")) {
			assert(true)
			println("Endpoint filterServicesBy skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterServicesBy")
        val filterChainService: FilterChainService = TestUtils.getParameter(fileName, "filterServicesBy.filterChainService")!!
		if (filterChainService as? Collection<*> == null) {
			filterChainService.also {
            if (TestUtils.isAutoRev(fileName, "filterServicesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = FilterChainService::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = filterChainService as? Collection<PaginatedListServiceDto> ?: emptyList<PaginatedListServiceDto>() as Collection<PaginatedListServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterServicesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "filterServicesBy.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "filterServicesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListServiceDto> ?: emptyList<PaginatedListServiceDto>() as Collection<PaginatedListServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterServicesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "filterServicesBy.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "filterServicesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListServiceDto> ?: emptyList<PaginatedListServiceDto>() as Collection<PaginatedListServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterServicesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.filterServicesBy(filterChainService,startDocumentId,limit)

        val testFileName = "ContactApi.filterServicesBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListServiceDto>? != null) {
                if ("PaginatedListServiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListServiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("filterServicesBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By Healthcare Party and form Id.
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByHCPartyFormIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByHCPartyFormId")) {
			assert(true)
			println("Endpoint findByHCPartyFormId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByHCPartyFormId")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyFormId.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyFormId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyFormId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val formId: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyFormId.formId")!!
		if (formId as? Collection<*> == null) {
			formId.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyFormId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = formId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyFormId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByHCPartyFormId(hcPartyId,formId)

        val testFileName = "ContactApi.findByHCPartyFormId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByHCPartyFormId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By Healthcare Party and form Id.
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByHCPartyFormIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByHCPartyFormIds")) {
			assert(true)
			println("Endpoint findByHCPartyFormIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByHCPartyFormIds")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyFormIds.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyFormIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyFormIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "findByHCPartyFormIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyFormIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyFormIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByHCPartyFormIds(hcPartyId,listOfIdsDto)

        val testFileName = "ContactApi.findByHCPartyFormIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByHCPartyFormIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByHCPartyPatientSecretFKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByHCPartyPatientSecretFKeys")) {
			assert(true)
			println("Endpoint findByHCPartyPatientSecretFKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByHCPartyPatientSecretFKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyPatientSecretFKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyPatientSecretFKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val planOfActionsIds: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyPatientSecretFKeys.planOfActionsIds")!!
		if (planOfActionsIds as? Collection<*> == null) {
			planOfActionsIds.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = planOfActionsIds as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val skipClosedContacts: kotlin.Boolean = TestUtils.getParameter(fileName, "findByHCPartyPatientSecretFKeys.skipClosedContacts")!!
		if (skipClosedContacts as? Collection<*> == null) {
			skipClosedContacts.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = skipClosedContacts as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyPatientSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByHCPartyPatientSecretFKeys(hcPartyId,secretFKeys,planOfActionsIds,skipClosedContacts)

        val testFileName = "ContactApi.findByHCPartyPatientSecretFKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByHCPartyPatientSecretFKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By Healthcare Party and service Id.
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByHCPartyServiceIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByHCPartyServiceId")) {
			assert(true)
			println("Endpoint findByHCPartyServiceId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByHCPartyServiceId")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyServiceId.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyServiceId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyServiceId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val serviceId: kotlin.String = TestUtils.getParameter(fileName, "findByHCPartyServiceId.serviceId")!!
		if (serviceId as? Collection<*> == null) {
			serviceId.also {
            if (TestUtils.isAutoRev(fileName, "findByHCPartyServiceId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = serviceId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHCPartyServiceId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByHCPartyServiceId(hcPartyId,serviceId)

        val testFileName = "ContactApi.findByHCPartyServiceId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByHCPartyServiceId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By externalId.
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findContactsByExternalIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findContactsByExternalId")) {
			assert(true)
			println("Endpoint findContactsByExternalId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findContactsByExternalId")
        val externalId: kotlin.String = TestUtils.getParameter(fileName, "findContactsByExternalId.externalId")!!
		if (externalId as? Collection<*> == null) {
			externalId.also {
            if (TestUtils.isAutoRev(fileName, "findContactsByExternalId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = externalId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findContactsByExternalId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findContactsByExternalId(externalId)

        val testFileName = "ContactApi.findContactsByExternalId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findContactsByExternalId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By Healthcare Party and Patient foreign keys.
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findContactsByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findContactsByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findContactsByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findContactsByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findContactsByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findContactsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findContactsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "findContactsByHCPartyPatientForeignKeys.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "findContactsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findContactsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findContactsByHCPartyPatientForeignKeys(hcPartyId,listOfIdsDto)

        val testFileName = "ContactApi.findContactsByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findContactsByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts found By Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findContactsDelegationsStubsByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findContactsDelegationsStubsByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findContactsDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findContactsDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "ContactApi.findContactsDelegationsStubsByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IcureStubDto>? != null) {
                if ("kotlin.collections.List<IcureStubDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IcureStubDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findContactsDelegationsStubsByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get a contact
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getContactTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getContact")) {
			assert(true)
			println("Endpoint getContact skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getContact")
        val contactId: kotlin.String = TestUtils.getParameter(fileName, "getContact.contactId")!!
		if (contactId as? Collection<*> == null) {
			contactId.also {
            if (TestUtils.isAutoRev(fileName, "getContact") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getContact") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getContact(contactId)

        val testFileName = "ContactApi.getContact"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getContact", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get contacts
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getContacts")) {
			assert(true)
			println("Endpoint getContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getContacts")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getContacts.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getContacts(listOfIdsDto)

        val testFileName = "ContactApi.getContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get an empty content
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getEmptyContentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getEmptyContent")) {
			assert(true)
			println("Endpoint getEmptyContent skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getEmptyContent")

        val response = api.getEmptyContent()

        val testFileName = "ContactApi.getEmptyContent"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContentDto>? != null) {
                if ("ContentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getEmptyContent", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get the list of all used codes frequencies in services
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getServiceCodesOccurencesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getServiceCodesOccurences")) {
			assert(true)
			println("Endpoint getServiceCodesOccurences skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getServiceCodesOccurences")
        val codeType: kotlin.String = TestUtils.getParameter(fileName, "getServiceCodesOccurences.codeType")!!
		if (codeType as? Collection<*> == null) {
			codeType.also {
            if (TestUtils.isAutoRev(fileName, "getServiceCodesOccurences") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = codeType as? Collection<LabelledOccurenceDto> ?: emptyList<LabelledOccurenceDto>() as Collection<LabelledOccurenceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getServiceCodesOccurences") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val minOccurences: kotlin.Long = TestUtils.getParameter(fileName, "getServiceCodesOccurences.minOccurences")!!
		if (minOccurences as? Collection<*> == null) {
			minOccurences.also {
            if (TestUtils.isAutoRev(fileName, "getServiceCodesOccurences") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = minOccurences as? Collection<LabelledOccurenceDto> ?: emptyList<LabelledOccurenceDto>() as Collection<LabelledOccurenceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getServiceCodesOccurences") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getServiceCodesOccurences(codeType,minOccurences)

        val testFileName = "ContactApi.getServiceCodesOccurences"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<LabelledOccurenceDto>? != null) {
                if ("kotlin.collections.List<LabelledOccurenceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<LabelledOccurenceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getServiceCodesOccurences", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List contacts bu opening date parties with(out) pagination
     *
     * Returns a list of contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listContactsByOpeningDateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listContactsByOpeningDate")) {
			assert(true)
			println("Endpoint listContactsByOpeningDate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listContactsByOpeningDate")
        val startKey: kotlin.Long = TestUtils.getParameter(fileName, "listContactsByOpeningDate.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val endKey: kotlin.Long = TestUtils.getParameter(fileName, "listContactsByOpeningDate.endKey")!!
		if (endKey as? Collection<*> == null) {
			endKey.also {
            if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = endKey as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcpartyid: kotlin.String = TestUtils.getParameter(fileName, "listContactsByOpeningDate.hcpartyid")!!
		if (hcpartyid as? Collection<*> == null) {
			hcpartyid.also {
            if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcpartyid as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "listContactsByOpeningDate.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "listContactsByOpeningDate.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListContactDto> ?: emptyList<PaginatedListContactDto>() as Collection<PaginatedListContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listContactsByOpeningDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listContactsByOpeningDate(startKey,endKey,hcpartyid,startDocumentId,limit)

        val testFileName = "ContactApi.listContactsByOpeningDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListContactDto>? != null) {
                if ("PaginatedListContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listContactsByOpeningDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List services with provided ids
     *
     * Returns a list of services
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listServicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listServices")) {
			assert(true)
			println("Endpoint listServices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listServices")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listServices.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listServices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ServiceDto> ?: emptyList<ServiceDto>() as Collection<ServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listServices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listServices(listOfIdsDto)

        val testFileName = "ContactApi.listServices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ServiceDto>? != null) {
                if ("kotlin.collections.List<ServiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ServiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listServices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List services by related association id
     *
     * Returns a list of services
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listServicesByAssociationIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listServicesByAssociationId")) {
			assert(true)
			println("Endpoint listServicesByAssociationId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listServicesByAssociationId")
        val associationId: kotlin.String = TestUtils.getParameter(fileName, "listServicesByAssociationId.associationId")!!
		if (associationId as? Collection<*> == null) {
			associationId.also {
            if (TestUtils.isAutoRev(fileName, "listServicesByAssociationId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = associationId as? Collection<ServiceDto> ?: emptyList<ServiceDto>() as Collection<ServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listServicesByAssociationId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listServicesByAssociationId(associationId)

        val testFileName = "ContactApi.listServicesByAssociationId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ServiceDto>? != null) {
                if ("kotlin.collections.List<ServiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ServiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listServicesByAssociationId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List services linked to provided ids
     *
     * Returns a list of services
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listServicesLinkedToTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listServicesLinkedTo")) {
			assert(true)
			println("Endpoint listServicesLinkedTo skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listServicesLinkedTo")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listServicesLinkedTo.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listServicesLinkedTo") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ServiceDto> ?: emptyList<ServiceDto>() as Collection<ServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listServicesLinkedTo") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val linkType: kotlin.String = TestUtils.getParameter(fileName, "listServicesLinkedTo.linkType")!!
		if (linkType as? Collection<*> == null) {
			linkType.also {
            if (TestUtils.isAutoRev(fileName, "listServicesLinkedTo") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = linkType as? Collection<ServiceDto> ?: emptyList<ServiceDto>() as Collection<ServiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listServicesLinkedTo") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listServicesLinkedTo(listOfIdsDto,linkType)

        val testFileName = "ContactApi.listServicesLinkedTo"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ServiceDto>? != null) {
                if ("kotlin.collections.List<ServiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ServiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listServicesLinkedTo", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get ids of contacts matching the provided filter for the current user (HcParty)
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun matchContactsByTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "matchContactsBy")) {
			assert(true)
			println("Endpoint matchContactsBy skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "matchContactsBy")
        val abstractFilterDtoContact: AbstractFilterDto<ContactDto> = TestUtils.getParameter(fileName, "matchContactsBy.abstractFilterDtoContact")!!
		if (abstractFilterDtoContact as? Collection<*> == null) {
			abstractFilterDtoContact.also {
            if (TestUtils.isAutoRev(fileName, "matchContactsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = AbstractFilterDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = abstractFilterDtoContact as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "matchContactsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.matchContactsBy(abstractFilterDtoContact)

        val testFileName = "ContactApi.matchContactsBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("matchContactsBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a contact
     *
     * Returns the modified contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyContactTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyContact")) {
			assert(true)
			println("Endpoint modifyContact skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyContact")
        val contactDto: ContactDto = TestUtils.getParameter(fileName, "modifyContact.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyContact") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = ContactDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyContact") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyContact(contactDto)

        val testFileName = "ContactApi.modifyContact"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyContact", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a batch of contacts
     *
     * Returns the modified contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyContacts")) {
			assert(true)
			println("Endpoint modifyContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyContacts")
        val contactDto: kotlin.collections.List<ContactDto> = TestUtils.getParameter(fileName, "modifyContacts.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyContacts(contactDto)

        val testFileName = "ContactApi.modifyContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Delegates a contact to a healthcare party
     *
     * It delegates a contact to a healthcare party (By current healthcare party). Returns the contact with new delegations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun newContactDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "newContactDelegations")) {
			assert(true)
			println("Endpoint newContactDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "newContactDelegations")
        val contactId: kotlin.String = TestUtils.getParameter(fileName, "newContactDelegations.contactId")!!
		if (contactId as? Collection<*> == null) {
			contactId.also {
            if (TestUtils.isAutoRev(fileName, "newContactDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactId as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newContactDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val delegationDto: DelegationDto = TestUtils.getParameter(fileName, "newContactDelegations.delegationDto")!!
		if (delegationDto as? Collection<*> == null) {
			delegationDto.also {
            if (TestUtils.isAutoRev(fileName, "newContactDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = DelegationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = delegationDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newContactDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.newContactDelegations(contactId,delegationDto)

        val testFileName = "ContactApi.newContactDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("newContactDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Update delegations in healthElements.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setContactsDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setContactsDelegations")) {
			assert(true)
			println("Endpoint setContactsDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setContactsDelegations")
        val icureStubDto: kotlin.collections.List<IcureStubDto> = TestUtils.getParameter(fileName, "setContactsDelegations.icureStubDto")!!
		if (icureStubDto as? Collection<*> == null) {
			icureStubDto.also {
            if (TestUtils.isAutoRev(fileName, "setContactsDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getContact(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = icureStubDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setContactsDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getContact(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setContactsDelegations(icureStubDto)

        val testFileName = "ContactApi.setContactsDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setContactsDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }



    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
