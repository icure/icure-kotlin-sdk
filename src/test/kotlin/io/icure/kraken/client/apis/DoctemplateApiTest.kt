/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.DocumentTemplateDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for DoctemplateApi
 */
@ExperimentalStdlibApi
class DoctemplateApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("DoctemplateApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("DoctemplateApi.json")
    }

    private val api = DoctemplateApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a document template with the current user
     *
     * Returns an instance of created document template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createDocumentTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createDocumentTemplate")) {
			assert(true)
			println("Endpoint createDocumentTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDocumentTemplate")
        val documentTemplateDto: DocumentTemplateDto = TestUtils.getParameter(fileName, "createDocumentTemplate.documentTemplateDto")!!
		if (documentTemplateDto as? Collection<*> == null) {
			documentTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "createDocumentTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = DocumentTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateDto as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createDocumentTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createDocumentTemplate(documentTemplateDto)

        val testFileName = "DoctemplateApi.createDocumentTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("DocumentTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createDocumentTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes a document template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteDocumentTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteDocumentTemplate")) {
			assert(true)
			println("Endpoint deleteDocumentTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteDocumentTemplate")
        val documentTemplateIds: kotlin.String = TestUtils.getParameter(fileName, "deleteDocumentTemplate.documentTemplateIds")!!
		if (documentTemplateIds as? Collection<*> == null) {
			documentTemplateIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteDocumentTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteDocumentTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteDocumentTemplate(documentTemplateIds)

        val testFileName = "DoctemplateApi.deleteDocumentTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteDocumentTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all document templates for all users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findAllDocumentTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findAllDocumentTemplates")) {
			assert(true)
			println("Endpoint findAllDocumentTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findAllDocumentTemplates")

        val response = api.findAllDocumentTemplates()

        val testFileName = "DoctemplateApi.findAllDocumentTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("kotlin.collections.List<DocumentTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findAllDocumentTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all document templates for current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findDocumentTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findDocumentTemplates")) {
			assert(true)
			println("Endpoint findDocumentTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findDocumentTemplates")

        val response = api.findDocumentTemplates()

        val testFileName = "DoctemplateApi.findDocumentTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("kotlin.collections.List<DocumentTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findDocumentTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all document templates by Type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findDocumentTemplatesByDocumentTypeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findDocumentTemplatesByDocumentType")) {
			assert(true)
			println("Endpoint findDocumentTemplatesByDocumentType skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findDocumentTemplatesByDocumentType")
        val documentTypeCode: kotlin.String = TestUtils.getParameter(fileName, "findDocumentTemplatesByDocumentType.documentTypeCode")!!
		if (documentTypeCode as? Collection<*> == null) {
			documentTypeCode.also {
            if (TestUtils.isAutoRev(fileName, "findDocumentTemplatesByDocumentType") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTypeCode as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findDocumentTemplatesByDocumentType") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findDocumentTemplatesByDocumentType(documentTypeCode)

        val testFileName = "DoctemplateApi.findDocumentTemplatesByDocumentType"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("kotlin.collections.List<DocumentTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findDocumentTemplatesByDocumentType", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all document templates by Type For currentUser
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findDocumentTemplatesByDocumentTypeForCurrentUserTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findDocumentTemplatesByDocumentTypeForCurrentUser")) {
			assert(true)
			println("Endpoint findDocumentTemplatesByDocumentTypeForCurrentUser skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findDocumentTemplatesByDocumentTypeForCurrentUser")
        val documentTypeCode: kotlin.String = TestUtils.getParameter(fileName, "findDocumentTemplatesByDocumentTypeForCurrentUser.documentTypeCode")!!
		if (documentTypeCode as? Collection<*> == null) {
			documentTypeCode.also {
            if (TestUtils.isAutoRev(fileName, "findDocumentTemplatesByDocumentTypeForCurrentUser") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTypeCode as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findDocumentTemplatesByDocumentTypeForCurrentUser") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findDocumentTemplatesByDocumentTypeForCurrentUser(documentTypeCode)

        val testFileName = "DoctemplateApi.findDocumentTemplatesByDocumentTypeForCurrentUser"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("kotlin.collections.List<DocumentTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findDocumentTemplatesByDocumentTypeForCurrentUser", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all document templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findDocumentTemplatesBySpecialityTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findDocumentTemplatesBySpeciality")) {
			assert(true)
			println("Endpoint findDocumentTemplatesBySpeciality skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findDocumentTemplatesBySpeciality")
        val specialityCode: kotlin.String = TestUtils.getParameter(fileName, "findDocumentTemplatesBySpeciality.specialityCode")!!
		if (specialityCode as? Collection<*> == null) {
			specialityCode.also {
            if (TestUtils.isAutoRev(fileName, "findDocumentTemplatesBySpeciality") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = specialityCode as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findDocumentTemplatesBySpeciality") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findDocumentTemplatesBySpeciality(specialityCode)

        val testFileName = "DoctemplateApi.findDocumentTemplatesBySpeciality"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("kotlin.collections.List<DocumentTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findDocumentTemplatesBySpeciality", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Download a the document template attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getAttachmentTextTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getAttachmentText")) {
			assert(true)
			println("Endpoint getAttachmentText skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getAttachmentText")
        val documentTemplateId: kotlin.String = TestUtils.getParameter(fileName, "getAttachmentText.documentTemplateId")!!
		if (documentTemplateId as? Collection<*> == null) {
			documentTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "getAttachmentText") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getAttachmentText") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val attachmentId: kotlin.String = TestUtils.getParameter(fileName, "getAttachmentText.attachmentId")!!
		if (attachmentId as? Collection<*> == null) {
			attachmentId.also {
            if (TestUtils.isAutoRev(fileName, "getAttachmentText") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = attachmentId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getAttachmentText") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getAttachmentText(documentTemplateId,attachmentId)

        val testFileName = "DoctemplateApi.getAttachmentText"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getAttachmentText", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets a document template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocumentTemplate")) {
			assert(true)
			println("Endpoint getDocumentTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocumentTemplate")
        val documentTemplateId: kotlin.String = TestUtils.getParameter(fileName, "getDocumentTemplate.documentTemplateId")!!
		if (documentTemplateId as? Collection<*> == null) {
			documentTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateId as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocumentTemplate(documentTemplateId)

        val testFileName = "DoctemplateApi.getDocumentTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("DocumentTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocumentTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Download a the document template attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentTemplateAttachmentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocumentTemplateAttachment")) {
			assert(true)
			println("Endpoint getDocumentTemplateAttachment skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocumentTemplateAttachment")
        val documentTemplateId: kotlin.String = TestUtils.getParameter(fileName, "getDocumentTemplateAttachment.documentTemplateId")!!
		if (documentTemplateId as? Collection<*> == null) {
			documentTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentTemplateAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentTemplateAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val attachmentId: kotlin.String = TestUtils.getParameter(fileName, "getDocumentTemplateAttachment.attachmentId")!!
		if (attachmentId as? Collection<*> == null) {
			attachmentId.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentTemplateAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = attachmentId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentTemplateAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocumentTemplateAttachment(documentTemplateId,attachmentId)

        val testFileName = "DoctemplateApi.getDocumentTemplateAttachment"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocumentTemplateAttachment", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Creates a document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setDocumentTemplateAttachmentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setDocumentTemplateAttachment")) {
			assert(true)
			println("Endpoint setDocumentTemplateAttachment skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setDocumentTemplateAttachment")
        val documentTemplateId: kotlin.String = TestUtils.getParameter(fileName, "setDocumentTemplateAttachment.documentTemplateId")!!
		if (documentTemplateId as? Collection<*> == null) {
			documentTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateId as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "setDocumentTemplateAttachment.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setDocumentTemplateAttachment(documentTemplateId,body)

        val testFileName = "DoctemplateApi.setDocumentTemplateAttachment"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("DocumentTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setDocumentTemplateAttachment", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Creates a document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setDocumentTemplateAttachmentJsonTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setDocumentTemplateAttachmentJson")) {
			assert(true)
			println("Endpoint setDocumentTemplateAttachmentJson skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setDocumentTemplateAttachmentJson")
        val documentTemplateId: kotlin.String = TestUtils.getParameter(fileName, "setDocumentTemplateAttachmentJson.documentTemplateId")!!
		if (documentTemplateId as? Collection<*> == null) {
			documentTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachmentJson") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateId as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachmentJson") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "setDocumentTemplateAttachmentJson.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachmentJson") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentTemplateAttachmentJson") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setDocumentTemplateAttachmentJson(documentTemplateId,body)

        val testFileName = "DoctemplateApi.setDocumentTemplateAttachmentJson"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("DocumentTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setDocumentTemplateAttachmentJson", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a document template with the current user
     *
     * Returns an instance of created document template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun updateDocumentTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "updateDocumentTemplate")) {
			assert(true)
			println("Endpoint updateDocumentTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "updateDocumentTemplate")
        val documentTemplateId: kotlin.String = TestUtils.getParameter(fileName, "updateDocumentTemplate.documentTemplateId")!!
		if (documentTemplateId as? Collection<*> == null) {
			documentTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "updateDocumentTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateId as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "updateDocumentTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val documentTemplateDto: DocumentTemplateDto = TestUtils.getParameter(fileName, "updateDocumentTemplate.documentTemplateDto")!!
		if (documentTemplateDto as? Collection<*> == null) {
			documentTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "updateDocumentTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                val rev = DocumentTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTemplateDto as? Collection<DocumentTemplateDto> ?: emptyList<DocumentTemplateDto>() as Collection<DocumentTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "updateDocumentTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDoctemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.updateDocumentTemplate(documentTemplateId,documentTemplateDto)

        val testFileName = "DoctemplateApi.updateDocumentTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentTemplateDto>? != null) {
                if ("DocumentTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("updateDocumentTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
