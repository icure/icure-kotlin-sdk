/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.DocumentDto;
import io.icure.kraken.client.models.IcureStubDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for DocumentApi
 */
@ExperimentalStdlibApi
class DocumentApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("DocumentApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("DocumentApi.json")
    }

    private val api = DocumentApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Creates a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createDocument")) {
			assert(true)
			println("Endpoint createDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDocument")
        val documentDto: DocumentDto = TestUtils.getParameter(fileName, "createDocument.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "createDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = DocumentDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createDocument(documentDto)

        val testFileName = "DocumentApi.createDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes a document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteAttachmentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteAttachment")) {
			assert(true)
			println("Endpoint deleteAttachment skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteAttachment")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "deleteAttachment.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "deleteAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteAttachment(documentId)

        val testFileName = "DocumentApi.deleteAttachment"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteAttachment", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteDocument")) {
			assert(true)
			println("Endpoint deleteDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteDocument")
        val documentIds: kotlin.String = TestUtils.getParameter(fileName, "deleteDocument.documentIds")!!
		if (documentIds as? Collection<*> == null) {
			documentIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteDocument(documentIds)

        val testFileName = "DocumentApi.deleteDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List documents found By type, By Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByTypeHCPartyMessageSecretFKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByTypeHCPartyMessageSecretFKeys")) {
			assert(true)
			println("Endpoint findByTypeHCPartyMessageSecretFKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByTypeHCPartyMessageSecretFKeys")
        val documentTypeCode: kotlin.String = TestUtils.getParameter(fileName, "findByTypeHCPartyMessageSecretFKeys.documentTypeCode")!!
		if (documentTypeCode as? Collection<*> == null) {
			documentTypeCode.also {
            if (TestUtils.isAutoRev(fileName, "findByTypeHCPartyMessageSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentTypeCode as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByTypeHCPartyMessageSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findByTypeHCPartyMessageSecretFKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByTypeHCPartyMessageSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByTypeHCPartyMessageSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findByTypeHCPartyMessageSecretFKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findByTypeHCPartyMessageSecretFKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByTypeHCPartyMessageSecretFKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByTypeHCPartyMessageSecretFKeys(documentTypeCode,hcPartyId,secretFKeys)

        val testFileName = "DocumentApi.findByTypeHCPartyMessageSecretFKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByTypeHCPartyMessageSecretFKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List documents found By Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findDocumentsByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findDocumentsByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findDocumentsByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findDocumentsByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findDocumentsByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findDocumentsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findDocumentsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findDocumentsByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findDocumentsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findDocumentsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findDocumentsByHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "DocumentApi.findDocumentsByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findDocumentsByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List documents with no delegation
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findWithoutDelegationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findWithoutDelegation")) {
			assert(true)
			println("Endpoint findWithoutDelegation skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findWithoutDelegation")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findWithoutDelegation.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findWithoutDelegation") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findWithoutDelegation") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findWithoutDelegation(limit)

        val testFileName = "DocumentApi.findWithoutDelegation"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findWithoutDelegation", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocument")) {
			assert(true)
			println("Endpoint getDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocument")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "getDocument.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "getDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocument(documentId)

        val testFileName = "DocumentApi.getDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Load document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentAttachmentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocumentAttachment")) {
			assert(true)
			println("Endpoint getDocumentAttachment skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocumentAttachment")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "getDocumentAttachment.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val attachmentId: kotlin.String = TestUtils.getParameter(fileName, "getDocumentAttachment.attachmentId")!!
		if (attachmentId as? Collection<*> == null) {
			attachmentId.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = attachmentId as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val enckeys: kotlin.String = TestUtils.getParameter(fileName, "getDocumentAttachment.enckeys")!!
		if (enckeys as? Collection<*> == null) {
			enckeys.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = enckeys as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val fileName: kotlin.String = TestUtils.getParameter(fileName, "getDocumentAttachment.fileName")!!
		if (fileName as? Collection<*> == null) {
			fileName.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = fileName as? Collection<java.io.File> ?: emptyList<java.io.File>() as Collection<java.io.File>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocumentAttachment(documentId,attachmentId,enckeys,fileName)

        val testFileName = "DocumentApi.getDocumentAttachment"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<java.io.File>? != null) {
                if ("java.io.File".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<java.io.File>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocumentAttachment", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentByExternalUuidTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocumentByExternalUuid")) {
			assert(true)
			println("Endpoint getDocumentByExternalUuid skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocumentByExternalUuid")
        val externalUuid: kotlin.String = TestUtils.getParameter(fileName, "getDocumentByExternalUuid.externalUuid")!!
		if (externalUuid as? Collection<*> == null) {
			externalUuid.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentByExternalUuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = externalUuid as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentByExternalUuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocumentByExternalUuid(externalUuid)

        val testFileName = "DocumentApi.getDocumentByExternalUuid"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocumentByExternalUuid", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocuments")) {
			assert(true)
			println("Endpoint getDocuments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocuments")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getDocuments.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocuments(listOfIdsDto)

        val testFileName = "DocumentApi.getDocuments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocuments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all documents with externalUuid
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getDocumentsByExternalUuidTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getDocumentsByExternalUuid")) {
			assert(true)
			println("Endpoint getDocumentsByExternalUuid skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getDocumentsByExternalUuid")
        val externalUuid: kotlin.String = TestUtils.getParameter(fileName, "getDocumentsByExternalUuid.externalUuid")!!
		if (externalUuid as? Collection<*> == null) {
			externalUuid.also {
            if (TestUtils.isAutoRev(fileName, "getDocumentsByExternalUuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = externalUuid as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getDocumentsByExternalUuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getDocumentsByExternalUuid(externalUuid)

        val testFileName = "DocumentApi.getDocumentsByExternalUuid"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getDocumentsByExternalUuid", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Updates a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyDocument")) {
			assert(true)
			println("Endpoint modifyDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyDocument")
        val documentDto: DocumentDto = TestUtils.getParameter(fileName, "modifyDocument.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = DocumentDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyDocument(documentDto)

        val testFileName = "DocumentApi.modifyDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Updates a batch of documents
     *
     * Returns the modified documents.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyDocumentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyDocuments")) {
			assert(true)
			println("Endpoint modifyDocuments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyDocuments")
        val documentDto: kotlin.collections.List<DocumentDto> = TestUtils.getParameter(fileName, "modifyDocuments.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<DocumentDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyDocuments(documentDto)

        val testFileName = "DocumentApi.modifyDocuments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyDocuments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Creates a document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setDocumentAttachmentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setDocumentAttachment")) {
			assert(true)
			println("Endpoint setDocumentAttachment skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setDocumentAttachment")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "setDocumentAttachment.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "setDocumentAttachment.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val enckeys: kotlin.String = TestUtils.getParameter(fileName, "setDocumentAttachment.enckeys")!!
		if (enckeys as? Collection<*> == null) {
			enckeys.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = enckeys as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setDocumentAttachment(documentId,body,enckeys)

        val testFileName = "DocumentApi.setDocumentAttachment"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setDocumentAttachment", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Creates a document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setDocumentAttachmentMultiTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setDocumentAttachmentMulti")) {
			assert(true)
			println("Endpoint setDocumentAttachmentMulti skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setDocumentAttachmentMulti")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "setDocumentAttachmentMulti.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentAttachmentMulti") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentAttachmentMulti") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val attachment: kotlin.collections.List<kotlin.ByteArray> = TestUtils.getParameter(fileName, "setDocumentAttachmentMulti.attachment")!!
		if (attachment as? Collection<*> == null) {
			attachment.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentAttachmentMulti") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.ByteArray>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = attachment as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentAttachmentMulti") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val enckeys: kotlin.String = TestUtils.getParameter(fileName, "setDocumentAttachmentMulti.enckeys")!!
		if (enckeys as? Collection<*> == null) {
			enckeys.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentAttachmentMulti") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = enckeys as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentAttachmentMulti") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setDocumentAttachmentMulti(documentId,attachment,enckeys)

        val testFileName = "DocumentApi.setDocumentAttachmentMulti"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setDocumentAttachmentMulti", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Update delegations in healthElements.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setDocumentsDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setDocumentsDelegations")) {
			assert(true)
			println("Endpoint setDocumentsDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setDocumentsDelegations")
        val icureStubDto: kotlin.collections.List<IcureStubDto> = TestUtils.getParameter(fileName, "setDocumentsDelegations.icureStubDto")!!
		if (icureStubDto as? Collection<*> == null) {
			icureStubDto.also {
            if (TestUtils.isAutoRev(fileName, "setDocumentsDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<IcureStubDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = icureStubDto as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setDocumentsDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setDocumentsDelegations(icureStubDto)

        val testFileName = "DocumentApi.setDocumentsDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IcureStubDto>? != null) {
                if ("kotlin.collections.List<IcureStubDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IcureStubDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setDocumentsDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Creates a document&#39;s attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setSafeDocumentAttachmentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setSafeDocumentAttachment")) {
			assert(true)
			println("Endpoint setSafeDocumentAttachment skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setSafeDocumentAttachment")
        val documentId: kotlin.String = TestUtils.getParameter(fileName, "setSafeDocumentAttachment.documentId")!!
		if (documentId as? Collection<*> == null) {
			documentId.also {
            if (TestUtils.isAutoRev(fileName, "setSafeDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentId as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setSafeDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val body: java.io.File = TestUtils.getParameter(fileName, "setSafeDocumentAttachment.body")!!
		if (body as? Collection<*> == null) {
			body.also {
            if (TestUtils.isAutoRev(fileName, "setSafeDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = java.io.File::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = body as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setSafeDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val enckeys: kotlin.String = TestUtils.getParameter(fileName, "setSafeDocumentAttachment.enckeys")!!
		if (enckeys as? Collection<*> == null) {
			enckeys.also {
            if (TestUtils.isAutoRev(fileName, "setSafeDocumentAttachment") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getDocument(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = enckeys as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setSafeDocumentAttachment") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getDocument(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setSafeDocumentAttachment(documentId,body,enckeys)

        val testFileName = "DocumentApi.setSafeDocumentAttachment"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setSafeDocumentAttachment", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
