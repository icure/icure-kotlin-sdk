/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.EntityTemplateDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for EntitytemplateApi
 */
@ExperimentalStdlibApi
class EntitytemplateApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("EntitytemplateApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("EntitytemplateApi.json")
    }

    private val api = EntitytemplateApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a EntityTemplate
     *
     * Type, EntityTemplate and Version are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createEntityTemplate")) {
			assert(true)
			println("Endpoint createEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createEntityTemplate")
        val entityTemplateDto: EntityTemplateDto = TestUtils.getParameter(fileName, "createEntityTemplate.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "createEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = EntityTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createEntityTemplate(entityTemplateDto)

        val testFileName = "EntitytemplateApi.createEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("EntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a batch of entityTemplates
     *
     * Returns the modified entityTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createEntityTemplates")) {
			assert(true)
			println("Endpoint createEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createEntityTemplates")
        val entityTemplateDto: kotlin.collections.List<EntityTemplateDto> = TestUtils.getParameter(fileName, "createEntityTemplates.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "createEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<EntityTemplateDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createEntityTemplates(entityTemplateDto)

        val testFileName = "EntitytemplateApi.createEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Delete entity templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteEntityTemplate")) {
			assert(true)
			println("Endpoint deleteEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteEntityTemplate")
        val entityTemplateIds: kotlin.String = TestUtils.getParameter(fileName, "deleteEntityTemplate.entityTemplateIds")!!
		if (entityTemplateIds as? Collection<*> == null) {
			entityTemplateIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteEntityTemplate(entityTemplateIds)

        val testFileName = "EntitytemplateApi.deleteEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding entityTemplates by entityTemplate, type and version with pagination.
     *
     * Returns a list of entityTemplates matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findAllEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findAllEntityTemplates")) {
			assert(true)
			println("Endpoint findAllEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findAllEntityTemplates")
        val type: kotlin.String = TestUtils.getParameter(fileName, "findAllEntityTemplates.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findAllEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAllEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val searchString: kotlin.String = TestUtils.getParameter(fileName, "findAllEntityTemplates.searchString")!!
		if (searchString as? Collection<*> == null) {
			searchString.also {
            if (TestUtils.isAutoRev(fileName, "findAllEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = searchString as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAllEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val includeEntities: kotlin.Boolean = TestUtils.getParameter(fileName, "findAllEntityTemplates.includeEntities")!!
		if (includeEntities as? Collection<*> == null) {
			includeEntities.also {
            if (TestUtils.isAutoRev(fileName, "findAllEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = includeEntities as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAllEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findAllEntityTemplates(type,searchString,includeEntities)

        val testFileName = "EntitytemplateApi.findAllEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findAllEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding entityTemplates by entityTemplate, type and version with pagination.
     *
     * Returns a list of entityTemplates matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findAllEntityTemplatesByKeywordTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findAllEntityTemplatesByKeyword")) {
			assert(true)
			println("Endpoint findAllEntityTemplatesByKeyword skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findAllEntityTemplatesByKeyword")
        val type: kotlin.String = TestUtils.getParameter(fileName, "findAllEntityTemplatesByKeyword.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findAllEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAllEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val keyword: kotlin.String = TestUtils.getParameter(fileName, "findAllEntityTemplatesByKeyword.keyword")!!
		if (keyword as? Collection<*> == null) {
			keyword.also {
            if (TestUtils.isAutoRev(fileName, "findAllEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = keyword as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAllEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val includeEntities: kotlin.Boolean = TestUtils.getParameter(fileName, "findAllEntityTemplatesByKeyword.includeEntities")!!
		if (includeEntities as? Collection<*> == null) {
			includeEntities.also {
            if (TestUtils.isAutoRev(fileName, "findAllEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = includeEntities as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findAllEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findAllEntityTemplatesByKeyword(type,keyword,includeEntities)

        val testFileName = "EntitytemplateApi.findAllEntityTemplatesByKeyword"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findAllEntityTemplatesByKeyword", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding entityTemplates by userId, entityTemplate, type and version with pagination.
     *
     * Returns a list of entityTemplates matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findEntityTemplates")) {
			assert(true)
			println("Endpoint findEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findEntityTemplates")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "findEntityTemplates.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findEntityTemplates.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val searchString: kotlin.String = TestUtils.getParameter(fileName, "findEntityTemplates.searchString")!!
		if (searchString as? Collection<*> == null) {
			searchString.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = searchString as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val includeEntities: kotlin.Boolean = TestUtils.getParameter(fileName, "findEntityTemplates.includeEntities")!!
		if (includeEntities as? Collection<*> == null) {
			includeEntities.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = includeEntities as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findEntityTemplates(userId,type,searchString,includeEntities)

        val testFileName = "EntitytemplateApi.findEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding entityTemplates by userId, type and keyword.
     *
     * Returns a list of entityTemplates matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findEntityTemplatesByKeywordTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findEntityTemplatesByKeyword")) {
			assert(true)
			println("Endpoint findEntityTemplatesByKeyword skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findEntityTemplatesByKeyword")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "findEntityTemplatesByKeyword.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findEntityTemplatesByKeyword.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val keyword: kotlin.String = TestUtils.getParameter(fileName, "findEntityTemplatesByKeyword.keyword")!!
		if (keyword as? Collection<*> == null) {
			keyword.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = keyword as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val includeEntities: kotlin.Boolean = TestUtils.getParameter(fileName, "findEntityTemplatesByKeyword.includeEntities")!!
		if (includeEntities as? Collection<*> == null) {
			includeEntities.also {
            if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = includeEntities as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findEntityTemplatesByKeyword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findEntityTemplatesByKeyword(userId,type,keyword,includeEntities)

        val testFileName = "EntitytemplateApi.findEntityTemplatesByKeyword"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findEntityTemplatesByKeyword", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a entityTemplate
     *
     * Get a entityTemplate based on ID or (entityTemplate,type,version) as query strings. (entityTemplate,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getEntityTemplate")) {
			assert(true)
			println("Endpoint getEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getEntityTemplate")
        val entityTemplateId: kotlin.String = TestUtils.getParameter(fileName, "getEntityTemplate.entityTemplateId")!!
		if (entityTemplateId as? Collection<*> == null) {
			entityTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "getEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateId as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getEntityTemplate(entityTemplateId)

        val testFileName = "EntitytemplateApi.getEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("EntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a list of entityTemplates by ids
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getEntityTemplates")) {
			assert(true)
			println("Endpoint getEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getEntityTemplates")
        val entityTemplateIds: kotlin.String = TestUtils.getParameter(fileName, "getEntityTemplates.entityTemplateIds")!!
		if (entityTemplateIds as? Collection<*> == null) {
			entityTemplateIds.also {
            if (TestUtils.isAutoRev(fileName, "getEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateIds as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getEntityTemplates(entityTemplateIds)

        val testFileName = "EntitytemplateApi.getEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a entityTemplate
     *
     * Modification of (type, entityTemplate, version) is not allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyEntityTemplate")) {
			assert(true)
			println("Endpoint modifyEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyEntityTemplate")
        val entityTemplateDto: EntityTemplateDto = TestUtils.getParameter(fileName, "modifyEntityTemplate.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = EntityTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyEntityTemplate(entityTemplateDto)

        val testFileName = "EntitytemplateApi.modifyEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("EntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of entityTemplates
     *
     * Returns the modified entityTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyEntityTemplates")) {
			assert(true)
			println("Endpoint modifyEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyEntityTemplates")
        val entityTemplateDto: kotlin.collections.List<EntityTemplateDto> = TestUtils.getParameter(fileName, "modifyEntityTemplates.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<EntityTemplateDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getEntitytemplate(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyEntityTemplates(entityTemplateDto)

        val testFileName = "EntitytemplateApi.modifyEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
