/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis

import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.FrontEndMigrationDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.infrastructure.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import kotlinx.coroutines.runBlocking
import io.icure.kraken.client.infrastructure.TestUtils
import io.icure.kraken.client.infrastructure.TestUtils.Companion.basicAuth
import io.icure.kraken.client.infrastructure.differences
import kotlin.reflect.full.callSuspendBy
import kotlin.reflect.javaType

/**
 * API tests for FrontEndMigrationApi
 */
@ExperimentalStdlibApi
class FrontEndMigrationApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("FrontEndMigrationApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("FrontEndMigrationApi.json")
    }

    fun api(fileName: String) = FrontEndMigrationApi(basePath = "https://kraken.icure.dev", authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                super.setupModule(context)
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    suspend fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    val parameters = createFunction!!.parameters.mapNotNull {
                        when(it.type.javaType) {
                            FrontEndMigrationDto::class.java -> it to objectMapper.convertValue(body, FrontEndMigrationDto::class.java)
                            FrontEndMigrationApi::class.java -> it to api(credentialsFile)
                            else -> null
                        }
                    }.toMap()


                    createFunction.callSuspendBy(parameters)
                    println("created")
                }
            }
        }
    }

    
    /**
     * Creates a front end migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createFrontEndMigrationTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "createFrontEndMigration")) {
			assert(true)
			println("Endpoint createFrontEndMigration skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createFrontEndMigration")
        val frontEndMigrationDto: FrontEndMigrationDto = TestUtils.getParameter(fileName, "createFrontEndMigration.frontEndMigrationDto")!!
		if (frontEndMigrationDto as? Collection<*> == null) {
			frontEndMigrationDto.also {
            if (TestUtils.isAutoRev(fileName, "createFrontEndMigration") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                val rev = object: TypeReference<FrontEndMigrationDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = frontEndMigrationDto as? Collection<FrontEndMigrationDto> ?: emptyList<FrontEndMigrationDto>() as Collection<FrontEndMigrationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createFrontEndMigration") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).createFrontEndMigration(frontEndMigrationDto)

        val testFileName = "FrontEndMigrationApi.createFrontEndMigration"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FrontEndMigrationDto>? != null) {
                if ("FrontEndMigrationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FrontEndMigrationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createFrontEndMigration", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Deletes a front end migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deleteFrontEndMigrationTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "deleteFrontEndMigration")) {
			assert(true)
			println("Endpoint deleteFrontEndMigration skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteFrontEndMigration")
        val frontEndMigrationId: kotlin.String = TestUtils.getParameter(fileName, "deleteFrontEndMigration.frontEndMigrationId")!!
		if (frontEndMigrationId as? Collection<*> == null) {
			frontEndMigrationId.also {
            if (TestUtils.isAutoRev(fileName, "deleteFrontEndMigration") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = frontEndMigrationId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteFrontEndMigration") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).deleteFrontEndMigration(frontEndMigrationId)

        val testFileName = "FrontEndMigrationApi.deleteFrontEndMigration"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("DocIdentifier".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteFrontEndMigration", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Gets a front end migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getFrontEndMigrationTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getFrontEndMigration")) {
			assert(true)
			println("Endpoint getFrontEndMigration skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getFrontEndMigration")
        val frontEndMigrationId: kotlin.String = TestUtils.getParameter(fileName, "getFrontEndMigration.frontEndMigrationId")!!
		if (frontEndMigrationId as? Collection<*> == null) {
			frontEndMigrationId.also {
            if (TestUtils.isAutoRev(fileName, "getFrontEndMigration") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = frontEndMigrationId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getFrontEndMigration") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getFrontEndMigration(frontEndMigrationId)

        val testFileName = "FrontEndMigrationApi.getFrontEndMigration"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FrontEndMigrationDto>? != null) {
                if ("FrontEndMigrationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FrontEndMigrationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getFrontEndMigration", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Gets an front end migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getFrontEndMigrationByNameTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getFrontEndMigrationByName")) {
			assert(true)
			println("Endpoint getFrontEndMigrationByName skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getFrontEndMigrationByName")
        val frontEndMigrationName: kotlin.String = TestUtils.getParameter(fileName, "getFrontEndMigrationByName.frontEndMigrationName")!!
		if (frontEndMigrationName as? Collection<*> == null) {
			frontEndMigrationName.also {
            if (TestUtils.isAutoRev(fileName, "getFrontEndMigrationByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = frontEndMigrationName as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getFrontEndMigrationByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getFrontEndMigrationByName(frontEndMigrationName)

        val testFileName = "FrontEndMigrationApi.getFrontEndMigrationByName"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FrontEndMigrationDto>? != null) {
                if ("kotlin.collections.List<FrontEndMigrationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FrontEndMigrationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getFrontEndMigrationByName", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Gets a front end migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getFrontEndMigrationsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getFrontEndMigrations")) {
			assert(true)
			println("Endpoint getFrontEndMigrations skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getFrontEndMigrations")

        val response = api(credentialsFile).getFrontEndMigrations()

        val testFileName = "FrontEndMigrationApi.getFrontEndMigrations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FrontEndMigrationDto>? != null) {
                if ("kotlin.collections.List<FrontEndMigrationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FrontEndMigrationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getFrontEndMigrations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    
    /**
     * Modifies a front end migration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyFrontEndMigrationTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "modifyFrontEndMigration")) {
			assert(true)
			println("Endpoint modifyFrontEndMigration skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyFrontEndMigration")
        val frontEndMigrationDto: FrontEndMigrationDto = TestUtils.getParameter(fileName, "modifyFrontEndMigration.frontEndMigrationDto")!!
		if (frontEndMigrationDto as? Collection<*> == null) {
			frontEndMigrationDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyFrontEndMigration") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                val rev = object: TypeReference<FrontEndMigrationDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = frontEndMigrationDto as? Collection<FrontEndMigrationDto> ?: emptyList<FrontEndMigrationDto>() as Collection<FrontEndMigrationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyFrontEndMigration") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getFrontEndMigration(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).modifyFrontEndMigration(frontEndMigrationDto)

        val testFileName = "FrontEndMigrationApi.modifyFrontEndMigration"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FrontEndMigrationDto>? != null) {
                if ("FrontEndMigrationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FrontEndMigrationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyFrontEndMigration", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            val diffs = response.differences(objectFromFile)
            assertTrue(diffs.isEmpty())
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
