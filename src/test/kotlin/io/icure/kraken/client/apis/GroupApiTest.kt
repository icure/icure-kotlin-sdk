/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DatabaseInitialisationDto;
import io.icure.kraken.client.models.GroupDto;
import io.icure.kraken.client.models.IdWithRevDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.ListOfPropertiesDto;
import io.icure.kraken.client.models.RegistrationInformationDto;
import io.icure.kraken.client.models.RegistrationSuccessDto;
import io.icure.kraken.client.models.ReplicationInfoDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for GroupApi
 */
@ExperimentalStdlibApi
class GroupApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("GroupApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("GroupApi.json")
    }

    private val api = GroupApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a group
     *
     * Create a new group and associated dbs.  The created group will be manageable by the users that belong to the same group as the one that called createGroup. Several tasks can be executed during the group creation like DB replications towards the created DBs, users creation and healthcare parties creation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createGroup")) {
			assert(true)
			println("Endpoint createGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createGroup")
        val id: kotlin.String = TestUtils.getParameter(fileName, "createGroup.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val name: kotlin.String = TestUtils.getParameter(fileName, "createGroup.name")!!
		if (name as? Collection<*> == null) {
			name.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = name as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val password: kotlin.String = TestUtils.getParameter(fileName, "createGroup.password")!!
		if (password as? Collection<*> == null) {
			password.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = password as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val databaseInitialisationDto: DatabaseInitialisationDto = TestUtils.getParameter(fileName, "createGroup.databaseInitialisationDto")!!
		if (databaseInitialisationDto as? Collection<*> == null) {
			databaseInitialisationDto.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = DatabaseInitialisationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = databaseInitialisationDto as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val server: kotlin.String = TestUtils.getParameter(fileName, "createGroup.server")!!
		if (server as? Collection<*> == null) {
			server.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = server as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val q: kotlin.Int = TestUtils.getParameter(fileName, "createGroup.q")!!
		if (q as? Collection<*> == null) {
			q.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = q as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val n: kotlin.Int = TestUtils.getParameter(fileName, "createGroup.n")!!
		if (n as? Collection<*> == null) {
			n.also {
            if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = n as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createGroup(id,name,password,databaseInitialisationDto,server,q,n)

        val testFileName = "GroupApi.createGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<GroupDto>? != null) {
                if ("GroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<GroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a group by id
     *
     * Get a group by id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getGroup")) {
			assert(true)
			println("Endpoint getGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getGroup")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getGroup.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getGroup(id)

        val testFileName = "GroupApi.getGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<GroupDto>? != null) {
                if ("GroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<GroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get index info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getReplicationInfo1Test(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getReplicationInfo1")) {
			assert(true)
			println("Endpoint getReplicationInfo1 skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getReplicationInfo1")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getReplicationInfo1.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getReplicationInfo1") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<ReplicationInfoDto> ?: emptyList<ReplicationInfoDto>() as Collection<ReplicationInfoDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getReplicationInfo1") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getReplicationInfo1(id)

        val testFileName = "GroupApi.getReplicationInfo1"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ReplicationInfoDto>? != null) {
                if ("ReplicationInfoDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ReplicationInfoDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getReplicationInfo1", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Init design docs
     *
     * Init design docs for provided group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun initDesignDocsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "initDesignDocs")) {
			assert(true)
			println("Endpoint initDesignDocs skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "initDesignDocs")
        val id: kotlin.String = TestUtils.getParameter(fileName, "initDesignDocs.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "initDesignDocs") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "initDesignDocs") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val clazz: kotlin.String = TestUtils.getParameter(fileName, "initDesignDocs.clazz")!!
		if (clazz as? Collection<*> == null) {
			clazz.also {
            if (TestUtils.isAutoRev(fileName, "initDesignDocs") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = clazz as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "initDesignDocs") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val warmup: kotlin.Boolean = TestUtils.getParameter(fileName, "initDesignDocs.warmup")!!
		if (warmup as? Collection<*> == null) {
			warmup.also {
            if (TestUtils.isAutoRev(fileName, "initDesignDocs") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = warmup as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "initDesignDocs") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.initDesignDocs(id,clazz,warmup)

        val testFileName = "GroupApi.initDesignDocs"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Any>? != null) {
                if ("kotlin.Any".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Any>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("initDesignDocs", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List groups
     *
     * List existing groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listGroupsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listGroups")) {
			assert(true)
			println("Endpoint listGroups skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listGroups")

        val response = api.listGroups()

        val testFileName = "GroupApi.listGroups"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<GroupDto>? != null) {
                if ("kotlin.collections.List<GroupDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<GroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listGroups", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Update group name
     *
     * Update existing group name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyGroupNameTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyGroupName")) {
			assert(true)
			println("Endpoint modifyGroupName skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyGroupName")
        val id: kotlin.String = TestUtils.getParameter(fileName, "modifyGroupName.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "modifyGroupName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyGroupName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val name: kotlin.String = TestUtils.getParameter(fileName, "modifyGroupName.name")!!
		if (name as? Collection<*> == null) {
			name.also {
            if (TestUtils.isAutoRev(fileName, "modifyGroupName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = name as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyGroupName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyGroupName(id,name)

        val testFileName = "GroupApi.modifyGroupName"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<GroupDto>? != null) {
                if ("GroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<GroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyGroupName", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Update group properties
     *
     * Update existing group properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyGroupPropertiesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyGroupProperties")) {
			assert(true)
			println("Endpoint modifyGroupProperties skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyGroupProperties")
        val id: kotlin.String = TestUtils.getParameter(fileName, "modifyGroupProperties.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "modifyGroupProperties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyGroupProperties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfPropertiesDto: ListOfPropertiesDto = TestUtils.getParameter(fileName, "modifyGroupProperties.listOfPropertiesDto")!!
		if (listOfPropertiesDto as? Collection<*> == null) {
			listOfPropertiesDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyGroupProperties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = ListOfPropertiesDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfPropertiesDto as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyGroupProperties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyGroupProperties(id,listOfPropertiesDto)

        val testFileName = "GroupApi.modifyGroupProperties"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<GroupDto>? != null) {
                if ("GroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<GroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyGroupProperties", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a group
     *
     * Create a new group and associated dbs.  The created group will be manageable by the users that belong to the same group as the one that called createGroup. Several tasks can be executed during the group creation like DB replications towards the created DBs, users creation and healthcare parties creation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun registerNewGroupAdministratorTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "registerNewGroupAdministrator")) {
			assert(true)
			println("Endpoint registerNewGroupAdministrator skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "registerNewGroupAdministrator")
        val registrationInformationDto: RegistrationInformationDto = TestUtils.getParameter(fileName, "registerNewGroupAdministrator.registrationInformationDto")!!
		if (registrationInformationDto as? Collection<*> == null) {
			registrationInformationDto.also {
            if (TestUtils.isAutoRev(fileName, "registerNewGroupAdministrator") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = RegistrationInformationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = registrationInformationDto as? Collection<RegistrationSuccessDto> ?: emptyList<RegistrationSuccessDto>() as Collection<RegistrationSuccessDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "registerNewGroupAdministrator") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.registerNewGroupAdministrator(registrationInformationDto)

        val testFileName = "GroupApi.registerNewGroupAdministrator"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<RegistrationSuccessDto>? != null) {
                if ("RegistrationSuccessDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<RegistrationSuccessDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("registerNewGroupAdministrator", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Reset storage for group
     *
     * Reset storage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resetStorageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resetStorage")) {
			assert(true)
			println("Endpoint resetStorage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resetStorage")
        val id: kotlin.String = TestUtils.getParameter(fileName, "resetStorage.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "resetStorage.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val q: kotlin.Int = TestUtils.getParameter(fileName, "resetStorage.q")!!
		if (q as? Collection<*> == null) {
			q.also {
            if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = q as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val n: kotlin.Int = TestUtils.getParameter(fileName, "resetStorage.n")!!
		if (n as? Collection<*> == null) {
			n.also {
            if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = n as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resetStorage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resetStorage(id,listOfIdsDto,q,n)

        val testFileName = "GroupApi.resetStorage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Any>? != null) {
                if ("kotlin.Any".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Any>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resetStorage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Set group password
     *
     * Update password for provided group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setGroupPasswordTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setGroupPassword")) {
			assert(true)
			println("Endpoint setGroupPassword skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setGroupPassword")
        val id: kotlin.String = TestUtils.getParameter(fileName, "setGroupPassword.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "setGroupPassword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setGroupPassword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val password: kotlin.String = TestUtils.getParameter(fileName, "setGroupPassword.password")!!
		if (password as? Collection<*> == null) {
			password.also {
            if (TestUtils.isAutoRev(fileName, "setGroupPassword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = password as? Collection<GroupDto> ?: emptyList<GroupDto>() as Collection<GroupDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setGroupPassword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setGroupPassword(id,password)

        val testFileName = "GroupApi.setGroupPassword"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<GroupDto>? != null) {
                if ("GroupDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<GroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setGroupPassword", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Solve conflicts for group
     *
     * Solve conflicts for group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun solveConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "solveConflicts")) {
			assert(true)
			println("Endpoint solveConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "solveConflicts")
        val id: kotlin.String = TestUtils.getParameter(fileName, "solveConflicts.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "solveConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<IdWithRevDto> ?: emptyList<IdWithRevDto>() as Collection<IdWithRevDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "solveConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "solveConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "solveConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<IdWithRevDto> ?: emptyList<IdWithRevDto>() as Collection<IdWithRevDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "solveConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val warmup: kotlin.Boolean = TestUtils.getParameter(fileName, "solveConflicts.warmup")!!
		if (warmup as? Collection<*> == null) {
			warmup.also {
            if (TestUtils.isAutoRev(fileName, "solveConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getGroup(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = warmup as? Collection<IdWithRevDto> ?: emptyList<IdWithRevDto>() as Collection<IdWithRevDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "solveConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getGroup(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.solveConflicts(id,limit,warmup)

        val testFileName = "GroupApi.solveConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IdWithRevDto>? != null) {
                if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IdWithRevDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("solveConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
