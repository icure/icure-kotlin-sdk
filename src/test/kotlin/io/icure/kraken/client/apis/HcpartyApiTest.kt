/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.HealthcarePartyDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.PaginatedListHealthcarePartyDto;
import io.icure.kraken.client.models.PublicKeyDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for HcpartyApi
 */
@ExperimentalStdlibApi
class HcpartyApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("HcpartyApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("HcpartyApi.json")
    }

    private val api = HcpartyApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }


    /**
     * Create a healthcare party
     *
     * One of Name or Last name+First name, Nihii, and Public key are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createHealthcarePartyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createHealthcareParty")) {
			assert(true)
			println("Endpoint createHealthcareParty skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createHealthcareParty")
        val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "createHealthcareParty.healthcarePartyDto")!!
		if (healthcarePartyDto as? Collection<*> == null) {
			healthcarePartyDto.also {
            if (TestUtils.isAutoRev(fileName, "createHealthcareParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = HealthcarePartyDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createHealthcareParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createHealthcareParty(healthcarePartyDto)

        val testFileName = "HcpartyApi.createHealthcareParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("HealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createHealthcareParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Create a healthcare party
     *
     * One of Name or Last name+First name, Nihii, and Public key are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createHealthcarePartyInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createHealthcarePartyInGroup")) {
			assert(true)
			println("Endpoint createHealthcarePartyInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createHealthcarePartyInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "createHealthcarePartyInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "createHealthcarePartyInGroup.healthcarePartyDto")!!
		if (healthcarePartyDto as? Collection<*> == null) {
			healthcarePartyDto.also {
            if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = HealthcarePartyDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createHealthcarePartyInGroup(groupId,healthcarePartyDto)

        val testFileName = "HcpartyApi.createHealthcarePartyInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("HealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createHealthcarePartyInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Delete a healthcare party
     *
     * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteHealthcarePartiesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteHealthcareParties")) {
			assert(true)
			println("Endpoint deleteHealthcareParties skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteHealthcareParties")
        val healthcarePartyIds: kotlin.String = TestUtils.getParameter(fileName, "deleteHealthcareParties.healthcarePartyIds")!!
		if (healthcarePartyIds as? Collection<*> == null) {
			healthcarePartyIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteHealthcareParties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteHealthcareParties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteHealthcareParties(healthcarePartyIds)

        val testFileName = "HcpartyApi.deleteHealthcareParties"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteHealthcareParties", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Delete a healthcare party
     *
     * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteHealthcarePartiesInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteHealthcarePartiesInGroup")) {
			assert(true)
			println("Endpoint deleteHealthcarePartiesInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteHealthcarePartiesInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "deleteHealthcarePartiesInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val healthcarePartyIds: kotlin.String = TestUtils.getParameter(fileName, "deleteHealthcarePartiesInGroup.healthcarePartyIds")!!
		if (healthcarePartyIds as? Collection<*> == null) {
			healthcarePartyIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteHealthcarePartiesInGroup(groupId,healthcarePartyIds)

        val testFileName = "HcpartyApi.deleteHealthcarePartiesInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteHealthcarePartiesInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Find healthcare parties by name with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByNameTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByName")) {
			assert(true)
			println("Endpoint findByName skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByName")
        val name: kotlin.String = TestUtils.getParameter(fileName, "findByName.name")!!
		if (name as? Collection<*> == null) {
			name.also {
            if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = name as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findByName.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findByName.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findByName.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val desc: kotlin.Boolean = TestUtils.getParameter(fileName, "findByName.desc")!!
		if (desc as? Collection<*> == null) {
			desc.also {
            if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = desc as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByName(name,startKey,startDocumentId,limit,desc)

        val testFileName = "HcpartyApi.findByName"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListHealthcarePartyDto>? != null) {
                if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByName", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Find healthcare parties by name with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findBySpecialityAndPostCodeTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findBySpecialityAndPostCode")) {
			assert(true)
			println("Endpoint findBySpecialityAndPostCode skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findBySpecialityAndPostCode")
        val type: kotlin.String = TestUtils.getParameter(fileName, "findBySpecialityAndPostCode.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val spec: kotlin.String = TestUtils.getParameter(fileName, "findBySpecialityAndPostCode.spec")!!
		if (spec as? Collection<*> == null) {
			spec.also {
            if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = spec as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val firstCode: kotlin.String = TestUtils.getParameter(fileName, "findBySpecialityAndPostCode.firstCode")!!
		if (firstCode as? Collection<*> == null) {
			firstCode.also {
            if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstCode as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val lastCode: kotlin.String = TestUtils.getParameter(fileName, "findBySpecialityAndPostCode.lastCode")!!
		if (lastCode as? Collection<*> == null) {
			lastCode.also {
            if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = lastCode as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findBySpecialityAndPostCode.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySpecialityAndPostCode") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findBySpecialityAndPostCode(type,spec,firstCode,lastCode,limit)

        val testFileName = "HcpartyApi.findBySpecialityAndPostCode"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListHealthcarePartyDto>? != null) {
                if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findBySpecialityAndPostCode", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Find healthcare parties by nihii or ssin with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findBySsinOrNihiiTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findBySsinOrNihii")) {
			assert(true)
			println("Endpoint findBySsinOrNihii skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findBySsinOrNihii")
        val searchValue: kotlin.String = TestUtils.getParameter(fileName, "findBySsinOrNihii.searchValue")!!
		if (searchValue as? Collection<*> == null) {
			searchValue.also {
            if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = searchValue as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findBySsinOrNihii.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findBySsinOrNihii.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findBySsinOrNihii.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val desc: kotlin.Boolean = TestUtils.getParameter(fileName, "findBySsinOrNihii.desc")!!
		if (desc as? Collection<*> == null) {
			desc.also {
            if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = desc as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findBySsinOrNihii") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findBySsinOrNihii(searchValue,startKey,startDocumentId,limit,desc)

        val testFileName = "HcpartyApi.findBySsinOrNihii"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListHealthcarePartyDto>? != null) {
                if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findBySsinOrNihii", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get the current healthcare party if logged in.
     *
     * General information about the current healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCurrentHealthcarePartyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCurrentHealthcareParty")) {
			assert(true)
			println("Endpoint getCurrentHealthcareParty skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCurrentHealthcareParty")

        val response = api.getCurrentHealthcareParty()

        val testFileName = "HcpartyApi.getCurrentHealthcareParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("HealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCurrentHealthcareParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get the HcParty encrypted AES keys indexed by owner
     *
     * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getHcPartyKeysForDelegateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getHcPartyKeysForDelegate")) {
			assert(true)
			println("Endpoint getHcPartyKeysForDelegate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHcPartyKeysForDelegate")
        val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "getHcPartyKeysForDelegate.healthcarePartyId")!!
		if (healthcarePartyId as? Collection<*> == null) {
			healthcarePartyId.also {
            if (TestUtils.isAutoRev(fileName, "getHcPartyKeysForDelegate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getHcPartyKeysForDelegate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getHcPartyKeysForDelegate(healthcarePartyId)

        val testFileName = "HcpartyApi.getHcPartyKeysForDelegate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.Map<kotlin.String, kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getHcPartyKeysForDelegate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get healthcareParties by their IDs
     *
     * General information about the healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getHealthcarePartiesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getHealthcareParties")) {
			assert(true)
			println("Endpoint getHealthcareParties skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHealthcareParties")
        val healthcarePartyIds: kotlin.String = TestUtils.getParameter(fileName, "getHealthcareParties.healthcarePartyIds")!!
		if (healthcarePartyIds as? Collection<*> == null) {
			healthcarePartyIds.also {
            if (TestUtils.isAutoRev(fileName, "getHealthcareParties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyIds as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getHealthcareParties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getHealthcareParties(healthcarePartyIds)

        val testFileName = "HcpartyApi.getHealthcareParties"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getHealthcareParties", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Find children of an healthcare parties
     *
     * Return a list of children hcp.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getHealthcarePartiesByParentIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getHealthcarePartiesByParentId")) {
			assert(true)
			println("Endpoint getHealthcarePartiesByParentId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHealthcarePartiesByParentId")
        val parentId: kotlin.String = TestUtils.getParameter(fileName, "getHealthcarePartiesByParentId.parentId")!!
		if (parentId as? Collection<*> == null) {
			parentId.also {
            if (TestUtils.isAutoRev(fileName, "getHealthcarePartiesByParentId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = parentId as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getHealthcarePartiesByParentId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getHealthcarePartiesByParentId(parentId)

        val testFileName = "HcpartyApi.getHealthcarePartiesByParentId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getHealthcarePartiesByParentId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get healthcareParties by their IDs
     *
     * General information about the healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getHealthcarePartiesInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getHealthcarePartiesInGroup")) {
			assert(true)
			println("Endpoint getHealthcarePartiesInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHealthcarePartiesInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "getHealthcarePartiesInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "getHealthcarePartiesInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getHealthcarePartiesInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getHealthcarePartiesInGroup.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getHealthcarePartiesInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getHealthcarePartiesInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getHealthcarePartiesInGroup(groupId,listOfIdsDto)

        val testFileName = "HcpartyApi.getHealthcarePartiesInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getHealthcarePartiesInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get a healthcareParty by his ID
     *
     * General information about the healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getHealthcarePartyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getHealthcareParty")) {
			assert(true)
			println("Endpoint getHealthcareParty skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHealthcareParty")
        val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "getHealthcareParty.healthcarePartyId")!!
		if (healthcarePartyId as? Collection<*> == null) {
			healthcarePartyId.also {
            if (TestUtils.isAutoRev(fileName, "getHealthcareParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyId as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getHealthcareParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getHealthcareParty(healthcarePartyId)

        val testFileName = "HcpartyApi.getHealthcareParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("HealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getHealthcareParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get public key of a healthcare party
     *
     * Returns the public key of a healthcare party in Hex
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getPublicKeyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getPublicKey")) {
			assert(true)
			println("Endpoint getPublicKey skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPublicKey")
        val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "getPublicKey.healthcarePartyId")!!
		if (healthcarePartyId as? Collection<*> == null) {
			healthcarePartyId.also {
            if (TestUtils.isAutoRev(fileName, "getPublicKey") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyId as? Collection<PublicKeyDto> ?: emptyList<PublicKeyDto>() as Collection<PublicKeyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPublicKey") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getPublicKey(healthcarePartyId)

        val testFileName = "HcpartyApi.getPublicKey"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PublicKeyDto>? != null) {
                if ("PublicKeyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PublicKeyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPublicKey", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Find healthcare parties by name with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByNameTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByName")) {
			assert(true)
			println("Endpoint listByName skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByName")
        val name: kotlin.String = TestUtils.getParameter(fileName, "listByName.name")!!
		if (name as? Collection<*> == null) {
			name.also {
            if (TestUtils.isAutoRev(fileName, "listByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = name as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByName(name)

        val testFileName = "HcpartyApi.listByName"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByName", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List healthcare parties with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listHealthcarePartiesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listHealthcareParties")) {
			assert(true)
			println("Endpoint listHealthcareParties skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listHealthcareParties")
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "listHealthcareParties.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "listHealthcareParties.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "listHealthcareParties.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val desc: kotlin.Boolean = TestUtils.getParameter(fileName, "listHealthcareParties.desc")!!
		if (desc as? Collection<*> == null) {
			desc.also {
            if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = desc as? Collection<PaginatedListHealthcarePartyDto> ?: emptyList<PaginatedListHealthcarePartyDto>() as Collection<PaginatedListHealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listHealthcareParties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listHealthcareParties(startKey,startDocumentId,limit,desc)

        val testFileName = "HcpartyApi.listHealthcareParties"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListHealthcarePartyDto>? != null) {
                if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listHealthcareParties", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a Healthcare Party.
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyHealthcarePartyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyHealthcareParty")) {
			assert(true)
			println("Endpoint modifyHealthcareParty skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyHealthcareParty")
        val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "modifyHealthcareParty.healthcarePartyDto")!!
		if (healthcarePartyDto as? Collection<*> == null) {
			healthcarePartyDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyHealthcareParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = HealthcarePartyDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyHealthcareParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyHealthcareParty(healthcarePartyDto)

        val testFileName = "HcpartyApi.modifyHealthcareParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("HealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyHealthcareParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a Healthcare Party.
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyHealthcarePartyInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyHealthcarePartyInGroup")) {
			assert(true)
			println("Endpoint modifyHealthcarePartyInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyHealthcarePartyInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "modifyHealthcarePartyInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "modifyHealthcarePartyInGroup.healthcarePartyDto")!!
		if (healthcarePartyDto as? Collection<*> == null) {
			healthcarePartyDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                val rev = HealthcarePartyDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getHealthcareParty(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyHealthcarePartyInGroup(groupId,healthcarePartyDto)

        val testFileName = "HcpartyApi.modifyHealthcarePartyInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthcarePartyDto>? != null) {
                if ("HealthcarePartyDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthcarePartyDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyHealthcarePartyInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }



    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
