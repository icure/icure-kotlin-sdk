/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis

import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.HealthcarePartyDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListHealthcarePartyDto
import io.icure.kraken.client.models.PublicKeyDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.infrastructure.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import kotlinx.coroutines.runBlocking
import io.icure.kraken.client.infrastructure.TestUtils
import io.icure.kraken.client.infrastructure.TestUtils.Companion.basicAuth
import io.icure.kraken.client.infrastructure.differences
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.fold
import java.nio.ByteBuffer
import kotlin.reflect.full.callSuspendBy
import kotlin.reflect.javaType
import kotlinx.coroutines.flow.flow

/**
 * API tests for HealthcarePartyApi
 */
@ExperimentalStdlibApi
class HealthcarePartyApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("HealthcarePartyApi.json")
    }

    fun api(fileName: String) = HealthcarePartyApi(basePath = "http://127.0.0.1:16043", authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                super.setupModule(context)
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    suspend fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    val parameters = createFunction!!.parameters.mapNotNull {
                        when(it.type.javaType) {
                            HealthcarePartyDto::class.java -> it to objectMapper.convertValue(body, HealthcarePartyDto::class.java)
                            HealthcarePartyApi::class.java -> it to api(credentialsFile)
                            else -> null
                        }
                    }.toMap()


                    createFunction.callSuspendBy(parameters)
                    println("created")
                }
            }
        }
    }

    
    /**
     * Create a healthcare party
     *
     * One of Name or Last name+First name, Nihii, and Public key are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createHealthcarePartyTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "createHealthcareParty")) {
                assert(true)
                println("Endpoint createHealthcareParty skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createHealthcareParty")
                val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "createHealthcareParty.healthcarePartyDto")!!
                    if (healthcarePartyDto as? Collection<*> == null) {
                        healthcarePartyDto.also {
                    if (TestUtils.isAutoRev(fileName, "createHealthcareParty") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<HealthcarePartyDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "createHealthcareParty") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).createHealthcareParty(healthcarePartyDto)

                    val testFileName = "HealthcarePartyApi.createHealthcareParty"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("HealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<HealthcarePartyDto>() {}
                        })
                        assertAreEquals("createHealthcareParty", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Create a healthcare party
     *
     * One of Name or Last name+First name, Nihii, and Public key are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createHealthcarePartyInGroupTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "createHealthcarePartyInGroup")) {
                assert(true)
                println("Endpoint createHealthcarePartyInGroup skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createHealthcarePartyInGroup")
                val groupId: kotlin.String = TestUtils.getParameter(fileName, "createHealthcarePartyInGroup.groupId")!!
                    if (groupId as? Collection<*> == null) {
                        groupId.also {
                    if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = groupId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "createHealthcarePartyInGroup.healthcarePartyDto")!!
                    if (healthcarePartyDto as? Collection<*> == null) {
                        healthcarePartyDto.also {
                    if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<HealthcarePartyDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "createHealthcarePartyInGroup") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).createHealthcarePartyInGroup(groupId,healthcarePartyDto)

                    val testFileName = "HealthcarePartyApi.createHealthcarePartyInGroup"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("HealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<HealthcarePartyDto>() {}
                        })
                        assertAreEquals("createHealthcarePartyInGroup", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Delete healthcare parties
     *
     * Deleting healthcareParties. Response is an array containing the id of deleted healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deleteHealthcarePartiesTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "deleteHealthcareParties")) {
                assert(true)
                println("Endpoint deleteHealthcareParties skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteHealthcareParties")
                val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "deleteHealthcareParties.listOfIdsDto")!!
                    if (listOfIdsDto as? Collection<*> == null) {
                        listOfIdsDto.also {
                    if (TestUtils.isAutoRev(fileName, "deleteHealthcareParties") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<ListOfIdsDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = listOfIdsDto as? Collection<ListOfIdsDto> ?: emptyList<ListOfIdsDto>() as Collection<ListOfIdsDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "deleteHealthcareParties") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).deleteHealthcareParties(listOfIdsDto)

                    val testFileName = "HealthcarePartyApi.deleteHealthcareParties"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocIdentifier>? != null) {
                            if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<DocIdentifier>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<kotlin.collections.List<DocIdentifier>>() {}
                        })
                        assertAreEquals("deleteHealthcareParties", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Delete a healthcare party
     *
     * Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deleteHealthcarePartiesInGroupTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "deleteHealthcarePartiesInGroup")) {
                assert(true)
                println("Endpoint deleteHealthcarePartiesInGroup skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteHealthcarePartiesInGroup")
                val groupId: kotlin.String = TestUtils.getParameter(fileName, "deleteHealthcarePartiesInGroup.groupId")!!
                    if (groupId as? Collection<*> == null) {
                        groupId.also {
                    if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = groupId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "deleteHealthcarePartiesInGroup.listOfIdsDto")!!
                    if (listOfIdsDto as? Collection<*> == null) {
                        listOfIdsDto.also {
                    if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<ListOfIdsDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = listOfIdsDto as? Collection<ListOfIdsDto> ?: emptyList<ListOfIdsDto>() as Collection<ListOfIdsDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "deleteHealthcarePartiesInGroup") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).deleteHealthcarePartiesInGroup(groupId,listOfIdsDto)

                    val testFileName = "HealthcarePartyApi.deleteHealthcarePartiesInGroup"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocIdentifier>? != null) {
                            if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<DocIdentifier>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<kotlin.collections.List<DocIdentifier>>() {}
                        })
                        assertAreEquals("deleteHealthcarePartiesInGroup", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * List healthcare parties with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findHealthcarePartiesByTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "findHealthcarePartiesBy")) {
                assert(true)
                println("Endpoint findHealthcarePartiesBy skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findHealthcarePartiesBy")
                val startKey: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesBy.startKey")
                    if (startKey as? Collection<*> == null) {
                        startKey.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesBy.startDocumentId")
                    if (startDocumentId as? Collection<*> == null) {
                        startDocumentId.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findHealthcarePartiesBy.limit")
                    if (limit as? Collection<*> == null) {
                        limit.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val desc: kotlin.Boolean? = TestUtils.getParameter(fileName, "findHealthcarePartiesBy.desc")
                    if (desc as? Collection<*> == null) {
                        desc.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = desc as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBy") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).findHealthcarePartiesBy(startKey,startDocumentId,limit,desc)

                    val testFileName = "HealthcarePartyApi.findHealthcarePartiesBy"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListHealthcarePartyDto>? != null) {
                            if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<PaginatedListHealthcarePartyDto>() {}
                        })
                        assertAreEquals("findHealthcarePartiesBy", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Find healthcare parties by name with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findHealthcarePartiesByNameTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "findHealthcarePartiesByName")) {
                assert(true)
                println("Endpoint findHealthcarePartiesByName skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findHealthcarePartiesByName")
                val name: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesByName.name")
                    if (name as? Collection<*> == null) {
                        name.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = name as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val startKey: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesByName.startKey")
                    if (startKey as? Collection<*> == null) {
                        startKey.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesByName.startDocumentId")
                    if (startDocumentId as? Collection<*> == null) {
                        startDocumentId.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findHealthcarePartiesByName.limit")
                    if (limit as? Collection<*> == null) {
                        limit.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val desc: kotlin.Boolean? = TestUtils.getParameter(fileName, "findHealthcarePartiesByName.desc")
                    if (desc as? Collection<*> == null) {
                        desc.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = desc as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesByName") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).findHealthcarePartiesByName(name,startKey,startDocumentId,limit,desc)

                    val testFileName = "HealthcarePartyApi.findHealthcarePartiesByName"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListHealthcarePartyDto>? != null) {
                            if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<PaginatedListHealthcarePartyDto>() {}
                        })
                        assertAreEquals("findHealthcarePartiesByName", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Find healthcare parties by name with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findHealthcarePartiesBySpecialityAndPostCodeTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "findHealthcarePartiesBySpecialityAndPostCode")) {
                assert(true)
                println("Endpoint findHealthcarePartiesBySpecialityAndPostCode skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findHealthcarePartiesBySpecialityAndPostCode")
                val type: kotlin.String = TestUtils.getParameter(fileName, "findHealthcarePartiesBySpecialityAndPostCode.type")!!
                    if (type as? Collection<*> == null) {
                        type.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = type as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val spec: kotlin.String = TestUtils.getParameter(fileName, "findHealthcarePartiesBySpecialityAndPostCode.spec")!!
                    if (spec as? Collection<*> == null) {
                        spec.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = spec as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val firstCode: kotlin.String = TestUtils.getParameter(fileName, "findHealthcarePartiesBySpecialityAndPostCode.firstCode")!!
                    if (firstCode as? Collection<*> == null) {
                        firstCode.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = firstCode as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val lastCode: kotlin.String = TestUtils.getParameter(fileName, "findHealthcarePartiesBySpecialityAndPostCode.lastCode")!!
                    if (lastCode as? Collection<*> == null) {
                        lastCode.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = lastCode as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findHealthcarePartiesBySpecialityAndPostCode.limit")
                    if (limit as? Collection<*> == null) {
                        limit.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySpecialityAndPostCode") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).findHealthcarePartiesBySpecialityAndPostCode(type,spec,firstCode,lastCode,limit)

                    val testFileName = "HealthcarePartyApi.findHealthcarePartiesBySpecialityAndPostCode"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListHealthcarePartyDto>? != null) {
                            if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<PaginatedListHealthcarePartyDto>() {}
                        })
                        assertAreEquals("findHealthcarePartiesBySpecialityAndPostCode", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Find healthcare parties by nihii or ssin with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findHealthcarePartiesBySsinOrNihiiTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "findHealthcarePartiesBySsinOrNihii")) {
                assert(true)
                println("Endpoint findHealthcarePartiesBySsinOrNihii skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findHealthcarePartiesBySsinOrNihii")
                val searchValue: kotlin.String = TestUtils.getParameter(fileName, "findHealthcarePartiesBySsinOrNihii.searchValue")!!
                    if (searchValue as? Collection<*> == null) {
                        searchValue.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = searchValue as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val startKey: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesBySsinOrNihii.startKey")
                    if (startKey as? Collection<*> == null) {
                        startKey.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findHealthcarePartiesBySsinOrNihii.startDocumentId")
                    if (startDocumentId as? Collection<*> == null) {
                        startDocumentId.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findHealthcarePartiesBySsinOrNihii.limit")
                    if (limit as? Collection<*> == null) {
                        limit.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val desc: kotlin.Boolean? = TestUtils.getParameter(fileName, "findHealthcarePartiesBySsinOrNihii.desc")
                    if (desc as? Collection<*> == null) {
                        desc.also {
                    if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = desc as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "findHealthcarePartiesBySsinOrNihii") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).findHealthcarePartiesBySsinOrNihii(searchValue,startKey,startDocumentId,limit,desc)

                    val testFileName = "HealthcarePartyApi.findHealthcarePartiesBySsinOrNihii"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListHealthcarePartyDto>? != null) {
                            if ("PaginatedListHealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<PaginatedListHealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<PaginatedListHealthcarePartyDto>() {}
                        })
                        assertAreEquals("findHealthcarePartiesBySsinOrNihii", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Get the current healthcare party if logged in.
     *
     * General information about the current healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getCurrentHealthcarePartyTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "getCurrentHealthcareParty")) {
                assert(true)
                println("Endpoint getCurrentHealthcareParty skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCurrentHealthcareParty")

                val response = api(credentialsFile).getCurrentHealthcareParty()

                    val testFileName = "HealthcarePartyApi.getCurrentHealthcareParty"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("HealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<HealthcarePartyDto>() {}
                        })
                        assertAreEquals("getCurrentHealthcareParty", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Get the HcParty encrypted AES keys indexed by owner
     *
     * (key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES key)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getHcPartyKeysForDelegateTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "getHcPartyKeysForDelegate")) {
                assert(true)
                println("Endpoint getHcPartyKeysForDelegate skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHcPartyKeysForDelegate")
                val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "getHcPartyKeysForDelegate.healthcarePartyId")!!
                    if (healthcarePartyId as? Collection<*> == null) {
                        healthcarePartyId.also {
                    if (TestUtils.isAutoRev(fileName, "getHcPartyKeysForDelegate") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "getHcPartyKeysForDelegate") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).getHcPartyKeysForDelegate(healthcarePartyId)

                    val testFileName = "HealthcarePartyApi.getHcPartyKeysForDelegate"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.String>? != null) {
                            if ("kotlin.collections.Map<kotlin.String, kotlin.String>".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<kotlin.String>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<kotlin.collections.Map<kotlin.String, kotlin.String>>() {}
                        })
                        assertAreEquals("getHcPartyKeysForDelegate", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Get healthcareParties by their IDs
     *
     * General information about the healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getHealthcarePartiesTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "getHealthcareParties")) {
                assert(true)
                println("Endpoint getHealthcareParties skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHealthcareParties")
                val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getHealthcareParties.listOfIdsDto")!!
                    if (listOfIdsDto as? Collection<*> == null) {
                        listOfIdsDto.also {
                    if (TestUtils.isAutoRev(fileName, "getHealthcareParties") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<ListOfIdsDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = listOfIdsDto as? Collection<ListOfIdsDto> ?: emptyList<ListOfIdsDto>() as Collection<ListOfIdsDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "getHealthcareParties") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).getHealthcareParties(listOfIdsDto)

                    val testFileName = "HealthcarePartyApi.getHealthcareParties"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<kotlin.collections.List<HealthcarePartyDto>>() {}
                        })
                        assertAreEquals("getHealthcareParties", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Get a healthcareParty by his ID
     *
     * General information about the healthcare Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getHealthcarePartyTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "getHealthcareParty")) {
                assert(true)
                println("Endpoint getHealthcareParty skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getHealthcareParty")
                val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "getHealthcareParty.healthcarePartyId")!!
                    if (healthcarePartyId as? Collection<*> == null) {
                        healthcarePartyId.also {
                    if (TestUtils.isAutoRev(fileName, "getHealthcareParty") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "getHealthcareParty") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).getHealthcareParty(healthcarePartyId)

                    val testFileName = "HealthcarePartyApi.getHealthcareParty"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("HealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<HealthcarePartyDto>() {}
                        })
                        assertAreEquals("getHealthcareParty", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Get public key of a healthcare party
     *
     * Returns the public key of a healthcare party in Hex
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPublicKeyTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "getPublicKey")) {
                assert(true)
                println("Endpoint getPublicKey skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPublicKey")
                val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "getPublicKey.healthcarePartyId")!!
                    if (healthcarePartyId as? Collection<*> == null) {
                        healthcarePartyId.also {
                    if (TestUtils.isAutoRev(fileName, "getPublicKey") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "getPublicKey") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).getPublicKey(healthcarePartyId)

                    val testFileName = "HealthcarePartyApi.getPublicKey"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PublicKeyDto>? != null) {
                            if ("PublicKeyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<PublicKeyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<PublicKeyDto>() {}
                        })
                        assertAreEquals("getPublicKey", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Find healthcare parties by name with(out) pagination
     *
     * Returns a list of healthcare parties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listHealthcarePartiesByNameTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "listHealthcarePartiesByName")) {
                assert(true)
                println("Endpoint listHealthcarePartiesByName skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listHealthcarePartiesByName")
                val name: kotlin.String = TestUtils.getParameter(fileName, "listHealthcarePartiesByName.name")!!
                    if (name as? Collection<*> == null) {
                        name.also {
                    if (TestUtils.isAutoRev(fileName, "listHealthcarePartiesByName") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = name as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "listHealthcarePartiesByName") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).listHealthcarePartiesByName(name)

                    val testFileName = "HealthcarePartyApi.listHealthcarePartiesByName"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<kotlin.collections.List<HealthcarePartyDto>>() {}
                        })
                        assertAreEquals("listHealthcarePartiesByName", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Find children of an healthcare parties
     *
     * Return a list of children hcp.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listHealthcarePartiesByParentIdTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "listHealthcarePartiesByParentId")) {
                assert(true)
                println("Endpoint listHealthcarePartiesByParentId skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listHealthcarePartiesByParentId")
                val parentId: kotlin.String = TestUtils.getParameter(fileName, "listHealthcarePartiesByParentId.parentId")!!
                    if (parentId as? Collection<*> == null) {
                        parentId.also {
                    if (TestUtils.isAutoRev(fileName, "listHealthcarePartiesByParentId") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = parentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "listHealthcarePartiesByParentId") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).listHealthcarePartiesByParentId(parentId)

                    val testFileName = "HealthcarePartyApi.listHealthcarePartiesByParentId"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("kotlin.collections.List<HealthcarePartyDto>".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<kotlin.collections.List<HealthcarePartyDto>>() {}
                        })
                        assertAreEquals("listHealthcarePartiesByParentId", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Modify a Healthcare Party.
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyHealthcarePartyTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "modifyHealthcareParty")) {
                assert(true)
                println("Endpoint modifyHealthcareParty skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyHealthcareParty")
                val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "modifyHealthcareParty.healthcarePartyDto")!!
                    if (healthcarePartyDto as? Collection<*> == null) {
                        healthcarePartyDto.also {
                    if (TestUtils.isAutoRev(fileName, "modifyHealthcareParty") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<HealthcarePartyDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "modifyHealthcareParty") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).modifyHealthcareParty(healthcarePartyDto)

                    val testFileName = "HealthcarePartyApi.modifyHealthcareParty"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("HealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<HealthcarePartyDto>() {}
                        })
                        assertAreEquals("modifyHealthcareParty", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    
    /**
     * Modify a Healthcare Party.
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyHealthcarePartyInGroupTest(fileName: String) = runBlocking {
        try{
            createForModification(fileName)
            if (TestUtils.skipEndpoint(fileName, "modifyHealthcarePartyInGroup")) {
                assert(true)
                println("Endpoint modifyHealthcarePartyInGroup skipped")
            } else {
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyHealthcarePartyInGroup")
                val groupId: kotlin.String = TestUtils.getParameter(fileName, "modifyHealthcarePartyInGroup.groupId")!!
                    if (groupId as? Collection<*> == null) {
                        groupId.also {
                    if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = groupId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }
                val healthcarePartyDto: HealthcarePartyDto = TestUtils.getParameter(fileName, "modifyHealthcarePartyInGroup.healthcarePartyDto")!!
                    if (healthcarePartyDto as? Collection<*> == null) {
                        healthcarePartyDto.also {
                    if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                        val id = it::class.memberProperties.first { it.name == "id" }
                        val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                        val rev = object: TypeReference<HealthcarePartyDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                        rev.setter.call(it, currentRev)
                    }
                }
                } else {
                    val paramAsCollection = healthcarePartyDto as? Collection<HealthcarePartyDto> ?: emptyList<HealthcarePartyDto>() as Collection<HealthcarePartyDto>
                    paramAsCollection.forEach {
                        if (TestUtils.isAutoRev(fileName, "modifyHealthcarePartyInGroup") && it != null) {
                            val id = it::class.memberProperties.first { it.name == "id" }

                            val currentRev = api(credentialsFile).getHealthcareParty(id.getter.call(it) as String).rev
                            val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                            rev.setter.call(it, currentRev)
                        }
                    }
                }

                val response = api(credentialsFile).modifyHealthcarePartyInGroup(groupId,healthcarePartyDto)

                    val testFileName = "HealthcarePartyApi.modifyHealthcarePartyInGroup"
                    val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                    try {
                        val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthcarePartyDto>? != null) {
                            if ("HealthcarePartyDto".contains("String>")) {
                                object : TypeReference<List<String>>() {}
                            } else {
                                object : TypeReference<List<HealthcarePartyDto>>() {}
                            }
                        } else if(response as? kotlin.collections.Map<String, String>? != null){
                            object : TypeReference<Map<String,String>>() {}
                        } else {
                            object : TypeReference<HealthcarePartyDto>() {}
                        })
                        assertAreEquals("modifyHealthcarePartyInGroup", objectFromFile, response)
                        println("Comparison successful")
                    }
                    catch (e: Exception) {
                        when (e) {
                            is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                                file.parentFile.mkdirs()
                                file.createNewFile()
                                (response as? Flow<ByteBuffer>)
                                    ?.let { it.writeToFile(file) }
                                    ?: objectMapper.writeValue(file, response)
                                assert(true)
                                println("File written")
                            }
                        }
                    }
            }
        }
        finally {
            TestUtils.deleteAfterElements("HealthcarePartyApi.json")
        }
    }
    

    private suspend fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        when {
            objectFromFile as? Iterable<Any> != null -> {
                val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
                if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                    for (fileElement in objectFromFile) {
                        fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                        fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                    }
                    for (responseElement in iterableResponse) {
                        responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                        responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                    }
                } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                    for (fileElement in objectFromFile) {
                        fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                    }
                    for (responseElement in iterableResponse) {
                        responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                    }
                }
                val diffs = response.differences(objectFromFile)
                assertTrue(diffs.isEmpty())
            }
            objectFromFile as? Flow<ByteBuffer> != null -> {
                objectFromFile.fold(ByteBuffer.allocate(0)) { acc, bb -> ByteBuffer.allocate(bb.limit()+acc.limit()).apply { this.put(acc); this.put(bb) } }.array().contentEquals(
                    (response as Flow<ByteBuffer>).fold(ByteBuffer.allocate(0)) { acc, bb -> ByteBuffer.allocate(bb.limit()+acc.limit()).apply { this.put(acc); this.put(bb) } }.array()
                )
            }
            else -> {
                if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                    assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
                } else {
                    assertEquals(objectFromFile, response)
                }
            }
        }
    }

}
