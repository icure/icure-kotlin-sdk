/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.ContactDto;
import io.icure.kraken.client.models.DocumentDto;
import io.icure.kraken.client.models.FormDto;
import io.icure.kraken.client.models.HealthElementDto;
import io.icure.kraken.client.models.IndexingInfoDto;
import io.icure.kraken.client.models.InvoiceDto;
import io.icure.kraken.client.models.MessageDto;
import io.icure.kraken.client.models.PatientDto;
import io.icure.kraken.client.models.ReplicationInfoDto;
import io.icure.kraken.client.models.ReplicatorDocument;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for IcureApi
 */
@ExperimentalStdlibApi
class IcureApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("IcureApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("IcureApi.json")
    }

    private val api = IcureApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Get index info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getIndexingInfoTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getIndexingInfo")) {
			assert(true)
			println("Endpoint getIndexingInfo skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getIndexingInfo")

        val response = api.getIndexingInfo()

        val testFileName = "IcureApi.getIndexingInfo"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IndexingInfoDto>? != null) {
                if ("IndexingInfoDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IndexingInfoDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getIndexingInfo", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get process info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getProcessInfoTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getProcessInfo")) {
			assert(true)
			println("Endpoint getProcessInfo skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getProcessInfo")

        val response = api.getProcessInfo()

        val testFileName = "IcureApi.getProcessInfo"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.String".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getProcessInfo", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get replication info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getReplicationInfoTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getReplicationInfo")) {
			assert(true)
			println("Endpoint getReplicationInfo skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getReplicationInfo")

        val response = api.getReplicationInfo()

        val testFileName = "IcureApi.getReplicationInfo"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ReplicationInfoDto>? != null) {
                if ("ReplicationInfoDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ReplicationInfoDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getReplicationInfo", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get replication info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getReplicatorInfoTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getReplicatorInfo")) {
			assert(true)
			println("Endpoint getReplicatorInfo skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getReplicatorInfo")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getReplicatorInfo.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getReplicatorInfo") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<ReplicatorDocument> ?: emptyList<ReplicatorDocument>() as Collection<ReplicatorDocument>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getReplicatorInfo") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getReplicatorInfo(id)

        val testFileName = "IcureApi.getReplicatorInfo"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ReplicatorDocument>? != null) {
                if ("ReplicatorDocument".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ReplicatorDocument>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getReplicatorInfo", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getVersionTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getVersion")) {
			assert(true)
			println("Endpoint getVersion skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getVersion")

        val response = api.getVersion()

        val testFileName = "IcureApi.getVersion"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.String".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getVersion", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Check if a user exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun isReadyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "isReady")) {
			assert(true)
			println("Endpoint isReady skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "isReady")

        val response = api.isReady()

        val testFileName = "IcureApi.isReady"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.String".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("isReady", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Resolve contacts conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolveContactsConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolveContactsConflicts")) {
			assert(true)
			println("Endpoint resolveContactsConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolveContactsConflicts")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolveContactsConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolveContactsConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveContactsConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolveContactsConflicts(limit)

        val testFileName = "IcureApi.resolveContactsConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolveContactsConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * resolve documents conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolveDocumentsConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolveDocumentsConflicts")) {
			assert(true)
			println("Endpoint resolveDocumentsConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolveDocumentsConflicts")
        val ids: kotlin.String = TestUtils.getParameter(fileName, "resolveDocumentsConflicts.ids")!!
		if (ids as? Collection<*> == null) {
			ids.also {
            if (TestUtils.isAutoRev(fileName, "resolveDocumentsConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = ids as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveDocumentsConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolveDocumentsConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolveDocumentsConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveDocumentsConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolveDocumentsConflicts(ids,limit)

        val testFileName = "IcureApi.resolveDocumentsConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolveDocumentsConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * resolve forms conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolveFormsConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolveFormsConflicts")) {
			assert(true)
			println("Endpoint resolveFormsConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolveFormsConflicts")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolveFormsConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolveFormsConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveFormsConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolveFormsConflicts(limit)

        val testFileName = "IcureApi.resolveFormsConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("kotlin.collections.List<FormDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolveFormsConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * resolve healthcare elements conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolveHealthElementsConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolveHealthElementsConflicts")) {
			assert(true)
			println("Endpoint resolveHealthElementsConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolveHealthElementsConflicts")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolveHealthElementsConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolveHealthElementsConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveHealthElementsConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolveHealthElementsConflicts(limit)

        val testFileName = "IcureApi.resolveHealthElementsConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolveHealthElementsConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * resolve invoices conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolveInvoicesConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolveInvoicesConflicts")) {
			assert(true)
			println("Endpoint resolveInvoicesConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolveInvoicesConflicts")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolveInvoicesConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolveInvoicesConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveInvoicesConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolveInvoicesConflicts(limit)

        val testFileName = "IcureApi.resolveInvoicesConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolveInvoicesConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * resolve messages conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolveMessagesConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolveMessagesConflicts")) {
			assert(true)
			println("Endpoint resolveMessagesConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolveMessagesConflicts")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolveMessagesConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolveMessagesConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolveMessagesConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolveMessagesConflicts(limit)

        val testFileName = "IcureApi.resolveMessagesConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolveMessagesConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Resolve patients conflicts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun resolvePatientsConflictsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "resolvePatientsConflicts")) {
			assert(true)
			println("Endpoint resolvePatientsConflicts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "resolvePatientsConflicts")
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "resolvePatientsConflicts.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "resolvePatientsConflicts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "resolvePatientsConflicts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.resolvePatientsConflicts(limit)

        val testFileName = "IcureApi.resolvePatientsConflicts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("resolvePatientsConflicts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Force update design doc
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun updateDesignDocTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "updateDesignDoc")) {
			assert(true)
			println("Endpoint updateDesignDoc skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "updateDesignDoc")
        val entityName: kotlin.String = TestUtils.getParameter(fileName, "updateDesignDoc.entityName")!!
		if (entityName as? Collection<*> == null) {
			entityName.also {
            if (TestUtils.isAutoRev(fileName, "updateDesignDoc") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityName as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "updateDesignDoc") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val warmup: kotlin.Boolean = TestUtils.getParameter(fileName, "updateDesignDoc.warmup")!!
		if (warmup as? Collection<*> == null) {
			warmup.also {
            if (TestUtils.isAutoRev(fileName, "updateDesignDoc") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getIcure(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = warmup as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "updateDesignDoc") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getIcure(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.updateDesignDoc(entityName,warmup)

        val testFileName = "IcureApi.updateDesignDoc"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Boolean>? != null) {
                if ("kotlin.Boolean".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Boolean>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("updateDesignDoc", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
