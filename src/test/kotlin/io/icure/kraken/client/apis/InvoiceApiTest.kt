/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DelegationDto;
import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.FilterChainInvoice;
import io.icure.kraken.client.models.IcureStubDto;
import io.icure.kraken.client.models.InvoiceDto;
import io.icure.kraken.client.models.InvoicingCodeDto;
import io.icure.kraken.client.models.LabelledOccurenceDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.PaginatedListInvoiceDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for InvoiceApi
 */
@ExperimentalStdlibApi
class InvoiceApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("InvoiceApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("InvoiceApi.json")
    }

    private val api = InvoiceApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun appendCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "appendCodes")) {
			assert(true)
			println("Endpoint appendCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "appendCodes")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "appendCodes.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "appendCodes.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sentMediumType: kotlin.String = TestUtils.getParameter(fileName, "appendCodes.sentMediumType")!!
		if (sentMediumType as? Collection<*> == null) {
			sentMediumType.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sentMediumType as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "appendCodes.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val invoicingCodeDto: kotlin.collections.List<InvoicingCodeDto> = TestUtils.getParameter(fileName, "appendCodes.invoicingCodeDto")!!
		if (invoicingCodeDto as? Collection<*> == null) {
			invoicingCodeDto.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<InvoicingCodeDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoicingCodeDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val insuranceId: kotlin.String = TestUtils.getParameter(fileName, "appendCodes.insuranceId")!!
		if (insuranceId as? Collection<*> == null) {
			insuranceId.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = insuranceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val invoiceId: kotlin.String = TestUtils.getParameter(fileName, "appendCodes.invoiceId")!!
		if (invoiceId as? Collection<*> == null) {
			invoiceId.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val gracePeriod: kotlin.Int = TestUtils.getParameter(fileName, "appendCodes.gracePeriod")!!
		if (gracePeriod as? Collection<*> == null) {
			gracePeriod.also {
            if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = gracePeriod as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "appendCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.appendCodes(userId,type,sentMediumType,secretFKeys,invoicingCodeDto,insuranceId,invoiceId,gracePeriod)

        val testFileName = "InvoiceApi.appendCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("appendCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Creates an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createInvoice")) {
			assert(true)
			println("Endpoint createInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createInvoice")
        val invoiceDto: InvoiceDto = TestUtils.getParameter(fileName, "createInvoice.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "createInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = InvoiceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createInvoice(invoiceDto)

        val testFileName = "InvoiceApi.createInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a batch of invoices
     *
     * Returns the created invoices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createInvoices")) {
			assert(true)
			println("Endpoint createInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createInvoices")
        val invoiceDto: kotlin.collections.List<InvoiceDto> = TestUtils.getParameter(fileName, "createInvoices.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "createInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<InvoiceDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createInvoices(invoiceDto)

        val testFileName = "InvoiceApi.createInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteInvoice")) {
			assert(true)
			println("Endpoint deleteInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteInvoice")
        val invoiceId: kotlin.String = TestUtils.getParameter(fileName, "deleteInvoice.invoiceId")!!
		if (invoiceId as? Collection<*> == null) {
			invoiceId.also {
            if (TestUtils.isAutoRev(fileName, "deleteInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceId as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteInvoice(invoiceId)

        val testFileName = "InvoiceApi.deleteInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("DocIdentifier".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Filter invoices for the current user (HcParty)
     *
     * Returns a list of invoices along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun filterInvoicesByTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "filterInvoicesBy")) {
			assert(true)
			println("Endpoint filterInvoicesBy skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterInvoicesBy")
        val filterChainInvoice: FilterChainInvoice = TestUtils.getParameter(fileName, "filterInvoicesBy.filterChainInvoice")!!
		if (filterChainInvoice as? Collection<*> == null) {
			filterChainInvoice.also {
            if (TestUtils.isAutoRev(fileName, "filterInvoicesBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = FilterChainInvoice::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = filterChainInvoice as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterInvoicesBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.filterInvoicesBy(filterChainInvoice)

        val testFileName = "InvoiceApi.filterInvoicesBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("filterInvoicesBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByAuthorTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByAuthor")) {
			assert(true)
			println("Endpoint findByAuthor skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByAuthor")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findByAuthor.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val fromDate: kotlin.Long = TestUtils.getParameter(fileName, "findByAuthor.fromDate")!!
		if (fromDate as? Collection<*> == null) {
			fromDate.also {
            if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = fromDate as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val toDate: kotlin.Long = TestUtils.getParameter(fileName, "findByAuthor.toDate")!!
		if (toDate as? Collection<*> == null) {
			toDate.also {
            if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = toDate as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findByAuthor.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findByAuthor.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findByAuthor.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAuthor") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByAuthor(hcPartyId,fromDate,toDate,startKey,startDocumentId,limit)

        val testFileName = "InvoiceApi.findByAuthor"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListInvoiceDto>? != null) {
                if ("PaginatedListInvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByAuthor", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List invoices found By Healthcare Party and secret foreign patient keys.
     *
     * Keys have to delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findInvoicesByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findInvoicesByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findInvoicesByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findInvoicesByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findInvoicesByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findInvoicesByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findInvoicesByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findInvoicesByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findInvoicesByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findInvoicesByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findInvoicesByHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "InvoiceApi.findInvoicesByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findInvoicesByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List helement stubs found By Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findInvoicesDelegationsStubsByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findInvoicesDelegationsStubsByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findInvoicesDelegationsStubsByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findInvoicesDelegationsStubsByHCPartyPatientForeignKeys(hcPartyId,secretFKeys)

        val testFileName = "InvoiceApi.findInvoicesDelegationsStubsByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IcureStubDto>? != null) {
                if ("kotlin.collections.List<IcureStubDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IcureStubDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findInvoicesDelegationsStubsByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getInvoice")) {
			assert(true)
			println("Endpoint getInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getInvoice")
        val invoiceId: kotlin.String = TestUtils.getParameter(fileName, "getInvoice.invoiceId")!!
		if (invoiceId as? Collection<*> == null) {
			invoiceId.also {
            if (TestUtils.isAutoRev(fileName, "getInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getInvoice(invoiceId)

        val testFileName = "InvoiceApi.getInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getInvoices")) {
			assert(true)
			println("Endpoint getInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getInvoices")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getInvoices.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getInvoices(listOfIdsDto)

        val testFileName = "InvoiceApi.getInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get the list of all used tarifications frequencies in invoices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTarificationsCodesOccurencesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTarificationsCodesOccurences")) {
			assert(true)
			println("Endpoint getTarificationsCodesOccurences skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTarificationsCodesOccurences")
        val minOccurences: kotlin.Long = TestUtils.getParameter(fileName, "getTarificationsCodesOccurences.minOccurences")!!
		if (minOccurences as? Collection<*> == null) {
			minOccurences.also {
            if (TestUtils.isAutoRev(fileName, "getTarificationsCodesOccurences") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = minOccurences as? Collection<LabelledOccurenceDto> ?: emptyList<LabelledOccurenceDto>() as Collection<LabelledOccurenceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTarificationsCodesOccurences") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTarificationsCodesOccurences(minOccurences)

        val testFileName = "InvoiceApi.getTarificationsCodesOccurences"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<LabelledOccurenceDto>? != null) {
                if ("kotlin.collections.List<LabelledOccurenceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<LabelledOccurenceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTarificationsCodesOccurences", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices per status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listAllHcpsByStatusTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listAllHcpsByStatus")) {
			assert(true)
			println("Endpoint listAllHcpsByStatus skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listAllHcpsByStatus")
        val status: kotlin.String = TestUtils.getParameter(fileName, "listAllHcpsByStatus.status")!!
		if (status as? Collection<*> == null) {
			status.also {
            if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = status as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listAllHcpsByStatus.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val from: kotlin.Long = TestUtils.getParameter(fileName, "listAllHcpsByStatus.from")!!
		if (from as? Collection<*> == null) {
			from.also {
            if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = from as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val to: kotlin.Long = TestUtils.getParameter(fileName, "listAllHcpsByStatus.to")!!
		if (to as? Collection<*> == null) {
			to.also {
            if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = to as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listAllHcpsByStatus") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listAllHcpsByStatus(status,listOfIdsDto,from,to)

        val testFileName = "InvoiceApi.listAllHcpsByStatus"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listAllHcpsByStatus", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByContactIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByContactIds")) {
			assert(true)
			println("Endpoint listByContactIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByContactIds")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listByContactIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listByContactIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByContactIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByContactIds(listOfIdsDto)

        val testFileName = "InvoiceApi.listByContactIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByContactIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List invoices by groupId
     *
     * Keys have to delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByHcPartyGroupIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByHcPartyGroupId")) {
			assert(true)
			println("Endpoint listByHcPartyGroupId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByHcPartyGroupId")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listByHcPartyGroupId.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartyGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartyGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "listByHcPartyGroupId.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartyGroupId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartyGroupId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByHcPartyGroupId(hcPartyId,groupId)

        val testFileName = "InvoiceApi.listByHcPartyGroupId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByHcPartyGroupId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List invoices by type, sent or unsent
     *
     * Keys have to delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByHcPartySentMediumTypeInvoiceTypeSentDateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate")) {
			assert(true)
			println("Endpoint listByHcPartySentMediumTypeInvoiceTypeSentDate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sentMediumType: kotlin.String = TestUtils.getParameter(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate.sentMediumType")!!
		if (sentMediumType as? Collection<*> == null) {
			sentMediumType.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sentMediumType as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val invoiceType: kotlin.String = TestUtils.getParameter(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate.invoiceType")!!
		if (invoiceType as? Collection<*> == null) {
			invoiceType.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceType as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sent: kotlin.Boolean = TestUtils.getParameter(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate.sent")!!
		if (sent as? Collection<*> == null) {
			sent.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sent as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val from: kotlin.Long = TestUtils.getParameter(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate.from")!!
		if (from as? Collection<*> == null) {
			from.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = from as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val to: kotlin.Long = TestUtils.getParameter(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate.to")!!
		if (to as? Collection<*> == null) {
			to.also {
            if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = to as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcPartySentMediumTypeInvoiceTypeSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByHcPartySentMediumTypeInvoiceTypeSentDate(hcPartyId,sentMediumType,invoiceType,sent,from,to)

        val testFileName = "InvoiceApi.listByHcPartySentMediumTypeInvoiceTypeSentDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByHcPartySentMediumTypeInvoiceTypeSentDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all invoices by author, by sending mode, by status and by date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByHcpartySendingModeStatusDateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByHcpartySendingModeStatusDate")) {
			assert(true)
			println("Endpoint listByHcpartySendingModeStatusDate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByHcpartySendingModeStatusDate")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listByHcpartySendingModeStatusDate.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sendingMode: kotlin.String = TestUtils.getParameter(fileName, "listByHcpartySendingModeStatusDate.sendingMode")!!
		if (sendingMode as? Collection<*> == null) {
			sendingMode.also {
            if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sendingMode as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val status: kotlin.String = TestUtils.getParameter(fileName, "listByHcpartySendingModeStatusDate.status")!!
		if (status as? Collection<*> == null) {
			status.also {
            if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = status as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val from: kotlin.Long = TestUtils.getParameter(fileName, "listByHcpartySendingModeStatusDate.from")!!
		if (from as? Collection<*> == null) {
			from.also {
            if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = from as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val to: kotlin.Long = TestUtils.getParameter(fileName, "listByHcpartySendingModeStatusDate.to")!!
		if (to as? Collection<*> == null) {
			to.also {
            if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = to as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByHcpartySendingModeStatusDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByHcpartySendingModeStatusDate(hcPartyId,sendingMode,status,from,to)

        val testFileName = "InvoiceApi.listByHcpartySendingModeStatusDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByHcpartySendingModeStatusDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByIds")) {
			assert(true)
			println("Endpoint listByIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByIds")
        val invoiceIds: kotlin.String = TestUtils.getParameter(fileName, "listByIds.invoiceIds")!!
		if (invoiceIds as? Collection<*> == null) {
			invoiceIds.also {
            if (TestUtils.isAutoRev(fileName, "listByIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceIds as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByIds(invoiceIds)

        val testFileName = "InvoiceApi.listByIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByRecipientsIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByRecipientsIds")) {
			assert(true)
			println("Endpoint listByRecipientsIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByRecipientsIds")
        val recipientIds: kotlin.String = TestUtils.getParameter(fileName, "listByRecipientsIds.recipientIds")!!
		if (recipientIds as? Collection<*> == null) {
			recipientIds.also {
            if (TestUtils.isAutoRev(fileName, "listByRecipientsIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = recipientIds as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByRecipientsIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByRecipientsIds(recipientIds)

        val testFileName = "InvoiceApi.listByRecipientsIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByRecipientsIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listByServiceIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listByServiceIds")) {
			assert(true)
			println("Endpoint listByServiceIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listByServiceIds")
        val serviceIds: kotlin.String = TestUtils.getParameter(fileName, "listByServiceIds.serviceIds")!!
		if (serviceIds as? Collection<*> == null) {
			serviceIds.also {
            if (TestUtils.isAutoRev(fileName, "listByServiceIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = serviceIds as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listByServiceIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listByServiceIds(serviceIds)

        val testFileName = "InvoiceApi.listByServiceIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listByServiceIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listToInsurancesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listToInsurances")) {
			assert(true)
			println("Endpoint listToInsurances skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listToInsurances")
        val userIds: kotlin.String = TestUtils.getParameter(fileName, "listToInsurances.userIds")!!
		if (userIds as? Collection<*> == null) {
			userIds.also {
            if (TestUtils.isAutoRev(fileName, "listToInsurances") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userIds as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listToInsurances") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listToInsurances(userIds)

        val testFileName = "InvoiceApi.listToInsurances"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listToInsurances", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listToInsurancesUnsentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listToInsurancesUnsent")) {
			assert(true)
			println("Endpoint listToInsurancesUnsent skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listToInsurancesUnsent")
        val userIds: kotlin.String = TestUtils.getParameter(fileName, "listToInsurancesUnsent.userIds")!!
		if (userIds as? Collection<*> == null) {
			userIds.also {
            if (TestUtils.isAutoRev(fileName, "listToInsurancesUnsent") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userIds as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listToInsurancesUnsent") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listToInsurancesUnsent(userIds)

        val testFileName = "InvoiceApi.listToInsurancesUnsent"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listToInsurancesUnsent", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listToPatientsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listToPatients")) {
			assert(true)
			println("Endpoint listToPatients skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listToPatients")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listToPatients.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listToPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listToPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listToPatients(hcPartyId)

        val testFileName = "InvoiceApi.listToPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listToPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listToPatientsUnsentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listToPatientsUnsent")) {
			assert(true)
			println("Endpoint listToPatientsUnsent skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listToPatientsUnsent")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listToPatientsUnsent.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listToPatientsUnsent") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listToPatientsUnsent") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listToPatientsUnsent(hcPartyId)

        val testFileName = "InvoiceApi.listToPatientsUnsent"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listToPatientsUnsent", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun mergeToTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "mergeTo")) {
			assert(true)
			println("Endpoint mergeTo skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "mergeTo")
        val invoiceId: kotlin.String = TestUtils.getParameter(fileName, "mergeTo.invoiceId")!!
		if (invoiceId as? Collection<*> == null) {
			invoiceId.also {
            if (TestUtils.isAutoRev(fileName, "mergeTo") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "mergeTo") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "mergeTo.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "mergeTo") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "mergeTo") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.mergeTo(invoiceId,listOfIdsDto)

        val testFileName = "InvoiceApi.mergeTo"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("mergeTo", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modifies an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyInvoice")) {
			assert(true)
			println("Endpoint modifyInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyInvoice")
        val invoiceDto: InvoiceDto = TestUtils.getParameter(fileName, "modifyInvoice.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = InvoiceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyInvoice(invoiceDto)

        val testFileName = "InvoiceApi.modifyInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of invoices
     *
     * Returns the modified invoices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyInvoices")) {
			assert(true)
			println("Endpoint modifyInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyInvoices")
        val invoiceDto: kotlin.collections.List<InvoiceDto> = TestUtils.getParameter(fileName, "modifyInvoices.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<InvoiceDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyInvoices(invoiceDto)

        val testFileName = "InvoiceApi.modifyInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Adds a delegation to a invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun newInvoiceDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "newInvoiceDelegations")) {
			assert(true)
			println("Endpoint newInvoiceDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "newInvoiceDelegations")
        val invoiceId: kotlin.String = TestUtils.getParameter(fileName, "newInvoiceDelegations.invoiceId")!!
		if (invoiceId as? Collection<*> == null) {
			invoiceId.also {
            if (TestUtils.isAutoRev(fileName, "newInvoiceDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newInvoiceDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val delegationDto: kotlin.collections.List<DelegationDto> = TestUtils.getParameter(fileName, "newInvoiceDelegations.delegationDto")!!
		if (delegationDto as? Collection<*> == null) {
			delegationDto.also {
            if (TestUtils.isAutoRev(fileName, "newInvoiceDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<DelegationDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = delegationDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newInvoiceDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.newInvoiceDelegations(invoiceId,delegationDto)

        val testFileName = "InvoiceApi.newInvoiceDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("newInvoiceDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modifies an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun reassignInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "reassignInvoice")) {
			assert(true)
			println("Endpoint reassignInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "reassignInvoice")
        val invoiceDto: InvoiceDto = TestUtils.getParameter(fileName, "reassignInvoice.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "reassignInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = InvoiceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "reassignInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.reassignInvoice(invoiceDto)

        val testFileName = "InvoiceApi.reassignInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("reassignInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun removeCodesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "removeCodes")) {
			assert(true)
			println("Endpoint removeCodes skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "removeCodes")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "removeCodes.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val serviceId: kotlin.String = TestUtils.getParameter(fileName, "removeCodes.serviceId")!!
		if (serviceId as? Collection<*> == null) {
			serviceId.also {
            if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = serviceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "removeCodes.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "removeCodes.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "removeCodes") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.removeCodes(userId,serviceId,secretFKeys,requestBody)

        val testFileName = "InvoiceApi.removeCodes"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("removeCodes", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Update delegations in healthElements.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setInvoicesDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setInvoicesDelegations")) {
			assert(true)
			println("Endpoint setInvoicesDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setInvoicesDelegations")
        val icureStubDto: kotlin.collections.List<IcureStubDto> = TestUtils.getParameter(fileName, "setInvoicesDelegations.icureStubDto")!!
		if (icureStubDto as? Collection<*> == null) {
			icureStubDto.also {
            if (TestUtils.isAutoRev(fileName, "setInvoicesDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<IcureStubDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = icureStubDto as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setInvoicesDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setInvoicesDelegations(icureStubDto)

        val testFileName = "InvoiceApi.setInvoicesDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IcureStubDto>? != null) {
                if ("kotlin.collections.List<IcureStubDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IcureStubDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setInvoicesDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all invoices for author at date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun validateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "validate")) {
			assert(true)
			println("Endpoint validate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "validate")
        val invoiceId: kotlin.String = TestUtils.getParameter(fileName, "validate.invoiceId")!!
		if (invoiceId as? Collection<*> == null) {
			invoiceId.also {
            if (TestUtils.isAutoRev(fileName, "validate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceId as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val scheme: kotlin.String = TestUtils.getParameter(fileName, "validate.scheme")!!
		if (scheme as? Collection<*> == null) {
			scheme.also {
            if (TestUtils.isAutoRev(fileName, "validate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = scheme as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val forcedValue: kotlin.String = TestUtils.getParameter(fileName, "validate.forcedValue")!!
		if (forcedValue as? Collection<*> == null) {
			forcedValue.also {
            if (TestUtils.isAutoRev(fileName, "validate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = forcedValue as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "validate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getInvoice(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.validate(invoiceId,scheme,forcedValue)

        val testFileName = "InvoiceApi.validate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("validate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
