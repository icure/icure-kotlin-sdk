/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DelegationDto;
import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.IcureStubDto;
import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.MessageDto;
import io.icure.kraken.client.models.MessagesReadStatusUpdate;
import io.icure.kraken.client.models.PaginatedListMessageDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for MessageApi
 */
@ExperimentalStdlibApi
class MessageApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("MessageApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("MessageApi.json")
    }

    private val api = MessageApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Creates a message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createMessage")) {
			assert(true)
			println("Endpoint createMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createMessage")
        val messageDto: MessageDto = TestUtils.getParameter(fileName, "createMessage.messageDto")!!
		if (messageDto as? Collection<*> == null) {
			messageDto.also {
            if (TestUtils.isAutoRev(fileName, "createMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = MessageDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createMessage(messageDto)

        val testFileName = "MessageApi.createMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes a message delegation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteDelegationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteDelegation")) {
			assert(true)
			println("Endpoint deleteDelegation skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteDelegation")
        val messageId: kotlin.String = TestUtils.getParameter(fileName, "deleteDelegation.messageId")!!
		if (messageId as? Collection<*> == null) {
			messageId.also {
            if (TestUtils.isAutoRev(fileName, "deleteDelegation") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageId as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteDelegation") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val delegateId: kotlin.String = TestUtils.getParameter(fileName, "deleteDelegation.delegateId")!!
		if (delegateId as? Collection<*> == null) {
			delegateId.also {
            if (TestUtils.isAutoRev(fileName, "deleteDelegation") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = delegateId as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteDelegation") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteDelegation(messageId,delegateId)

        val testFileName = "MessageApi.deleteDelegation"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteDelegation", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes multiple messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteMessages")) {
			assert(true)
			println("Endpoint deleteMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteMessages")
        val messageIds: kotlin.String = TestUtils.getParameter(fileName, "deleteMessages.messageIds")!!
		if (messageIds as? Collection<*> == null) {
			messageIds.also {
            if (TestUtils.isAutoRev(fileName, "deleteMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteMessages(messageIds)

        val testFileName = "MessageApi.deleteMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes multiple messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteMessagesBatchTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteMessagesBatch")) {
			assert(true)
			println("Endpoint deleteMessagesBatch skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteMessagesBatch")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "deleteMessagesBatch.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "deleteMessagesBatch") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteMessagesBatch") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteMessagesBatch(listOfIdsDto)

        val testFileName = "MessageApi.deleteMessagesBatch"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteMessagesBatch", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all messages (paginated) for current HC Party
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findMessages")) {
			assert(true)
			println("Endpoint findMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findMessages")
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findMessages.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findMessages.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findMessages.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findMessages(startKey,startDocumentId,limit)

        val testFileName = "MessageApi.findMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListMessageDto>? != null) {
                if ("PaginatedListMessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListMessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all messages (paginated) for current HC Party and provided from address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findMessagesByFromAddressTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findMessagesByFromAddress")) {
			assert(true)
			println("Endpoint findMessagesByFromAddress skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findMessagesByFromAddress")
        val fromAddress: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByFromAddress.fromAddress")!!
		if (fromAddress as? Collection<*> == null) {
			fromAddress.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = fromAddress as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByFromAddress.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByFromAddress.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findMessagesByFromAddress.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcpId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByFromAddress.hcpId")!!
		if (hcpId as? Collection<*> == null) {
			hcpId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcpId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByFromAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findMessagesByFromAddress(fromAddress,startKey,startDocumentId,limit,hcpId)

        val testFileName = "MessageApi.findMessagesByFromAddress"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListMessageDto>? != null) {
                if ("PaginatedListMessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListMessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findMessagesByFromAddress", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List messages found By Healthcare Party and secret foreign keys.
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findMessagesByHCPartyPatientForeignKeysTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findMessagesByHCPartyPatientForeignKeys")) {
			assert(true)
			println("Endpoint findMessagesByHCPartyPatientForeignKeys skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findMessagesByHCPartyPatientForeignKeys")
        val secretFKeys: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByHCPartyPatientForeignKeys.secretFKeys")!!
		if (secretFKeys as? Collection<*> == null) {
			secretFKeys.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByHCPartyPatientForeignKeys") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = secretFKeys as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByHCPartyPatientForeignKeys") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findMessagesByHCPartyPatientForeignKeys(secretFKeys)

        val testFileName = "MessageApi.findMessagesByHCPartyPatientForeignKeys"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findMessagesByHCPartyPatientForeignKeys", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all messages (paginated) for current HC Party and provided to address
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findMessagesByToAddressTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findMessagesByToAddress")) {
			assert(true)
			println("Endpoint findMessagesByToAddress skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findMessagesByToAddress")
        val toAddress: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByToAddress.toAddress")!!
		if (toAddress as? Collection<*> == null) {
			toAddress.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = toAddress as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByToAddress.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByToAddress.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findMessagesByToAddress.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val reverse: kotlin.Boolean = TestUtils.getParameter(fileName, "findMessagesByToAddress.reverse")!!
		if (reverse as? Collection<*> == null) {
			reverse.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = reverse as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcpId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByToAddress.hcpId")!!
		if (hcpId as? Collection<*> == null) {
			hcpId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcpId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByToAddress") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findMessagesByToAddress(toAddress,startKey,startDocumentId,limit,reverse,hcpId)

        val testFileName = "MessageApi.findMessagesByToAddress"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListMessageDto>? != null) {
                if ("PaginatedListMessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListMessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findMessagesByToAddress", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all messages (paginated) for current HC Party and provided transportGuid
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findMessagesByTransportGuidTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findMessagesByTransportGuid")) {
			assert(true)
			println("Endpoint findMessagesByTransportGuid skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findMessagesByTransportGuid")
        val transportGuid: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuid.transportGuid")!!
		if (transportGuid as? Collection<*> == null) {
			transportGuid.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = transportGuid as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val received: kotlin.Boolean = TestUtils.getParameter(fileName, "findMessagesByTransportGuid.received")!!
		if (received as? Collection<*> == null) {
			received.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Boolean::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = received as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuid.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuid.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findMessagesByTransportGuid.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcpId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuid.hcpId")!!
		if (hcpId as? Collection<*> == null) {
			hcpId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcpId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuid") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findMessagesByTransportGuid(transportGuid,received,startKey,startDocumentId,limit,hcpId)

        val testFileName = "MessageApi.findMessagesByTransportGuid"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListMessageDto>? != null) {
                if ("PaginatedListMessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListMessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findMessagesByTransportGuid", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all messages starting by a prefix between two date
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findMessagesByTransportGuidSentDateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findMessagesByTransportGuidSentDate")) {
			assert(true)
			println("Endpoint findMessagesByTransportGuidSentDate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findMessagesByTransportGuidSentDate")
        val from: kotlin.Long = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.from")!!
		if (from as? Collection<*> == null) {
			from.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = from as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val to: kotlin.Long = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.to")!!
		if (to as? Collection<*> == null) {
			to.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Long::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = to as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val transportGuid: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.transportGuid")!!
		if (transportGuid as? Collection<*> == null) {
			transportGuid.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = transportGuid as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val hcpId: kotlin.String = TestUtils.getParameter(fileName, "findMessagesByTransportGuidSentDate.hcpId")!!
		if (hcpId as? Collection<*> == null) {
			hcpId.also {
            if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcpId as? Collection<PaginatedListMessageDto> ?: emptyList<PaginatedListMessageDto>() as Collection<PaginatedListMessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findMessagesByTransportGuidSentDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findMessagesByTransportGuidSentDate(from,to,transportGuid,startKey,startDocumentId,limit,hcpId)

        val testFileName = "MessageApi.findMessagesByTransportGuidSentDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListMessageDto>? != null) {
                if ("PaginatedListMessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListMessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findMessagesByTransportGuidSentDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get children messages of provided message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getChildrenMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getChildrenMessages")) {
			assert(true)
			println("Endpoint getChildrenMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getChildrenMessages")
        val messageId: kotlin.String = TestUtils.getParameter(fileName, "getChildrenMessages.messageId")!!
		if (messageId as? Collection<*> == null) {
			messageId.also {
            if (TestUtils.isAutoRev(fileName, "getChildrenMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageId as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getChildrenMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getChildrenMessages(messageId)

        val testFileName = "MessageApi.getChildrenMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getChildrenMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get children messages of provided message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getChildrenMessagesOfListTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getChildrenMessagesOfList")) {
			assert(true)
			println("Endpoint getChildrenMessagesOfList skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getChildrenMessagesOfList")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getChildrenMessagesOfList.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getChildrenMessagesOfList") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getChildrenMessagesOfList") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getChildrenMessagesOfList(listOfIdsDto)

        val testFileName = "MessageApi.getChildrenMessagesOfList"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getChildrenMessagesOfList", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets a message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getMessage")) {
			assert(true)
			println("Endpoint getMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getMessage")
        val messageId: kotlin.String = TestUtils.getParameter(fileName, "getMessage.messageId")!!
		if (messageId as? Collection<*> == null) {
			messageId.also {
            if (TestUtils.isAutoRev(fileName, "getMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageId as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getMessage(messageId)

        val testFileName = "MessageApi.getMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get children messages of provided message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listMessagesByInvoiceIdsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listMessagesByInvoiceIds")) {
			assert(true)
			println("Endpoint listMessagesByInvoiceIds skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listMessagesByInvoiceIds")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listMessagesByInvoiceIds.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listMessagesByInvoiceIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listMessagesByInvoiceIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listMessagesByInvoiceIds(listOfIdsDto)

        val testFileName = "MessageApi.listMessagesByInvoiceIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listMessagesByInvoiceIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get all messages for current HC Party and provided transportGuids
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listMessagesByTransportGuidsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listMessagesByTransportGuids")) {
			assert(true)
			println("Endpoint listMessagesByTransportGuids skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listMessagesByTransportGuids")
        val hcpId: kotlin.String = TestUtils.getParameter(fileName, "listMessagesByTransportGuids.hcpId")!!
		if (hcpId as? Collection<*> == null) {
			hcpId.also {
            if (TestUtils.isAutoRev(fileName, "listMessagesByTransportGuids") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcpId as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listMessagesByTransportGuids") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "listMessagesByTransportGuids.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "listMessagesByTransportGuids") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listMessagesByTransportGuids") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listMessagesByTransportGuids(hcpId,listOfIdsDto)

        val testFileName = "MessageApi.listMessagesByTransportGuids"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listMessagesByTransportGuids", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Updates a message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyMessage")) {
			assert(true)
			println("Endpoint modifyMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyMessage")
        val messageDto: MessageDto = TestUtils.getParameter(fileName, "modifyMessage.messageDto")!!
		if (messageDto as? Collection<*> == null) {
			messageDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = MessageDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyMessage(messageDto)

        val testFileName = "MessageApi.modifyMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Adds a delegation to a message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun newMessageDelegationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "newMessageDelegations")) {
			assert(true)
			println("Endpoint newMessageDelegations skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "newMessageDelegations")
        val messageId: kotlin.String = TestUtils.getParameter(fileName, "newMessageDelegations.messageId")!!
		if (messageId as? Collection<*> == null) {
			messageId.also {
            if (TestUtils.isAutoRev(fileName, "newMessageDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageId as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newMessageDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val delegationDto: kotlin.collections.List<DelegationDto> = TestUtils.getParameter(fileName, "newMessageDelegations.delegationDto")!!
		if (delegationDto as? Collection<*> == null) {
			delegationDto.also {
            if (TestUtils.isAutoRev(fileName, "newMessageDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<DelegationDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = delegationDto as? Collection<IcureStubDto> ?: emptyList<IcureStubDto>() as Collection<IcureStubDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newMessageDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.newMessageDelegations(messageId,delegationDto)

        val testFileName = "MessageApi.newMessageDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IcureStubDto>? != null) {
                if ("IcureStubDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IcureStubDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("newMessageDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Set read status for given list of messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setMessagesReadStatusTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setMessagesReadStatus")) {
			assert(true)
			println("Endpoint setMessagesReadStatus skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setMessagesReadStatus")
        val messagesReadStatusUpdate: MessagesReadStatusUpdate = TestUtils.getParameter(fileName, "setMessagesReadStatus.messagesReadStatusUpdate")!!
		if (messagesReadStatusUpdate as? Collection<*> == null) {
			messagesReadStatusUpdate.also {
            if (TestUtils.isAutoRev(fileName, "setMessagesReadStatus") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = MessagesReadStatusUpdate::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messagesReadStatusUpdate as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setMessagesReadStatus") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setMessagesReadStatus(messagesReadStatusUpdate)

        val testFileName = "MessageApi.setMessagesReadStatus"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setMessagesReadStatus", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Set status bits for given list of messages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun setMessagesStatusBitsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "setMessagesStatusBits")) {
			assert(true)
			println("Endpoint setMessagesStatusBits skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "setMessagesStatusBits")
        val status: kotlin.Int = TestUtils.getParameter(fileName, "setMessagesStatusBits.status")!!
		if (status as? Collection<*> == null) {
			status.also {
            if (TestUtils.isAutoRev(fileName, "setMessagesStatusBits") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = status as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setMessagesStatusBits") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "setMessagesStatusBits.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "setMessagesStatusBits") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getMessage(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "setMessagesStatusBits") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getMessage(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.setMessagesStatusBits(status,listOfIdsDto)

        val testFileName = "MessageApi.setMessagesStatusBits"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("setMessagesStatusBits", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
