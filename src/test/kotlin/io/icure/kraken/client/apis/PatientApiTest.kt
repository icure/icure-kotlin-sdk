/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis

import io.icure.kraken.client.models.AbstractFilterDtoPatient
import io.icure.kraken.client.models.ContentDto
import io.icure.kraken.client.models.DelegationDto
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.FilterChainPatient
import io.icure.kraken.client.models.IdWithRevDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListPatientDto
import io.icure.kraken.client.models.PaginatedListString
import io.icure.kraken.client.models.PatientDto
import io.icure.kraken.client.models.PatientRegistrationSuccessDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.infrastructure.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import io.icure.kraken.client.models.filter.AbstractFilterDto

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import kotlinx.coroutines.runBlocking
import io.icure.kraken.client.infrastructure.TestUtils
import io.icure.kraken.client.infrastructure.TestUtils.Companion.basicAuth
import io.icure.kraken.client.infrastructure.differences
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.fold
import java.nio.ByteBuffer
import kotlin.reflect.full.callSuspendBy
import kotlin.reflect.javaType
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.toList

/**
 * API tests for PatientApi
 */
@ExperimentalStdlibApi
class PatientApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        fun fileNames() = listOf("PatientApi.json")
    }

    // http://127.0.0.1:16043
    fun api(fileName: String) = PatientApi(basePath = java.lang.System.getProperty("API_URL"), authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                addDeserializer(AbstractFilterDto::class.java, FilterDeserializer())
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
                super.setupModule(context)
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    suspend fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    val parameters = createFunction!!.parameters.mapNotNull {
                        when(it.type.javaType) {
                            PatientDto::class.java -> it to objectMapper.convertValue(body, PatientDto::class.java)
                            PatientApi::class.java -> it to api(credentialsFile)
                            else -> null
                        }
                    }.toMap()

                    createFunction.callSuspendBy(parameters)
                    println("created")
                }
            }
        }
    }


    /**
     * Get count of patients for a specific HcParty or for the current HcParty
     *
     * Returns the count of patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun countOfPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "countOfPatients")) {
            assertTrue(true, "Test of countOfPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "countOfPatients")
                val hcPartyId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "countOfPatients.hcPartyId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "countOfPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).countOfPatients(hcPartyId = hcPartyId)

                val testFileName = "PatientApi.countOfPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContentDto>? != null) {
                        if ("ContentDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ContentDto>() {}
                    })
                    assertAreEquals("countOfPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Create a patient
     *
     * Name, last name, date of birth, and gender are required. After creation of the patient and obtaining the ID, you need to create an initial delegation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createPatient")) {
            assertTrue(true, "Test of createPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createPatient")
                val patientDto: PatientDto = TestUtils.getParameter<PatientDto>(fileName, "createPatient.patientDto")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "createPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? PatientDto ?: it
                    }

                val response = api(credentialsFile).createPatient(patientDto = patientDto)

                val testFileName = "PatientApi.createPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("createPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Create patients in bulk
     *
     * Returns the id and _rev of created patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createPatients")) {
            assertTrue(true, "Test of createPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createPatients")
                val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter<kotlin.collections.List<PatientDto>>(fileName, "createPatients.patientDto")!!.map {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "createPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<PatientDto>

                val response = api(credentialsFile).createPatients(patientDto = patientDto)

                val testFileName = "PatientApi.createPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<IdWithRevDto>? != null) {
                        if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<IdWithRevDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<IdWithRevDto>>() {}
                    })
                    assertAreEquals("createPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Delete patients.
     *
     * Response is an array containing the ID of deleted patient..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deletePatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "deletePatients")) {
            assertTrue(true, "Test of deletePatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "deletePatients")
                val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter<ListOfIdsDto>(fileName, "deletePatients.listOfIdsDto")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "deletePatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ListOfIdsDto ?: it
                    }

                val response = api(credentialsFile).deletePatients(listOfIdsDto = listOfIdsDto)

                val testFileName = "PatientApi.deletePatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocIdentifier>? != null) {
                        if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocIdentifier>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocIdentifier>>() {}
                    })
                    assertAreEquals("deletePatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Filter patients for the current user (HcParty)
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun filterPatientsByTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "filterPatientsBy")) {
            assertTrue(true, "Test of filterPatientsBy endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterPatientsBy")
                val filterChainPatient: FilterChainPatient = TestUtils.getParameter<FilterChainPatient>(fileName, "filterPatientsBy.filterChainPatient")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? FilterChainPatient ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "filterPatientsBy.startKey")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "filterPatientsBy.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "filterPatientsBy.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }
                val skip: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "filterPatientsBy.skip")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }
                val sort: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "filterPatientsBy.sort")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val desc: kotlin.Boolean? = TestUtils.getParameter<kotlin.Boolean>(fileName, "filterPatientsBy.desc")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "filterPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Boolean ?: it
                    }

                val response = api(credentialsFile).filterPatientsBy(filterChainPatient = filterChainPatient,startKey = startKey,startDocumentId = startDocumentId,limit = limit,skip = skip,sort = sort,desc = desc)

                val testFileName = "PatientApi.filterPatientsBy"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("filterPatientsBy", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Find deleted patients
     *
     * Returns a list of deleted patients, within the specified time period, if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findDeletedPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findDeletedPatients")) {
            assertTrue(true, "Test of findDeletedPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findDeletedPatients")
                val startDate: kotlin.Long? = TestUtils.getParameter<kotlin.Long>(fileName, "findDeletedPatients.startDate")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findDeletedPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }
                val endDate: kotlin.Long? = TestUtils.getParameter<kotlin.Long>(fileName, "findDeletedPatients.endDate")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findDeletedPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }
                val desc: kotlin.Boolean? = TestUtils.getParameter<kotlin.Boolean>(fileName, "findDeletedPatients.desc")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findDeletedPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Boolean ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findDeletedPatients.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findDeletedPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findDeletedPatients.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findDeletedPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findDeletedPatients(startDate = startDate,endDate = endDate,desc = desc,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "PatientApi.findDeletedPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("findDeletedPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get Paginated List of Patients sorted by Access logs descending
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findPatientsByAccessLogUserAfterDateTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findPatientsByAccessLogUserAfterDate")) {
            assertTrue(true, "Test of findPatientsByAccessLogUserAfterDate endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPatientsByAccessLogUserAfterDate")
                val userId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByAccessLogUserAfterDate.userId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByAccessLogUserAfterDate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val accessType: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByAccessLogUserAfterDate.accessType")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByAccessLogUserAfterDate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDate: kotlin.Long? = TestUtils.getParameter<kotlin.Long>(fileName, "findPatientsByAccessLogUserAfterDate.startDate")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByAccessLogUserAfterDate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByAccessLogUserAfterDate.startKey")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByAccessLogUserAfterDate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByAccessLogUserAfterDate.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByAccessLogUserAfterDate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findPatientsByAccessLogUserAfterDate.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByAccessLogUserAfterDate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findPatientsByAccessLogUserAfterDate(userId = userId,accessType = accessType,startDate = startDate,startKey = startKey,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "PatientApi.findPatientsByAccessLogUserAfterDate"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("findPatientsByAccessLogUserAfterDate", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * List patients for a specific HcParty
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findPatientsByHealthcarePartyTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findPatientsByHealthcareParty")) {
            assertTrue(true, "Test of findPatientsByHealthcareParty endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPatientsByHealthcareParty")
                val hcPartyId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByHealthcareParty.hcPartyId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val sortField: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByHealthcareParty.sortField")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByHealthcareParty.startKey")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByHealthcareParty.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findPatientsByHealthcareParty.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }
                val sortDirection: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByHealthcareParty.sortDirection")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).findPatientsByHealthcareParty(hcPartyId = hcPartyId,sortField = sortField,startKey = startKey,startDocumentId = startDocumentId,limit = limit,sortDirection = sortDirection)

                val testFileName = "PatientApi.findPatientsByHealthcareParty"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("findPatientsByHealthcareParty", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Find patients for the current user (HcParty)
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findPatientsByNameBirthSsinAutoTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findPatientsByNameBirthSsinAuto")) {
            assertTrue(true, "Test of findPatientsByNameBirthSsinAuto endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPatientsByNameBirthSsinAuto")
                val healthcarePartyId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByNameBirthSsinAuto.healthcarePartyId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByNameBirthSsinAuto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val filterValue: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByNameBirthSsinAuto.filterValue")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByNameBirthSsinAuto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByNameBirthSsinAuto.startKey")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByNameBirthSsinAuto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByNameBirthSsinAuto.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByNameBirthSsinAuto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findPatientsByNameBirthSsinAuto.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByNameBirthSsinAuto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }
                val sortDirection: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsByNameBirthSsinAuto.sortDirection")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsByNameBirthSsinAuto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).findPatientsByNameBirthSsinAuto(healthcarePartyId = healthcarePartyId,filterValue = filterValue,startKey = startKey,startDocumentId = startDocumentId,limit = limit,sortDirection = sortDirection)

                val testFileName = "PatientApi.findPatientsByNameBirthSsinAuto"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("findPatientsByNameBirthSsinAuto", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * List patients by pages for a specific HcParty
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findPatientsIdsByHealthcarePartyTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findPatientsIdsByHealthcareParty")) {
            assertTrue(true, "Test of findPatientsIdsByHealthcareParty endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPatientsIdsByHealthcareParty")
                val hcPartyId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsIdsByHealthcareParty.hcPartyId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsIdsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startKey: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsIdsByHealthcareParty.startKey")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsIdsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsIdsByHealthcareParty.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsIdsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findPatientsIdsByHealthcareParty.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsIdsByHealthcareParty") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findPatientsIdsByHealthcareParty(hcPartyId = hcPartyId,startKey = startKey,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "PatientApi.findPatientsIdsByHealthcareParty"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListString>? != null) {
                        if ("PaginatedListString".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListString>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListString>() {}
                    })
                    assertAreEquals("findPatientsIdsByHealthcareParty", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * List patients that have been modified after the provided date
     *
     * Returns a list of patients that have been modified after the provided date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findPatientsModifiedAfterTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "findPatientsModifiedAfter")) {
            assertTrue(true, "Test of findPatientsModifiedAfter endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPatientsModifiedAfter")
                val date: kotlin.Long = TestUtils.getParameter<kotlin.Long>(fileName, "findPatientsModifiedAfter.date")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsModifiedAfter") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }
                val startKey: kotlin.Long? = TestUtils.getParameter<kotlin.Long>(fileName, "findPatientsModifiedAfter.startKey")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsModifiedAfter") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }
                val startDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "findPatientsModifiedAfter.startDocumentId")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsModifiedAfter") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val limit: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "findPatientsModifiedAfter.limit")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "findPatientsModifiedAfter") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).findPatientsModifiedAfter(date = date,startKey = startKey,startDocumentId = startDocumentId,limit = limit)

                val testFileName = "PatientApi.findPatientsModifiedAfter"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("findPatientsModifiedAfter", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Filter patients for the current user (HcParty)
     *
     * Returns a list of patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun fuzzySearchTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "fuzzySearch")) {
            assertTrue(true, "Test of fuzzySearch endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "fuzzySearch")
                val firstName: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "fuzzySearch.firstName")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "fuzzySearch") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val lastName: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "fuzzySearch.lastName")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "fuzzySearch") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val dateOfBirth: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "fuzzySearch.dateOfBirth")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "fuzzySearch") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).fuzzySearch(firstName = firstName,lastName = lastName,dateOfBirth = dateOfBirth)

                val testFileName = "PatientApi.fuzzySearch"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("fuzzySearch", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get patient
     *
     * It gets patient administrative data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getPatient")) {
            assertTrue(true, "Test of getPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatient")
                val patientId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getPatient.patientId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getPatient(patientId = patientId)

                val testFileName = "PatientApi.getPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("getPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get the patient having the provided externalId
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientByExternalIdTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getPatientByExternalId")) {
            assertTrue(true, "Test of getPatientByExternalId endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatientByExternalId")
                val externalId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getPatientByExternalId.externalId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatientByExternalId") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getPatientByExternalId(externalId = externalId)

                val testFileName = "PatientApi.getPatientByExternalId"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("getPatientByExternalId", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get patient by identifier
     *
     * It gets patient administrative data based on the identifier (root &amp; extension) parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientByHealthcarepartyAndIdentifierTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getPatientByHealthcarepartyAndIdentifier")) {
            assertTrue(true, "Test of getPatientByHealthcarepartyAndIdentifier endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatientByHealthcarepartyAndIdentifier")
                val hcPartyId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getPatientByHealthcarepartyAndIdentifier.hcPartyId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatientByHealthcarepartyAndIdentifier") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getPatientByHealthcarepartyAndIdentifier.id")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatientByHealthcarepartyAndIdentifier") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val system: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "getPatientByHealthcarepartyAndIdentifier.system")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatientByHealthcarepartyAndIdentifier") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getPatientByHealthcarepartyAndIdentifier(hcPartyId = hcPartyId,id = id,system = system)

                val testFileName = "PatientApi.getPatientByHealthcarepartyAndIdentifier"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("getPatientByHealthcarepartyAndIdentifier", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get the patient (identified by patientId) hcparty keys. Those keys are AES keys (encrypted) used to share information between HCPs and a patient.
     *
     * This endpoint is used to recover all keys that have already been created and that can be used to share information with this patient. It returns a map with the following structure: ID of the owner of the encrypted AES key -&gt; encrypted AES key. The returned encrypted AES keys will have to be decrypted using the patient&#39;s private key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientHcPartyKeysForDelegateTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getPatientHcPartyKeysForDelegate")) {
            assertTrue(true, "Test of getPatientHcPartyKeysForDelegate endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatientHcPartyKeysForDelegate")
                val patientId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getPatientHcPartyKeysForDelegate.patientId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatientHcPartyKeysForDelegate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getPatientHcPartyKeysForDelegate(patientId = patientId)

                val testFileName = "PatientApi.getPatientHcPartyKeysForDelegate"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.String>? != null) {
                        if ("kotlin.String".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.String>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.String>() {}
                    })
                    assertAreEquals("getPatientHcPartyKeysForDelegate", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get patients by id
     *
     * It gets patient administrative data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getPatients")) {
            assertTrue(true, "Test of getPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatients")
                val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter<ListOfIdsDto>(fileName, "getPatients.listOfIdsDto")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "getPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ListOfIdsDto ?: it
                    }

                val response = api(credentialsFile).getPatients(listOfIdsDto = listOfIdsDto)

                val testFileName = "PatientApi.getPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("getPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Find deleted patients
     *
     * Returns a list of deleted patients, by name and/or firstname prefix, if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listDeletedPatientsByNameTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listDeletedPatientsByName")) {
            assertTrue(true, "Test of listDeletedPatientsByName endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listDeletedPatientsByName")
                val firstName: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listDeletedPatientsByName.firstName")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "listDeletedPatientsByName") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val lastName: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listDeletedPatientsByName.lastName")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "listDeletedPatientsByName") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).listDeletedPatientsByName(firstName = firstName,lastName = lastName)

                val testFileName = "PatientApi.listDeletedPatientsByName"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("listDeletedPatientsByName", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * List patients that have been merged towards another patient
     *
     * Returns a list of patients that have been merged after the provided date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listOfMergesAfterTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listOfMergesAfter")) {
            assertTrue(true, "Test of listOfMergesAfter endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listOfMergesAfter")
                val date: kotlin.Long = TestUtils.getParameter<kotlin.Long>(fileName, "listOfMergesAfter.date")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "listOfMergesAfter") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }

                val response = api(credentialsFile).listOfMergesAfter(date = date)

                val testFileName = "PatientApi.listOfMergesAfter"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("listOfMergesAfter", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Get ids of patients matching the provided filter for the current user (HcParty)
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun matchPatientsByTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "matchPatientsBy")) {
            assertTrue(true, "Test of matchPatientsBy endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "matchPatientsBy")
                val abstractFilterDtoPatient: AbstractFilterDtoPatient = TestUtils.getParameter<AbstractFilterDtoPatient>(fileName, "matchPatientsBy.abstractFilterDtoPatient")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "matchPatientsBy") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? AbstractFilterDtoPatient ?: it
                    }

                val response = api(credentialsFile).matchPatientsBy(abstractFilterDtoPatient = abstractFilterDtoPatient)

                val testFileName = "PatientApi.matchPatientsBy"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.String>? != null) {
                        if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.String>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<kotlin.String>>() {}
                    })
                    assertAreEquals("matchPatientsBy", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Merge a series of patients into another patient
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun mergeIntoTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "mergeInto")) {
            assertTrue(true, "Test of mergeInto endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "mergeInto")
                val toId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "mergeInto.toId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "mergeInto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val fromIds: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "mergeInto.fromIds")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "mergeInto") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).mergeInto(toId = toId,fromIds = fromIds)

                val testFileName = "PatientApi.mergeInto"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("mergeInto", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Modify a patient
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyPatient")) {
            assertTrue(true, "Test of modifyPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyPatient")
                val patientDto: PatientDto = TestUtils.getParameter<PatientDto>(fileName, "modifyPatient.patientDto")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? PatientDto ?: it
                    }

                val response = api(credentialsFile).modifyPatient(patientDto = patientDto)

                val testFileName = "PatientApi.modifyPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("modifyPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Set a patient referral doctor
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyPatientReferralTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyPatientReferral")) {
            assertTrue(true, "Test of modifyPatientReferral endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyPatientReferral")
                val patientId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "modifyPatientReferral.patientId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyPatientReferral") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val referralId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "modifyPatientReferral.referralId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyPatientReferral") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val start: kotlin.Long? = TestUtils.getParameter<kotlin.Long>(fileName, "modifyPatientReferral.start")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyPatientReferral") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }
                val end: kotlin.Long? = TestUtils.getParameter<kotlin.Long>(fileName, "modifyPatientReferral.end")?.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyPatientReferral") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Long ?: it
                    }

                val response = api(credentialsFile).modifyPatientReferral(patientId = patientId,referralId = referralId,start = start,end = end)

                val testFileName = "PatientApi.modifyPatientReferral"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("modifyPatientReferral", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Modify patients in bulk
     *
     * Returns the id and _rev of modified patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyPatients")) {
            assertTrue(true, "Test of modifyPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyPatients")
                val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter<kotlin.collections.List<PatientDto>>(fileName, "modifyPatients.patientDto")!!.map {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<PatientDto>

                val response = api(credentialsFile).modifyPatients(patientDto = patientDto)

                val testFileName = "PatientApi.modifyPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<IdWithRevDto>? != null) {
                        if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<IdWithRevDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<IdWithRevDto>>() {}
                    })
                    assertAreEquals("modifyPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Delegates a patients to a healthcare party
     *
     * It delegates a patient to a healthcare party (By current healthcare party). A modified patient with new delegation gets returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun newPatientDelegationsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "newPatientDelegations")) {
            assertTrue(true, "Test of newPatientDelegations endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "newPatientDelegations")
                val patientId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "newPatientDelegations.patientId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "newPatientDelegations") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val delegationDto: kotlin.collections.List<DelegationDto> = TestUtils.getParameter<kotlin.collections.List<DelegationDto>>(fileName, "newPatientDelegations.delegationDto")!!.map {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "newPatientDelegations") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<DelegationDto>

                val response = api(credentialsFile).newPatientDelegations(patientId = patientId,delegationDto = delegationDto)

                val testFileName = "PatientApi.newPatientDelegations"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("newPatientDelegations", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * Register a patient
     *
     * Register a new patient into the system
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun registerPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "registerPatient")) {
            assertTrue(true, "Test of registerPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "registerPatient")
                val hcPartyId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "registerPatient.hcPartyId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "registerPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val groupId: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "registerPatient.groupId")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "registerPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val patientDto: PatientDto = TestUtils.getParameter<PatientDto>(fileName, "registerPatient.patientDto")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "registerPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? PatientDto ?: it
                    }

                val response = api(credentialsFile).registerPatient(hcPartyId = hcPartyId,groupId = groupId,patientDto = patientDto, token = null, useShortToken = null)

                val testFileName = "PatientApi.registerPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientRegistrationSuccessDto>? != null) {
                        if ("PatientRegistrationSuccessDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientRegistrationSuccessDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientRegistrationSuccessDto>() {}
                    })
                    assertAreEquals("registerPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }

    /**
     * undelete previously deleted patients
     *
     * Response is an array containing the ID of undeleted patient..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun undeletePatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "undeletePatient")) {
            assertTrue(true, "Test of undeletePatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "undeletePatient")
                val patientIds: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "undeletePatient.patientIds")!!.let {
                    (it as? PatientDto)?.takeIf { TestUtils.isAutoRev(fileName, "undeletePatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).undeletePatient(patientIds = patientIds)

                val testFileName = "PatientApi.undeletePatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocIdentifier>? != null) {
                        if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocIdentifier>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocIdentifier>>() {}
                    })
                    assertAreEquals("undeletePatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }


    private suspend fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        when {
            objectFromFile as? Iterable<Any> != null -> {
                val toSkip : kotlin.collections.List<String> = when {
                    functionName.let { name -> listOf("listContact", "modifyContacts").any { name.startsWith(it) } } -> listOf("subContacts.[created, rev, modified]", "services.[openingDate]", "groupId", "created", "modified", "rev")
                    functionName.let { name -> listOf("getServices").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "openingDate")
                    functionName.let { name -> listOf("create", "new", "get", "list", "set").any { name.startsWith(it) } } -> listOf("rev", "created", "modified")
                    functionName.let { name -> listOf("modify", "delete", "undelete").any { name.startsWith(it) } } -> listOf("rev")
                    functionName.let { name -> listOf("append").any { name.startsWith(it) } } -> listOf("id", "created", "modified")
                    functionName.let { name -> listOf("find", "filter").any { name.startsWith(it) } } -> listOf("rows.[created, rev, modified]", "created", "modified", "rev")
                    else -> emptyList()
                }

                val diffs = objectFromFile
                    .takeUnless { (it as ArrayList<Any>).size != (response as ArrayList<Any>).size }
                    ?.let { objectFromFile
                        .zip(response as Iterable<Any>)
                        .map { pair -> filterDiffs(pair.first, pair.second, pair.first.differences(pair.second), toSkip) }
                        .flatten()
                        .toList()
                    }
                    ?: listOf(Diff("Lists are of different sizes ${(objectFromFile as ArrayList<Any>).size} <-> ${(response as ArrayList<Any>).size}", PropertyType.ListItem, emptyList(), objectFromFile, response))
                assertTrue(diffs.isEmpty(), diffs.joinToString { it.toString() })
            }
            objectFromFile as? Flow<ByteBuffer> != null -> {
                assertTrue(objectFromFile.toList().let {
                    it.fold(0 to ByteArray(it.sumOf { it.remaining() })) { (pos, a), b ->
                        val siz = b.remaining()
                        (pos + siz) to a.also {
                            b.get(a, pos, siz)
                        }
                    }.second
                }.contentEquals(
                    (response as Flow<ByteBuffer>).toList().let {
                        it.fold(0 to ByteArray(it.sumOf { it.remaining() })) { (pos, a), b ->
                            val siz = b.remaining()
                            (pos + siz) to a.also {
                                b.get(a, pos, siz)
                            }
                        }.second
                    }
                )
                )}
            else -> {
                val toSkip : kotlin.collections.List<String> = when {
                    functionName.let { name -> listOf("modifyContact").any { name.startsWith(it) } } -> listOf("subContacts.[created, rev, modified]", "services.[openingDate]", "groupId", "created", "modified", "rev")
                    functionName.let { name -> listOf("modifyPatientReferral").any { name.startsWith(it) } } -> listOf("rev", "patientHealthCareParties.[referralPeriods]", "created", "modified")
                    functionName.let { name -> listOf("createContact").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "deletionDate", "groupId")
                    functionName.let { name -> listOf("newContactDelegations").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "groupId")
                    functionName.let { name -> listOf("create", "get", "modify", "new").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "deletionDate")
                    functionName.let { name -> listOf("set", "delete", "merge").any { name.startsWith(it) } } -> listOf("rev", "created", "modified")
                    functionName.let { name -> listOf("validate").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "sentDate")
                    functionName.let { name -> listOf("reassign").any { name.startsWith(it) } } -> listOf("id", "created", "invoicingCodes.id")
                    functionName.let { name -> listOf("find").any { name.startsWith(it) } } -> listOf("rows.[created, rev, modified]")
                    else -> emptyList()
                }
                val diffs = filterDiffs(objectFromFile, response, response.differences(objectFromFile), toSkip)
                assertTrue(diffs.isEmpty(), diffs.joinToString { it.toString() })
            }
        }
    }
}
