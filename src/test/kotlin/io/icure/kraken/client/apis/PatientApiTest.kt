/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis

import io.icure.kraken.client.models.AbstractFilterDtoPatient
import io.icure.kraken.client.models.ContentDto
import io.icure.kraken.client.models.DelegationDto
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.FilterChainPatient
import io.icure.kraken.client.models.IdWithRevDto
import io.icure.kraken.client.models.ListOfIdsDto
import io.icure.kraken.client.models.PaginatedListPatientDto
import io.icure.kraken.client.models.PaginatedListString
import io.icure.kraken.client.models.PatientDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.models.filter.AbstractFilterDto

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import TestUtils.Companion.basicAuth
import com.fasterxml.jackson.databind.module.SimpleModule
import kotlinx.coroutines.runBlocking
import com.google.common.reflect.TypeToken
import io.icure.kraken.client.infrastructure.ByteArrayWrapper
import io.icure.kraken.client.infrastructure.ByteArrayWrapperDeserializer
import io.icure.kraken.client.infrastructure.ByteArrayWrapperSerializer

/**
 * API tests for PatientApi
 */
@ExperimentalStdlibApi
class PatientApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("PatientApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("PatientApi.json")
    }

    fun api(fileName: String) = PatientApi(basePath = "https://kraken.icure.dev", authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                super.setupModule(context)
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api(credentialsFile), body)
					println("created")
                }
            }
        }
    }


    /**
     * Create patients in bulk
     *
     * Returns the id and _rev of created patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun bulkCreatePatientsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "bulkCreatePatients")) {
			assert(true)
			println("Endpoint bulkCreatePatients skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "bulkCreatePatients")
        val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter(fileName, "bulkCreatePatients.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "bulkCreatePatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.collections.List<PatientDto>>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "bulkCreatePatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).bulkCreatePatients(patientDto)

        val testFileName = "PatientApi.bulkCreatePatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IdWithRevDto>? != null) {
                if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IdWithRevDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("bulkCreatePatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Create patients in bulk
     *
     * Returns the id and _rev of created patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun bulkCreatePatients1Test(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "bulkCreatePatients1")) {
			assert(true)
			println("Endpoint bulkCreatePatients1 skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "bulkCreatePatients1")
        val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter(fileName, "bulkCreatePatients1.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "bulkCreatePatients1") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.collections.List<PatientDto>>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "bulkCreatePatients1") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).bulkCreatePatients1(patientDto)

        val testFileName = "PatientApi.bulkCreatePatients1"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IdWithRevDto>? != null) {
                if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IdWithRevDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("bulkCreatePatients1", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Modify patients in bulk
     *
     * Returns the id and _rev of modified patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun bulkUpdatePatientsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "bulkUpdatePatients")) {
			assert(true)
			println("Endpoint bulkUpdatePatients skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "bulkUpdatePatients")
        val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter(fileName, "bulkUpdatePatients.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "bulkUpdatePatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.collections.List<PatientDto>>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "bulkUpdatePatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).bulkUpdatePatients(patientDto)

        val testFileName = "PatientApi.bulkUpdatePatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IdWithRevDto>? != null) {
                if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IdWithRevDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("bulkUpdatePatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Modify patients in bulk
     *
     * Returns the id and _rev of modified patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun bulkUpdatePatients1Test(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "bulkUpdatePatients1")) {
			assert(true)
			println("Endpoint bulkUpdatePatients1 skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "bulkUpdatePatients1")
        val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter(fileName, "bulkUpdatePatients1.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "bulkUpdatePatients1") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.collections.List<PatientDto>>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "bulkUpdatePatients1") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).bulkUpdatePatients1(patientDto)

        val testFileName = "PatientApi.bulkUpdatePatients1"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<IdWithRevDto>? != null) {
                if ("kotlin.collections.List<IdWithRevDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<IdWithRevDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("bulkUpdatePatients1", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get count of patients for a specific HcParty or for the current HcParty
     *
     * Returns the count of patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun countOfPatientsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "countOfPatients")) {
			assert(true)
			println("Endpoint countOfPatients skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "countOfPatients")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "countOfPatients.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "countOfPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "countOfPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).countOfPatients(hcPartyId)

        val testFileName = "PatientApi.countOfPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContentDto>? != null) {
                if ("ContentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("countOfPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Create a patient
     *
     * Name, last name, date of birth, and gender are required. After creation of the patient and obtaining the ID, you need to create an initial delegation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createPatientTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "createPatient")) {
			assert(true)
			println("Endpoint createPatient skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createPatient")
        val patientDto: PatientDto = TestUtils.getParameter(fileName, "createPatient.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "createPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<PatientDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).createPatient(patientDto)

        val testFileName = "PatientApi.createPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Delete patients.
     *
     * Response is an array containing the ID of deleted patient..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deletePatientTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "deletePatient")) {
			assert(true)
			println("Endpoint deletePatient skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deletePatient")
        val patientIds: kotlin.String = TestUtils.getParameter(fileName, "deletePatient.patientIds")!!
		if (patientIds as? Collection<*> == null) {
			patientIds.also {
            if (TestUtils.isAutoRev(fileName, "deletePatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientIds as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deletePatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).deletePatient(patientIds)

        val testFileName = "PatientApi.deletePatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deletePatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Filter patients for the current user (HcParty)
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun filterPatientsByTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "filterPatientsBy")) {
			assert(true)
			println("Endpoint filterPatientsBy skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "filterPatientsBy")
        val filterChainPatient: FilterChainPatient = TestUtils.getParameter(fileName, "filterPatientsBy.filterChainPatient")!!
		if (filterChainPatient as? Collection<*> == null) {
			filterChainPatient.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<FilterChainPatient>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = filterChainPatient as? Collection<FilterChainPatient> ?: emptyList<FilterChainPatient>() as Collection<FilterChainPatient>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "filterPatientsBy.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "filterPatientsBy.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "filterPatientsBy.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val skip: kotlin.Int? = TestUtils.getParameter(fileName, "filterPatientsBy.skip")
		if (skip as? Collection<*> == null) {
			skip.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = skip as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sort: kotlin.String? = TestUtils.getParameter(fileName, "filterPatientsBy.sort")
		if (sort as? Collection<*> == null) {
			sort.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sort as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val desc: kotlin.Boolean? = TestUtils.getParameter(fileName, "filterPatientsBy.desc")
		if (desc as? Collection<*> == null) {
			desc.also {
            if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = desc as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "filterPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).filterPatientsBy(filterChainPatient,startKey,startDocumentId,limit,skip,sort,desc)

        val testFileName = "PatientApi.filterPatientsBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("filterPatientsBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get Paginated List of Patients sorted by Access logs descending
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findByAccessLogUserAfterDateTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "findByAccessLogUserAfterDate")) {
			assert(true)
			println("Endpoint findByAccessLogUserAfterDate skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByAccessLogUserAfterDate")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "findByAccessLogUserAfterDate.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val accessType: kotlin.String? = TestUtils.getParameter(fileName, "findByAccessLogUserAfterDate.accessType")
		if (accessType as? Collection<*> == null) {
			accessType.also {
            if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = accessType as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDate: kotlin.Long? = TestUtils.getParameter(fileName, "findByAccessLogUserAfterDate.startDate")
		if (startDate as? Collection<*> == null) {
			startDate.also {
            if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDate as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "findByAccessLogUserAfterDate.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findByAccessLogUserAfterDate.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findByAccessLogUserAfterDate.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByAccessLogUserAfterDate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).findByAccessLogUserAfterDate(userId,accessType,startDate,startKey,startDocumentId,limit)

        val testFileName = "PatientApi.findByAccessLogUserAfterDate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByAccessLogUserAfterDate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get the patient having the provided externalId
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findByExternalIdTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "findByExternalId")) {
			assert(true)
			println("Endpoint findByExternalId skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByExternalId")
        val externalId: kotlin.String = TestUtils.getParameter(fileName, "findByExternalId.externalId")!!
		if (externalId as? Collection<*> == null) {
			externalId.also {
            if (TestUtils.isAutoRev(fileName, "findByExternalId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = externalId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByExternalId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).findByExternalId(externalId)

        val testFileName = "PatientApi.findByExternalId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByExternalId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Find patients for the current user (HcParty)
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun findByNameBirthSsinAutoTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "findByNameBirthSsinAuto")) {
			assert(true)
			println("Endpoint findByNameBirthSsinAuto skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByNameBirthSsinAuto")
        val healthcarePartyId: kotlin.String? = TestUtils.getParameter(fileName, "findByNameBirthSsinAuto.healthcarePartyId")
		if (healthcarePartyId as? Collection<*> == null) {
			healthcarePartyId.also {
            if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val filterValue: kotlin.String? = TestUtils.getParameter(fileName, "findByNameBirthSsinAuto.filterValue")
		if (filterValue as? Collection<*> == null) {
			filterValue.also {
            if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = filterValue as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "findByNameBirthSsinAuto.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "findByNameBirthSsinAuto.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "findByNameBirthSsinAuto.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortDirection: kotlin.String? = TestUtils.getParameter(fileName, "findByNameBirthSsinAuto.sortDirection")
		if (sortDirection as? Collection<*> == null) {
			sortDirection.also {
            if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortDirection as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByNameBirthSsinAuto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).findByNameBirthSsinAuto(healthcarePartyId,filterValue,startKey,startDocumentId,limit,sortDirection)

        val testFileName = "PatientApi.findByNameBirthSsinAuto"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByNameBirthSsinAuto", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Filter patients for the current user (HcParty)
     *
     * Returns a list of patients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun fuzzySearchTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "fuzzySearch")) {
			assert(true)
			println("Endpoint fuzzySearch skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "fuzzySearch")
        val firstName: kotlin.String? = TestUtils.getParameter(fileName, "fuzzySearch.firstName")
		if (firstName as? Collection<*> == null) {
			firstName.also {
            if (TestUtils.isAutoRev(fileName, "fuzzySearch") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstName as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "fuzzySearch") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val lastName: kotlin.String? = TestUtils.getParameter(fileName, "fuzzySearch.lastName")
		if (lastName as? Collection<*> == null) {
			lastName.also {
            if (TestUtils.isAutoRev(fileName, "fuzzySearch") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = lastName as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "fuzzySearch") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val dateOfBirth: kotlin.Int? = TestUtils.getParameter(fileName, "fuzzySearch.dateOfBirth")
		if (dateOfBirth as? Collection<*> == null) {
			dateOfBirth.also {
            if (TestUtils.isAutoRev(fileName, "fuzzySearch") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = dateOfBirth as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "fuzzySearch") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).fuzzySearch(firstName,lastName,dateOfBirth)

        val testFileName = "PatientApi.fuzzySearch"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("fuzzySearch", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get patient
     *
     * It gets patient administrative data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getPatient")) {
			assert(true)
			println("Endpoint getPatient skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatient")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "getPatient.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "getPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getPatient(patientId)

        val testFileName = "PatientApi.getPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get patient by identifier
     *
     * It gets patient administrative data based on the identifier (root &amp; extension) parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientByHealrhcarepartyAndIdentifierTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getPatientByHealrhcarepartyAndIdentifier")) {
			assert(true)
			println("Endpoint getPatientByHealrhcarepartyAndIdentifier skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatientByHealrhcarepartyAndIdentifier")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "getPatientByHealrhcarepartyAndIdentifier.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "getPatientByHealrhcarepartyAndIdentifier") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPatientByHealrhcarepartyAndIdentifier") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val system: kotlin.String = TestUtils.getParameter(fileName, "getPatientByHealrhcarepartyAndIdentifier.system")!!
		if (system as? Collection<*> == null) {
			system.also {
            if (TestUtils.isAutoRev(fileName, "getPatientByHealrhcarepartyAndIdentifier") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = system as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPatientByHealrhcarepartyAndIdentifier") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val id: kotlin.String = TestUtils.getParameter(fileName, "getPatientByHealrhcarepartyAndIdentifier.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getPatientByHealrhcarepartyAndIdentifier") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPatientByHealrhcarepartyAndIdentifier") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getPatientByHealrhcarepartyAndIdentifier(hcPartyId,system,id)

        val testFileName = "PatientApi.getPatientByHealrhcarepartyAndIdentifier"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPatientByHealrhcarepartyAndIdentifier", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get the patient (identified by patientId) hcparty keys. Those keys are AES keys (encrypted) used to share information between HCPs and a patient.
     *
     * This endpoint is used to recover all keys that have already been created and that can be used to share information with this patient. It returns a map with the following structure: ID of the owner of the encrypted AES key -&gt; encrypted AES key. The returned encrypted AES keys will have to be decrypted using the patient&#39;s private key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientHcPartyKeysForDelegateTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getPatientHcPartyKeysForDelegate")) {
			assert(true)
			println("Endpoint getPatientHcPartyKeysForDelegate skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatientHcPartyKeysForDelegate")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "getPatientHcPartyKeysForDelegate.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "getPatientHcPartyKeysForDelegate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPatientHcPartyKeysForDelegate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getPatientHcPartyKeysForDelegate(patientId)

        val testFileName = "PatientApi.getPatientHcPartyKeysForDelegate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.String".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPatientHcPartyKeysForDelegate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get patients by id
     *
     * It gets patient administrative data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getPatientsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "getPatients")) {
			assert(true)
			println("Endpoint getPatients skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPatients")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getPatients.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<ListOfIdsDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<ListOfIdsDto> ?: emptyList<ListOfIdsDto>() as Collection<ListOfIdsDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).getPatients(listOfIdsDto)

        val testFileName = "PatientApi.getPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Find deleted patients
     *
     * Returns a list of deleted patients, within the specified time period, if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listDeletedPatientsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listDeletedPatients")) {
			assert(true)
			println("Endpoint listDeletedPatients skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listDeletedPatients")
        val startDate: kotlin.Long? = TestUtils.getParameter(fileName, "listDeletedPatients.startDate")
		if (startDate as? Collection<*> == null) {
			startDate.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDate as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val endDate: kotlin.Long? = TestUtils.getParameter(fileName, "listDeletedPatients.endDate")
		if (endDate as? Collection<*> == null) {
			endDate.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = endDate as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val desc: kotlin.Boolean? = TestUtils.getParameter(fileName, "listDeletedPatients.desc")
		if (desc as? Collection<*> == null) {
			desc.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Boolean>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = desc as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "listDeletedPatients.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "listDeletedPatients.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listDeletedPatients(startDate,endDate,desc,startDocumentId,limit)

        val testFileName = "PatientApi.listDeletedPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listDeletedPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Find deleted patients
     *
     * Returns a list of deleted patients, by name and/or firstname prefix, if any.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listDeletedPatientsByNameTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listDeletedPatientsByName")) {
			assert(true)
			println("Endpoint listDeletedPatientsByName skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listDeletedPatientsByName")
        val firstName: kotlin.String? = TestUtils.getParameter(fileName, "listDeletedPatientsByName.firstName")
		if (firstName as? Collection<*> == null) {
			firstName.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatientsByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstName as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatientsByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val lastName: kotlin.String? = TestUtils.getParameter(fileName, "listDeletedPatientsByName.lastName")
		if (lastName as? Collection<*> == null) {
			lastName.also {
            if (TestUtils.isAutoRev(fileName, "listDeletedPatientsByName") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = lastName as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listDeletedPatientsByName") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listDeletedPatientsByName(firstName,lastName)

        val testFileName = "PatientApi.listDeletedPatientsByName"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listDeletedPatientsByName", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * List patients that have been merged towards another patient
     *
     * Returns a list of patients that have been merged after the provided date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listOfMergesAfterTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listOfMergesAfter")) {
			assert(true)
			println("Endpoint listOfMergesAfter skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listOfMergesAfter")
        val date: kotlin.Long = TestUtils.getParameter(fileName, "listOfMergesAfter.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "listOfMergesAfter") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listOfMergesAfter") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listOfMergesAfter(date)

        val testFileName = "PatientApi.listOfMergesAfter"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listOfMergesAfter", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * List patients that have been modified after the provided date
     *
     * Returns a list of patients that have been modified after the provided date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listOfPatientsModifiedAfterTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listOfPatientsModifiedAfter")) {
			assert(true)
			println("Endpoint listOfPatientsModifiedAfter skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listOfPatientsModifiedAfter")
        val date: kotlin.Long = TestUtils.getParameter(fileName, "listOfPatientsModifiedAfter.date")!!
		if (date as? Collection<*> == null) {
			date.also {
            if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = date as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.Long? = TestUtils.getParameter(fileName, "listOfPatientsModifiedAfter.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "listOfPatientsModifiedAfter.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "listOfPatientsModifiedAfter.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listOfPatientsModifiedAfter") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listOfPatientsModifiedAfter(date,startKey,startDocumentId,limit)

        val testFileName = "PatientApi.listOfPatientsModifiedAfter"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listOfPatientsModifiedAfter", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * List patients for a specific HcParty
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listPatientsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listPatients")) {
			assert(true)
			println("Endpoint listPatients skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listPatients")
        val hcPartyId: kotlin.String? = TestUtils.getParameter(fileName, "listPatients.hcPartyId")
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortField: kotlin.String? = TestUtils.getParameter(fileName, "listPatients.sortField")
		if (sortField as? Collection<*> == null) {
			sortField.also {
            if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortField as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "listPatients.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "listPatients.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "listPatients.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortDirection: kotlin.String? = TestUtils.getParameter(fileName, "listPatients.sortDirection")
		if (sortDirection as? Collection<*> == null) {
			sortDirection.also {
            if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortDirection as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listPatients(hcPartyId,sortField,startKey,startDocumentId,limit,sortDirection)

        val testFileName = "PatientApi.listPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * List patients for a specific HcParty or for the current HcParty
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listPatientsByHcPartyTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listPatientsByHcParty")) {
			assert(true)
			println("Endpoint listPatientsByHcParty skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listPatientsByHcParty")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listPatientsByHcParty.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortField: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsByHcParty.sortField")
		if (sortField as? Collection<*> == null) {
			sortField.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortField as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsByHcParty.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsByHcParty.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "listPatientsByHcParty.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortDirection: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsByHcParty.sortDirection")
		if (sortDirection as? Collection<*> == null) {
			sortDirection.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortDirection as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsByHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listPatientsByHcParty(hcPartyId,sortField,startKey,startDocumentId,limit,sortDirection)

        val testFileName = "PatientApi.listPatientsByHcParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listPatientsByHcParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * List patients by pages for a specific HcParty
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listPatientsIdsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listPatientsIds")) {
			assert(true)
			println("Endpoint listPatientsIds skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listPatientsIds")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listPatientsIds.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsIds.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsIds.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "listPatientsIds.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsIds") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listPatientsIds(hcPartyId,startKey,startDocumentId,limit)

        val testFileName = "PatientApi.listPatientsIds"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListString>? != null) {
                if ("PaginatedListString".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListString>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listPatientsIds", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * List patients of a specific HcParty or of the current HcParty
     *
     * Returns a list of patients along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listPatientsOfHcPartyTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "listPatientsOfHcParty")) {
			assert(true)
			println("Endpoint listPatientsOfHcParty skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listPatientsOfHcParty")
        val hcPartyId: kotlin.String = TestUtils.getParameter(fileName, "listPatientsOfHcParty.hcPartyId")!!
		if (hcPartyId as? Collection<*> == null) {
			hcPartyId.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = hcPartyId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortField: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsOfHcParty.sortField")
		if (sortField as? Collection<*> == null) {
			sortField.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortField as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsOfHcParty.startKey")
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsOfHcParty.startDocumentId")
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int? = TestUtils.getParameter(fileName, "listPatientsOfHcParty.limit")
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Int>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<kotlin.Int> ?: emptyList<kotlin.Int>() as Collection<kotlin.Int>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val sortDirection: kotlin.String? = TestUtils.getParameter(fileName, "listPatientsOfHcParty.sortDirection")
		if (sortDirection as? Collection<*> == null) {
			sortDirection.also {
            if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = sortDirection as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listPatientsOfHcParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).listPatientsOfHcParty(hcPartyId,sortField,startKey,startDocumentId,limit,sortDirection)

        val testFileName = "PatientApi.listPatientsOfHcParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listPatientsOfHcParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Get ids of patients matching the provided filter for the current user (HcParty)
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun matchPatientsByTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "matchPatientsBy")) {
			assert(true)
			println("Endpoint matchPatientsBy skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "matchPatientsBy")
        val abstractFilterDtoPatient: AbstractFilterDtoPatient = TestUtils.getParameter(fileName, "matchPatientsBy.abstractFilterDtoPatient")!!
		if (abstractFilterDtoPatient as? Collection<*> == null) {
			abstractFilterDtoPatient.also {
            if (TestUtils.isAutoRev(fileName, "matchPatientsBy") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<AbstractFilterDtoPatient>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = abstractFilterDtoPatient as? Collection<AbstractFilterDtoPatient> ?: emptyList<AbstractFilterDtoPatient>() as Collection<AbstractFilterDtoPatient>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "matchPatientsBy") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).matchPatientsBy(abstractFilterDtoPatient)

        val testFileName = "PatientApi.matchPatientsBy"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("matchPatientsBy", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Merge a series of patients into another patient
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun mergeIntoTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "mergeInto")) {
			assert(true)
			println("Endpoint mergeInto skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "mergeInto")
        val toId: kotlin.String = TestUtils.getParameter(fileName, "mergeInto.toId")!!
		if (toId as? Collection<*> == null) {
			toId.also {
            if (TestUtils.isAutoRev(fileName, "mergeInto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = toId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "mergeInto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val fromIds: kotlin.String = TestUtils.getParameter(fileName, "mergeInto.fromIds")!!
		if (fromIds as? Collection<*> == null) {
			fromIds.also {
            if (TestUtils.isAutoRev(fileName, "mergeInto") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = fromIds as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "mergeInto") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).mergeInto(toId,fromIds)

        val testFileName = "PatientApi.mergeInto"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("mergeInto", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Modify a patient
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyPatientTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "modifyPatient")) {
			assert(true)
			println("Endpoint modifyPatient skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyPatient")
        val patientDto: PatientDto = TestUtils.getParameter(fileName, "modifyPatient.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<PatientDto>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).modifyPatient(patientDto)

        val testFileName = "PatientApi.modifyPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Set a patient referral doctor
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyPatientReferralTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "modifyPatientReferral")) {
			assert(true)
			println("Endpoint modifyPatientReferral skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyPatientReferral")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "modifyPatientReferral.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val referralId: kotlin.String = TestUtils.getParameter(fileName, "modifyPatientReferral.referralId")!!
		if (referralId as? Collection<*> == null) {
			referralId.also {
            if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = referralId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val start: kotlin.Long? = TestUtils.getParameter(fileName, "modifyPatientReferral.start")
		if (start as? Collection<*> == null) {
			start.also {
            if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = start as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val end: kotlin.Long? = TestUtils.getParameter(fileName, "modifyPatientReferral.end")
		if (end as? Collection<*> == null) {
			end.also {
            if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.Long>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = end as? Collection<kotlin.Long> ?: emptyList<kotlin.Long>() as Collection<kotlin.Long>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyPatientReferral") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).modifyPatientReferral(patientId,referralId,start,end)

        val testFileName = "PatientApi.modifyPatientReferral"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyPatientReferral", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * Delegates a patients to a healthcare party
     *
     * It delegates a patient to a healthcare party (By current healthcare party). A modified patient with new delegation gets returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun newPatientDelegationsTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "newPatientDelegations")) {
			assert(true)
			println("Endpoint newPatientDelegations skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "newPatientDelegations")
        val patientId: kotlin.String = TestUtils.getParameter(fileName, "newPatientDelegations.patientId")!!
		if (patientId as? Collection<*> == null) {
			patientId.also {
            if (TestUtils.isAutoRev(fileName, "newPatientDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientId as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newPatientDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val delegationDto: kotlin.collections.List<DelegationDto> = TestUtils.getParameter(fileName, "newPatientDelegations.delegationDto")!!
		if (delegationDto as? Collection<*> == null) {
			delegationDto.also {
            if (TestUtils.isAutoRev(fileName, "newPatientDelegations") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.collections.List<DelegationDto>>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = delegationDto as? Collection<DelegationDto> ?: emptyList<DelegationDto>() as Collection<DelegationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "newPatientDelegations") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).newPatientDelegations(patientId,delegationDto)

        val testFileName = "PatientApi.newPatientDelegations"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("newPatientDelegations", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}

    /**
     * undelete previously deleted patients
     *
     * Response is an array containing the ID of undeleted patient..
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun undeletePatientTest(fileName: String) = runBlocking {
        createForModification(fileName)
		if (TestUtils.skipEndpoint(fileName, "undeletePatient")) {
			assert(true)
			println("Endpoint undeletePatient skipped")
		} else {
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "undeletePatient")
        val patientIds: kotlin.String = TestUtils.getParameter(fileName, "undeletePatient.patientIds")!!
		if (patientIds as? Collection<*> == null) {
			patientIds.also {
            if (TestUtils.isAutoRev(fileName, "undeletePatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                val rev = object: TypeReference<kotlin.String>(){}.type::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientIds as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "undeletePatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api(credentialsFile).getPatient(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api(credentialsFile).undeletePatient(patientIds)

        val testFileName = "PatientApi.undeletePatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("undeletePatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }}



    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            val diffs = response.differences(objectFromFile)
            assertTrue(diffs.isEmpty())
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
