/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.PlaceDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for PlaceApi
 */
@ExperimentalStdlibApi
class PlaceApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("PlaceApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("PlaceApi.json")
    }

    private val api = PlaceApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Creates a place
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createPlaceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createPlace")) {
			assert(true)
			println("Endpoint createPlace skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createPlace")
        val placeDto: PlaceDto = TestUtils.getParameter(fileName, "createPlace.placeDto")!!
		if (placeDto as? Collection<*> == null) {
			placeDto.also {
            if (TestUtils.isAutoRev(fileName, "createPlace") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getPlace(id.getter.call(it) as String).rev
                val rev = PlaceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = placeDto as? Collection<PlaceDto> ?: emptyList<PlaceDto>() as Collection<PlaceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createPlace") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getPlace(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createPlace(placeDto)

        val testFileName = "PlaceApi.createPlace"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PlaceDto>? != null) {
                if ("PlaceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PlaceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createPlace", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Deletes an place
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deletePlaceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deletePlace")) {
			assert(true)
			println("Endpoint deletePlace skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deletePlace")
        val placeIds: kotlin.String = TestUtils.getParameter(fileName, "deletePlace.placeIds")!!
		if (placeIds as? Collection<*> == null) {
			placeIds.also {
            if (TestUtils.isAutoRev(fileName, "deletePlace") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getPlace(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = placeIds as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deletePlace") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getPlace(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deletePlace(placeIds)

        val testFileName = "PlaceApi.deletePlace"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deletePlace", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets an place
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getPlaceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getPlace")) {
			assert(true)
			println("Endpoint getPlace skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPlace")
        val placeId: kotlin.String = TestUtils.getParameter(fileName, "getPlace.placeId")!!
		if (placeId as? Collection<*> == null) {
			placeId.also {
            if (TestUtils.isAutoRev(fileName, "getPlace") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getPlace(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = placeId as? Collection<PlaceDto> ?: emptyList<PlaceDto>() as Collection<PlaceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getPlace") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getPlace(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getPlace(placeId)

        val testFileName = "PlaceApi.getPlace"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PlaceDto>? != null) {
                if ("PlaceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PlaceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPlace", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Gets all places
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getPlacesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getPlaces")) {
			assert(true)
			println("Endpoint getPlaces skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getPlaces")

        val response = api.getPlaces()

        val testFileName = "PlaceApi.getPlaces"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PlaceDto>? != null) {
                if ("kotlin.collections.List<PlaceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PlaceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getPlaces", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modifies an place
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyPlaceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyPlace")) {
			assert(true)
			println("Endpoint modifyPlace skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyPlace")
        val placeDto: PlaceDto = TestUtils.getParameter(fileName, "modifyPlace.placeDto")!!
		if (placeDto as? Collection<*> == null) {
			placeDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyPlace") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getPlace(id.getter.call(it) as String).rev
                val rev = PlaceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = placeDto as? Collection<PlaceDto> ?: emptyList<PlaceDto>() as Collection<PlaceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyPlace") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getPlace(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyPlace(placeDto)

        val testFileName = "PlaceApi.modifyPlace"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PlaceDto>? != null) {
                if ("PlaceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PlaceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyPlace", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
