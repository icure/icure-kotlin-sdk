/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.ListOfIdsDto;
import io.icure.kraken.client.models.PaginatedListTarificationDto;
import io.icure.kraken.client.models.TarificationDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for TarificationApi
 */
@ExperimentalStdlibApi
class TarificationApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("TarificationApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("TarificationApi.json")
    }

    private val api = TarificationApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a Tarification
     *
     * Type, Tarification and Version are required.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTarificationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTarification")) {
			assert(true)
			println("Endpoint createTarification skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTarification")
        val tarificationDto: TarificationDto = TestUtils.getParameter(fileName, "createTarification.tarificationDto")!!
		if (tarificationDto as? Collection<*> == null) {
			tarificationDto.also {
            if (TestUtils.isAutoRev(fileName, "createTarification") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = TarificationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = tarificationDto as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTarification") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTarification(tarificationDto)

        val testFileName = "TarificationApi.createTarification"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<TarificationDto>? != null) {
                if ("TarificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<TarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTarification", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding tarifications by tarification, type and version with pagination.
     *
     * Returns a list of tarifications matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedTarificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedTarifications")) {
			assert(true)
			println("Endpoint findPaginatedTarifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedTarifications")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarifications.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarifications.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val tarification: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarifications.tarification")!!
		if (tarification as? Collection<*> == null) {
			tarification.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = tarification as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarifications.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarifications.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedTarifications.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedTarifications(region,type,tarification,version,startDocumentId,limit)

        val testFileName = "TarificationApi.findPaginatedTarifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListTarificationDto>? != null) {
                if ("PaginatedListTarificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListTarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedTarifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding tarifications by tarification, type and version with pagination.
     *
     * Returns a list of tarifications matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findPaginatedTarificationsByLabelTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findPaginatedTarificationsByLabel")) {
			assert(true)
			println("Endpoint findPaginatedTarificationsByLabel skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findPaginatedTarificationsByLabel")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarificationsByLabel.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val types: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarificationsByLabel.types")!!
		if (types as? Collection<*> == null) {
			types.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = types as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val language: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarificationsByLabel.language")!!
		if (language as? Collection<*> == null) {
			language.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = language as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val label: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarificationsByLabel.label")!!
		if (label as? Collection<*> == null) {
			label.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = label as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "findPaginatedTarificationsByLabel.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "findPaginatedTarificationsByLabel.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListTarificationDto> ?: emptyList<PaginatedListTarificationDto>() as Collection<PaginatedListTarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findPaginatedTarificationsByLabel") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findPaginatedTarificationsByLabel(region,types,language,label,startDocumentId,limit)

        val testFileName = "TarificationApi.findPaginatedTarificationsByLabel"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListTarificationDto>? != null) {
                if ("PaginatedListTarificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListTarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findPaginatedTarificationsByLabel", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Finding tarifications by tarification, type and version
     *
     * Returns a list of tarifications matched with given input.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findTarificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findTarifications")) {
			assert(true)
			println("Endpoint findTarifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findTarifications")
        val region: kotlin.String = TestUtils.getParameter(fileName, "findTarifications.region")!!
		if (region as? Collection<*> == null) {
			region.also {
            if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = region as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val type: kotlin.String = TestUtils.getParameter(fileName, "findTarifications.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val tarification: kotlin.String = TestUtils.getParameter(fileName, "findTarifications.tarification")!!
		if (tarification as? Collection<*> == null) {
			tarification.also {
            if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = tarification as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.String = TestUtils.getParameter(fileName, "findTarifications.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findTarifications(region,type,tarification,version)

        val testFileName = "TarificationApi.findTarifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<TarificationDto>? != null) {
                if ("kotlin.collections.List<TarificationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<TarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findTarifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a tarification
     *
     * Get a tarification based on ID or (tarification,type,version) as query strings. (tarification,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTarificationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTarification")) {
			assert(true)
			println("Endpoint getTarification skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTarification")
        val tarificationId: kotlin.String = TestUtils.getParameter(fileName, "getTarification.tarificationId")!!
		if (tarificationId as? Collection<*> == null) {
			tarificationId.also {
            if (TestUtils.isAutoRev(fileName, "getTarification") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = tarificationId as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTarification") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTarification(tarificationId)

        val testFileName = "TarificationApi.getTarification"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<TarificationDto>? != null) {
                if ("TarificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<TarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTarification", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a tarification
     *
     * Get a tarification based on ID or (tarification,type,version) as query strings. (tarification,type,version) is unique.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTarificationWithPartsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTarificationWithParts")) {
			assert(true)
			println("Endpoint getTarificationWithParts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTarificationWithParts")
        val type: kotlin.String = TestUtils.getParameter(fileName, "getTarificationWithParts.type")!!
		if (type as? Collection<*> == null) {
			type.also {
            if (TestUtils.isAutoRev(fileName, "getTarificationWithParts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = type as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTarificationWithParts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val tarification: kotlin.String = TestUtils.getParameter(fileName, "getTarificationWithParts.tarification")!!
		if (tarification as? Collection<*> == null) {
			tarification.also {
            if (TestUtils.isAutoRev(fileName, "getTarificationWithParts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = tarification as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTarificationWithParts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val version: kotlin.String = TestUtils.getParameter(fileName, "getTarificationWithParts.version")!!
		if (version as? Collection<*> == null) {
			version.also {
            if (TestUtils.isAutoRev(fileName, "getTarificationWithParts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = version as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTarificationWithParts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTarificationWithParts(type,tarification,version)

        val testFileName = "TarificationApi.getTarificationWithParts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<TarificationDto>? != null) {
                if ("TarificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<TarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTarificationWithParts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a list of tarifications by ids
     *
     * Keys must be delimited by coma
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTarificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTarifications")) {
			assert(true)
			println("Endpoint getTarifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTarifications")
        val listOfIdsDto: ListOfIdsDto = TestUtils.getParameter(fileName, "getTarifications.listOfIdsDto")!!
		if (listOfIdsDto as? Collection<*> == null) {
			listOfIdsDto.also {
            if (TestUtils.isAutoRev(fileName, "getTarifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = ListOfIdsDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = listOfIdsDto as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTarifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTarifications(listOfIdsDto)

        val testFileName = "TarificationApi.getTarifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<TarificationDto>? != null) {
                if ("kotlin.collections.List<TarificationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<TarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTarifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a tarification
     *
     * Modification of (type, tarification, version) is not allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTarificationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTarification")) {
			assert(true)
			println("Endpoint modifyTarification skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTarification")
        val tarificationDto: TarificationDto = TestUtils.getParameter(fileName, "modifyTarification.tarificationDto")!!
		if (tarificationDto as? Collection<*> == null) {
			tarificationDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTarification") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTarification(id.getter.call(it) as String).rev
                val rev = TarificationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = tarificationDto as? Collection<TarificationDto> ?: emptyList<TarificationDto>() as Collection<TarificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTarification") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTarification(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTarification(tarificationDto)

        val testFileName = "TarificationApi.modifyTarification"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<TarificationDto>? != null) {
                if ("TarificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<TarificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTarification", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
