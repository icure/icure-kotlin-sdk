/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.ClassificationDto;
import io.icure.kraken.client.models.ContactDto;
import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.DocumentDto;
import io.icure.kraken.client.models.EntityTemplateDto;
import io.icure.kraken.client.models.FormDto;
import io.icure.kraken.client.models.HealthElementDto;
import io.icure.kraken.client.models.InvoiceDto;
import io.icure.kraken.client.models.MessageDto;
import io.icure.kraken.client.models.PaginatedListClassificationDto;
import io.icure.kraken.client.models.PaginatedListDocumentDto;
import io.icure.kraken.client.models.PaginatedListEntityTemplateDto;
import io.icure.kraken.client.models.PaginatedListFormDto;
import io.icure.kraken.client.models.PaginatedListHealthElementDto;
import io.icure.kraken.client.models.PaginatedListInvoiceDto;
import io.icure.kraken.client.models.PaginatedListPatientDto;
import io.icure.kraken.client.models.PatientDto;
import io.icure.kraken.client.models.ReplicatorDocument;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for TmpApi
 */
@ExperimentalStdlibApi
class TmpApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("TmpApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("TmpApi.json")
    }

    private val api = TmpApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }

    
    /**
     * Create a classification with the current user
     *
     * Returns an instance of created classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpClassificationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpClassification")) {
			assert(true)
			println("Endpoint createTmpClassification skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpClassification")
        val classificationDto: ClassificationDto = TestUtils.getParameter(fileName, "createTmpClassification.classificationDto")!!
		if (classificationDto as? Collection<*> == null) {
			classificationDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpClassification") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = ClassificationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationDto as? Collection<ClassificationDto> ?: emptyList<ClassificationDto>() as Collection<ClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpClassification") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpClassification(classificationDto)

        val testFileName = "TmpApi.createTmpClassification"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationDto>? != null) {
                if ("ClassificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpClassification", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a classification with the current user
     *
     * Returns an instance of created classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpClassificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpClassifications")) {
			assert(true)
			println("Endpoint createTmpClassifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpClassifications")
        val classificationDto: kotlin.collections.List<ClassificationDto> = TestUtils.getParameter(fileName, "createTmpClassifications.classificationDto")!!
		if (classificationDto as? Collection<*> == null) {
			classificationDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpClassifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<ClassificationDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationDto as? Collection<ClassificationDto> ?: emptyList<ClassificationDto>() as Collection<ClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpClassifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpClassifications(classificationDto)

        val testFileName = "TmpApi.createTmpClassifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationDto>? != null) {
                if ("kotlin.collections.List<ClassificationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpClassifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a contact with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpContactTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpContact")) {
			assert(true)
			println("Endpoint createTmpContact skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpContact")
        val contactDto: ContactDto = TestUtils.getParameter(fileName, "createTmpContact.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpContact") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = ContactDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpContact") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpContact(contactDto)

        val testFileName = "TmpApi.createTmpContact"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpContact", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a contact with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpContacts")) {
			assert(true)
			println("Endpoint createTmpContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpContacts")
        val contactDto: kotlin.collections.List<ContactDto> = TestUtils.getParameter(fileName, "createTmpContacts.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<ContactDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpContacts(contactDto)

        val testFileName = "TmpApi.createTmpContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create tmp database for current user
     *
     * Nothing happens if the database already exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpDatabaseTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpDatabase")) {
			assert(true)
			println("Endpoint createTmpDatabase skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpDatabase")

        val response = api.createTmpDatabase()

        val testFileName = "TmpApi.createTmpDatabase"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Any>? != null) {
                if ("kotlin.Any".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Any>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpDatabase", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a document with the current user
     *
     * Returns an instance of created document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpDocument")) {
			assert(true)
			println("Endpoint createTmpDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpDocument")
        val documentDto: DocumentDto = TestUtils.getParameter(fileName, "createTmpDocument.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = DocumentDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpDocument(documentDto)

        val testFileName = "TmpApi.createTmpDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a document with the current user
     *
     * Returns an instance of created document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpDocumentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpDocuments")) {
			assert(true)
			println("Endpoint createTmpDocuments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpDocuments")
        val documentDto: kotlin.collections.List<DocumentDto> = TestUtils.getParameter(fileName, "createTmpDocuments.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<DocumentDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpDocuments(documentDto)

        val testFileName = "TmpApi.createTmpDocuments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpDocuments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a entityTemplate with the current user
     *
     * Returns an instance of created entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpEntityTemplate")) {
			assert(true)
			println("Endpoint createTmpEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpEntityTemplate")
        val entityTemplateDto: EntityTemplateDto = TestUtils.getParameter(fileName, "createTmpEntityTemplate.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = EntityTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpEntityTemplate(entityTemplateDto)

        val testFileName = "TmpApi.createTmpEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("EntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a entityTemplate with the current user
     *
     * Returns an instance of created entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpEntityTemplates")) {
			assert(true)
			println("Endpoint createTmpEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpEntityTemplates")
        val entityTemplateDto: kotlin.collections.List<EntityTemplateDto> = TestUtils.getParameter(fileName, "createTmpEntityTemplates.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<EntityTemplateDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpEntityTemplates(entityTemplateDto)

        val testFileName = "TmpApi.createTmpEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a form with the current user
     *
     * Returns an instance of created form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpFormTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpForm")) {
			assert(true)
			println("Endpoint createTmpForm skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpForm")
        val formDto: FormDto = TestUtils.getParameter(fileName, "createTmpForm.formDto")!!
		if (formDto as? Collection<*> == null) {
			formDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpForm") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = FormDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = formDto as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpForm") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpForm(formDto)

        val testFileName = "TmpApi.createTmpForm"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("FormDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpForm", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a form with the current user
     *
     * Returns an instance of created form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpFormsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpForms")) {
			assert(true)
			println("Endpoint createTmpForms skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpForms")
        val formDto: kotlin.collections.List<FormDto> = TestUtils.getParameter(fileName, "createTmpForms.formDto")!!
		if (formDto as? Collection<*> == null) {
			formDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpForms") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<FormDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = formDto as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpForms") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpForms(formDto)

        val testFileName = "TmpApi.createTmpForms"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("kotlin.collections.List<FormDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpForms", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a healthElement with the current user
     *
     * Returns an instance of created healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpHealthElementTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpHealthElement")) {
			assert(true)
			println("Endpoint createTmpHealthElement skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpHealthElement")
        val healthElementDto: HealthElementDto = TestUtils.getParameter(fileName, "createTmpHealthElement.healthElementDto")!!
		if (healthElementDto as? Collection<*> == null) {
			healthElementDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpHealthElement") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = HealthElementDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthElementDto as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpHealthElement") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpHealthElement(healthElementDto)

        val testFileName = "TmpApi.createTmpHealthElement"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("HealthElementDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpHealthElement", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a healthElement with the current user
     *
     * Returns an instance of created healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpHealthElementsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpHealthElements")) {
			assert(true)
			println("Endpoint createTmpHealthElements skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpHealthElements")
        val healthElementDto: kotlin.collections.List<HealthElementDto> = TestUtils.getParameter(fileName, "createTmpHealthElements.healthElementDto")!!
		if (healthElementDto as? Collection<*> == null) {
			healthElementDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpHealthElements") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<HealthElementDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthElementDto as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpHealthElements") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpHealthElements(healthElementDto)

        val testFileName = "TmpApi.createTmpHealthElements"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpHealthElements", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a invoice with the current user
     *
     * Returns an instance of created invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpInvoice")) {
			assert(true)
			println("Endpoint createTmpInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpInvoice")
        val invoiceDto: InvoiceDto = TestUtils.getParameter(fileName, "createTmpInvoice.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = InvoiceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpInvoice(invoiceDto)

        val testFileName = "TmpApi.createTmpInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a invoice with the current user
     *
     * Returns an instance of created invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpInvoices")) {
			assert(true)
			println("Endpoint createTmpInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpInvoices")
        val invoiceDto: kotlin.collections.List<InvoiceDto> = TestUtils.getParameter(fileName, "createTmpInvoices.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<InvoiceDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpInvoices(invoiceDto)

        val testFileName = "TmpApi.createTmpInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a message with the current user
     *
     * Returns an instance of created message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpMessage")) {
			assert(true)
			println("Endpoint createTmpMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpMessage")
        val messageDto: MessageDto = TestUtils.getParameter(fileName, "createTmpMessage.messageDto")!!
		if (messageDto as? Collection<*> == null) {
			messageDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = MessageDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpMessage(messageDto)

        val testFileName = "TmpApi.createTmpMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a message with the current user
     *
     * Returns an instance of created message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpMessages")) {
			assert(true)
			println("Endpoint createTmpMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpMessages")
        val messageDto: kotlin.collections.List<MessageDto> = TestUtils.getParameter(fileName, "createTmpMessages.messageDto")!!
		if (messageDto as? Collection<*> == null) {
			messageDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<MessageDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpMessages(messageDto)

        val testFileName = "TmpApi.createTmpMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a patient with the current user
     *
     * Returns an instance of created patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpPatientTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpPatient")) {
			assert(true)
			println("Endpoint createTmpPatient skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpPatient")
        val patientDto: PatientDto = TestUtils.getParameter(fileName, "createTmpPatient.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = PatientDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpPatient(patientDto)

        val testFileName = "TmpApi.createTmpPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Create a patient with the current user
     *
     * Returns an instance of created patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createTmpPatientsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createTmpPatients")) {
			assert(true)
			println("Endpoint createTmpPatients skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpPatients")
        val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter(fileName, "createTmpPatients.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "createTmpPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<PatientDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createTmpPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createTmpPatients(patientDto)

        val testFileName = "TmpApi.createTmpPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createTmpPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Soft delete items.
     *
     * Response is a set containing the ID&#39;s of deleted items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteTmpItemsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteTmpItems")) {
			assert(true)
			println("Endpoint deleteTmpItems skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteTmpItems")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "deleteTmpItems.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "deleteTmpItems") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteTmpItems") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteTmpItems(requestBody)

        val testFileName = "TmpApi.deleteTmpItems"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteTmpItems", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Destroy tmp database for current user
     *
     * Nothing happens if the database does not exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun destroyTmpDatabaseTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "destroyTmpDatabase")) {
			assert(true)
			println("Endpoint destroyTmpDatabase skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "destroyTmpDatabase")

        val response = api.destroyTmpDatabase()

        val testFileName = "TmpApi.destroyTmpDatabase"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Any>? != null) {
                if ("kotlin.Any".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Any>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("destroyTmpDatabase", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a classification by id
     *
     * Returns an instance of classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpClassificationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpClassification")) {
			assert(true)
			println("Endpoint getTmpClassification skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpClassification")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpClassification.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpClassification") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<ClassificationDto> ?: emptyList<ClassificationDto>() as Collection<ClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpClassification") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpClassification(id)

        val testFileName = "TmpApi.getTmpClassification"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationDto>? != null) {
                if ("ClassificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpClassification", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get classifications by ids with the current user
     *
     * Returns an instance of created classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpClassificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpClassifications")) {
			assert(true)
			println("Endpoint getTmpClassifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpClassifications")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpClassifications.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpClassifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ClassificationDto> ?: emptyList<ClassificationDto>() as Collection<ClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpClassifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpClassifications(requestBody)

        val testFileName = "TmpApi.getTmpClassifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationDto>? != null) {
                if ("kotlin.collections.List<ClassificationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpClassifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a contact by id
     *
     * Returns an instance of contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpContactTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpContact")) {
			assert(true)
			println("Endpoint getTmpContact skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpContact")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpContact.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpContact") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpContact") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpContact(id)

        val testFileName = "TmpApi.getTmpContact"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpContact", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get contacts by ids with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpContacts")) {
			assert(true)
			println("Endpoint getTmpContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpContacts")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpContacts.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpContacts(requestBody)

        val testFileName = "TmpApi.getTmpContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a document by id
     *
     * Returns an instance of document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpDocument")) {
			assert(true)
			println("Endpoint getTmpDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpDocument")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpDocument.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpDocument(id)

        val testFileName = "TmpApi.getTmpDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get documents by ids with the current user
     *
     * Returns an instance of created document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpDocumentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpDocuments")) {
			assert(true)
			println("Endpoint getTmpDocuments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpDocuments")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpDocuments.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpDocuments(requestBody)

        val testFileName = "TmpApi.getTmpDocuments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpDocuments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a entityTemplate by id
     *
     * Returns an instance of entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpEntityTemplate")) {
			assert(true)
			println("Endpoint getTmpEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpEntityTemplate")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpEntityTemplate.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpEntityTemplate(id)

        val testFileName = "TmpApi.getTmpEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("EntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get entityTemplates by ids with the current user
     *
     * Returns an instance of created entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpEntityTemplates")) {
			assert(true)
			println("Endpoint getTmpEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpEntityTemplates")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpEntityTemplates.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpEntityTemplates(requestBody)

        val testFileName = "TmpApi.getTmpEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a form by id
     *
     * Returns an instance of form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpFormTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpForm")) {
			assert(true)
			println("Endpoint getTmpForm skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpForm")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpForm.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpForm") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpForm") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpForm(id)

        val testFileName = "TmpApi.getTmpForm"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("FormDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpForm", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get forms by ids with the current user
     *
     * Returns an instance of created form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpFormsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpForms")) {
			assert(true)
			println("Endpoint getTmpForms skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpForms")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpForms.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpForms") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpForms") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpForms(requestBody)

        val testFileName = "TmpApi.getTmpForms"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("kotlin.collections.List<FormDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpForms", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a healthElement by id
     *
     * Returns an instance of healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpHealthElementTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpHealthElement")) {
			assert(true)
			println("Endpoint getTmpHealthElement skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpHealthElement")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpHealthElement.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpHealthElement") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpHealthElement") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpHealthElement(id)

        val testFileName = "TmpApi.getTmpHealthElement"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("HealthElementDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpHealthElement", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get healthElements by ids with the current user
     *
     * Returns an instance of created healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpHealthElementsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpHealthElements")) {
			assert(true)
			println("Endpoint getTmpHealthElements skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpHealthElements")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpHealthElements.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpHealthElements") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpHealthElements") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpHealthElements(requestBody)

        val testFileName = "TmpApi.getTmpHealthElements"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpHealthElements", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a invoice by id
     *
     * Returns an instance of invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpInvoice")) {
			assert(true)
			println("Endpoint getTmpInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpInvoice")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpInvoice.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpInvoice(id)

        val testFileName = "TmpApi.getTmpInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get invoices by ids with the current user
     *
     * Returns an instance of created invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpInvoices")) {
			assert(true)
			println("Endpoint getTmpInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpInvoices")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpInvoices.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpInvoices(requestBody)

        val testFileName = "TmpApi.getTmpInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a message by id
     *
     * Returns an instance of message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpMessage")) {
			assert(true)
			println("Endpoint getTmpMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpMessage")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpMessage.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpMessage(id)

        val testFileName = "TmpApi.getTmpMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get messages by ids with the current user
     *
     * Returns an instance of created message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpMessages")) {
			assert(true)
			println("Endpoint getTmpMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpMessages")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpMessages.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpMessages(requestBody)

        val testFileName = "TmpApi.getTmpMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get a patient by id
     *
     * Returns an instance of patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpPatientTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpPatient")) {
			assert(true)
			println("Endpoint getTmpPatient skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpPatient")
        val id: kotlin.String = TestUtils.getParameter(fileName, "getTmpPatient.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "getTmpPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpPatient(id)

        val testFileName = "TmpApi.getTmpPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Get patients by ids with the current user
     *
     * Returns an instance of created patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getTmpPatientsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getTmpPatients")) {
			assert(true)
			println("Endpoint getTmpPatients skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpPatients")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "getTmpPatients.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "getTmpPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getTmpPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getTmpPatients(requestBody)

        val testFileName = "TmpApi.getTmpPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getTmpPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List classifications with the current user
     *
     * Returns paginated classifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpClassificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpClassifications")) {
			assert(true)
			println("Endpoint listTmpClassifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpClassifications")
        val firstClassificationId: kotlin.String = TestUtils.getParameter(fileName, "listTmpClassifications.firstClassificationId")!!
		if (firstClassificationId as? Collection<*> == null) {
			firstClassificationId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpClassifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstClassificationId as? Collection<PaginatedListClassificationDto> ?: emptyList<PaginatedListClassificationDto>() as Collection<PaginatedListClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpClassifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpClassifications.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpClassifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListClassificationDto> ?: emptyList<PaginatedListClassificationDto>() as Collection<PaginatedListClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpClassifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpClassifications(firstClassificationId,pageSize)

        val testFileName = "TmpApi.listTmpClassifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListClassificationDto>? != null) {
                if ("PaginatedListClassificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpClassifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List contacts with the current user
     *
     * Returns paginated contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpContacts")) {
			assert(true)
			println("Endpoint listTmpContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpContacts")
        val firstContactId: kotlin.String = TestUtils.getParameter(fileName, "listTmpContacts.firstContactId")!!
		if (firstContactId as? Collection<*> == null) {
			firstContactId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstContactId as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpContacts.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpContacts(firstContactId,pageSize)

        val testFileName = "TmpApi.listTmpContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListInvoiceDto>? != null) {
                if ("PaginatedListInvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List documents with the current user
     *
     * Returns paginated documents.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpDocumentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpDocuments")) {
			assert(true)
			println("Endpoint listTmpDocuments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpDocuments")
        val firstDocumentId: kotlin.String = TestUtils.getParameter(fileName, "listTmpDocuments.firstDocumentId")!!
		if (firstDocumentId as? Collection<*> == null) {
			firstDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstDocumentId as? Collection<PaginatedListDocumentDto> ?: emptyList<PaginatedListDocumentDto>() as Collection<PaginatedListDocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpDocuments.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListDocumentDto> ?: emptyList<PaginatedListDocumentDto>() as Collection<PaginatedListDocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpDocuments(firstDocumentId,pageSize)

        val testFileName = "TmpApi.listTmpDocuments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListDocumentDto>? != null) {
                if ("PaginatedListDocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListDocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpDocuments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List entityTemplates with the current user
     *
     * Returns paginated entityTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpEntityTemplates")) {
			assert(true)
			println("Endpoint listTmpEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpEntityTemplates")
        val firstEntityTemplateId: kotlin.String = TestUtils.getParameter(fileName, "listTmpEntityTemplates.firstEntityTemplateId")!!
		if (firstEntityTemplateId as? Collection<*> == null) {
			firstEntityTemplateId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstEntityTemplateId as? Collection<PaginatedListEntityTemplateDto> ?: emptyList<PaginatedListEntityTemplateDto>() as Collection<PaginatedListEntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpEntityTemplates.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListEntityTemplateDto> ?: emptyList<PaginatedListEntityTemplateDto>() as Collection<PaginatedListEntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpEntityTemplates(firstEntityTemplateId,pageSize)

        val testFileName = "TmpApi.listTmpEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListEntityTemplateDto>? != null) {
                if ("PaginatedListEntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListEntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List forms with the current user
     *
     * Returns paginated forms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpFormsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpForms")) {
			assert(true)
			println("Endpoint listTmpForms skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpForms")
        val firstFormId: kotlin.String = TestUtils.getParameter(fileName, "listTmpForms.firstFormId")!!
		if (firstFormId as? Collection<*> == null) {
			firstFormId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpForms") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstFormId as? Collection<PaginatedListFormDto> ?: emptyList<PaginatedListFormDto>() as Collection<PaginatedListFormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpForms") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpForms.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpForms") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListFormDto> ?: emptyList<PaginatedListFormDto>() as Collection<PaginatedListFormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpForms") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpForms(firstFormId,pageSize)

        val testFileName = "TmpApi.listTmpForms"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListFormDto>? != null) {
                if ("PaginatedListFormDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListFormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpForms", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List healthElements with the current user
     *
     * Returns paginated healthElements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpHealthElementsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpHealthElements")) {
			assert(true)
			println("Endpoint listTmpHealthElements skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpHealthElements")
        val firstHealthElementId: kotlin.String = TestUtils.getParameter(fileName, "listTmpHealthElements.firstHealthElementId")!!
		if (firstHealthElementId as? Collection<*> == null) {
			firstHealthElementId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpHealthElements") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstHealthElementId as? Collection<PaginatedListHealthElementDto> ?: emptyList<PaginatedListHealthElementDto>() as Collection<PaginatedListHealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpHealthElements") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpHealthElements.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpHealthElements") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListHealthElementDto> ?: emptyList<PaginatedListHealthElementDto>() as Collection<PaginatedListHealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpHealthElements") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpHealthElements(firstHealthElementId,pageSize)

        val testFileName = "TmpApi.listTmpHealthElements"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListHealthElementDto>? != null) {
                if ("PaginatedListHealthElementDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListHealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpHealthElements", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List invoices with the current user
     *
     * Returns paginated invoices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpInvoices")) {
			assert(true)
			println("Endpoint listTmpInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpInvoices")
        val firstInvoiceId: kotlin.String = TestUtils.getParameter(fileName, "listTmpInvoices.firstInvoiceId")!!
		if (firstInvoiceId as? Collection<*> == null) {
			firstInvoiceId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstInvoiceId as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpInvoices.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpInvoices(firstInvoiceId,pageSize)

        val testFileName = "TmpApi.listTmpInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListInvoiceDto>? != null) {
                if ("PaginatedListInvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List messages with the current user
     *
     * Returns paginated messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpMessages")) {
			assert(true)
			println("Endpoint listTmpMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpMessages")
        val firstMessageId: kotlin.String = TestUtils.getParameter(fileName, "listTmpMessages.firstMessageId")!!
		if (firstMessageId as? Collection<*> == null) {
			firstMessageId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstMessageId as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpMessages.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListInvoiceDto> ?: emptyList<PaginatedListInvoiceDto>() as Collection<PaginatedListInvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpMessages(firstMessageId,pageSize)

        val testFileName = "TmpApi.listTmpMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListInvoiceDto>? != null) {
                if ("PaginatedListInvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * List patients with the current user
     *
     * Returns paginated patients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listTmpPatientsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listTmpPatients")) {
			assert(true)
			println("Endpoint listTmpPatients skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpPatients")
        val firstPatientId: kotlin.String = TestUtils.getParameter(fileName, "listTmpPatients.firstPatientId")!!
		if (firstPatientId as? Collection<*> == null) {
			firstPatientId.also {
            if (TestUtils.isAutoRev(fileName, "listTmpPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = firstPatientId as? Collection<PaginatedListPatientDto> ?: emptyList<PaginatedListPatientDto>() as Collection<PaginatedListPatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val pageSize: kotlin.Int = TestUtils.getParameter(fileName, "listTmpPatients.pageSize")!!
		if (pageSize as? Collection<*> == null) {
			pageSize.also {
            if (TestUtils.isAutoRev(fileName, "listTmpPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = pageSize as? Collection<PaginatedListPatientDto> ?: emptyList<PaginatedListPatientDto>() as Collection<PaginatedListPatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listTmpPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listTmpPatients(firstPatientId,pageSize)

        val testFileName = "TmpApi.listTmpPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListPatientDto>? != null) {
                if ("PaginatedListPatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListPatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listTmpPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a classification
     *
     * Returns the modified classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpClassificationTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpClassification")) {
			assert(true)
			println("Endpoint modifyTmpClassification skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpClassification")
        val classificationDto: ClassificationDto = TestUtils.getParameter(fileName, "modifyTmpClassification.classificationDto")!!
		if (classificationDto as? Collection<*> == null) {
			classificationDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpClassification") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = ClassificationDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationDto as? Collection<ClassificationDto> ?: emptyList<ClassificationDto>() as Collection<ClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpClassification") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpClassification(classificationDto)

        val testFileName = "TmpApi.modifyTmpClassification"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationDto>? != null) {
                if ("ClassificationDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpClassification", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpClassificationsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpClassifications")) {
			assert(true)
			println("Endpoint modifyTmpClassifications skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpClassifications")
        val classificationDto: kotlin.collections.List<ClassificationDto> = TestUtils.getParameter(fileName, "modifyTmpClassifications.classificationDto")!!
		if (classificationDto as? Collection<*> == null) {
			classificationDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpClassifications") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<ClassificationDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = classificationDto as? Collection<ClassificationDto> ?: emptyList<ClassificationDto>() as Collection<ClassificationDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpClassifications") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpClassifications(classificationDto)

        val testFileName = "TmpApi.modifyTmpClassifications"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ClassificationDto>? != null) {
                if ("kotlin.collections.List<ClassificationDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ClassificationDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpClassifications", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a contact
     *
     * Returns the modified contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpContactTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpContact")) {
			assert(true)
			println("Endpoint modifyTmpContact skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpContact")
        val contactDto: ContactDto = TestUtils.getParameter(fileName, "modifyTmpContact.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpContact") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = ContactDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpContact") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpContact(contactDto)

        val testFileName = "TmpApi.modifyTmpContact"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("ContactDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpContact", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpContactsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpContacts")) {
			assert(true)
			println("Endpoint modifyTmpContacts skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpContacts")
        val contactDto: kotlin.collections.List<ContactDto> = TestUtils.getParameter(fileName, "modifyTmpContacts.contactDto")!!
		if (contactDto as? Collection<*> == null) {
			contactDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpContacts") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<ContactDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = contactDto as? Collection<ContactDto> ?: emptyList<ContactDto>() as Collection<ContactDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpContacts") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpContacts(contactDto)

        val testFileName = "TmpApi.modifyTmpContacts"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ContactDto>? != null) {
                if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ContactDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpContacts", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a document
     *
     * Returns the modified document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpDocumentTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpDocument")) {
			assert(true)
			println("Endpoint modifyTmpDocument skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpDocument")
        val documentDto: DocumentDto = TestUtils.getParameter(fileName, "modifyTmpDocument.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpDocument") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = DocumentDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpDocument") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpDocument(documentDto)

        val testFileName = "TmpApi.modifyTmpDocument"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("DocumentDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpDocument", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpDocumentsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpDocuments")) {
			assert(true)
			println("Endpoint modifyTmpDocuments skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpDocuments")
        val documentDto: kotlin.collections.List<DocumentDto> = TestUtils.getParameter(fileName, "modifyTmpDocuments.documentDto")!!
		if (documentDto as? Collection<*> == null) {
			documentDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpDocuments") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<DocumentDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = documentDto as? Collection<DocumentDto> ?: emptyList<DocumentDto>() as Collection<DocumentDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpDocuments") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpDocuments(documentDto)

        val testFileName = "TmpApi.modifyTmpDocuments"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocumentDto>? != null) {
                if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocumentDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpDocuments", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a entityTemplate
     *
     * Returns the modified entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpEntityTemplateTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpEntityTemplate")) {
			assert(true)
			println("Endpoint modifyTmpEntityTemplate skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpEntityTemplate")
        val entityTemplateDto: EntityTemplateDto = TestUtils.getParameter(fileName, "modifyTmpEntityTemplate.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpEntityTemplate") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = EntityTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpEntityTemplate") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpEntityTemplate(entityTemplateDto)

        val testFileName = "TmpApi.modifyTmpEntityTemplate"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("EntityTemplateDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpEntityTemplate", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpEntityTemplatesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpEntityTemplates")) {
			assert(true)
			println("Endpoint modifyTmpEntityTemplates skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpEntityTemplates")
        val entityTemplateDto: kotlin.collections.List<EntityTemplateDto> = TestUtils.getParameter(fileName, "modifyTmpEntityTemplates.entityTemplateDto")!!
		if (entityTemplateDto as? Collection<*> == null) {
			entityTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpEntityTemplates") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<EntityTemplateDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = entityTemplateDto as? Collection<EntityTemplateDto> ?: emptyList<EntityTemplateDto>() as Collection<EntityTemplateDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpEntityTemplates") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpEntityTemplates(entityTemplateDto)

        val testFileName = "TmpApi.modifyTmpEntityTemplates"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<EntityTemplateDto>? != null) {
                if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<EntityTemplateDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpEntityTemplates", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a form
     *
     * Returns the modified form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpFormTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpForm")) {
			assert(true)
			println("Endpoint modifyTmpForm skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpForm")
        val formDto: FormDto = TestUtils.getParameter(fileName, "modifyTmpForm.formDto")!!
		if (formDto as? Collection<*> == null) {
			formDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpForm") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = FormDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = formDto as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpForm") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpForm(formDto)

        val testFileName = "TmpApi.modifyTmpForm"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("FormDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpForm", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpFormsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpForms")) {
			assert(true)
			println("Endpoint modifyTmpForms skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpForms")
        val formDto: kotlin.collections.List<FormDto> = TestUtils.getParameter(fileName, "modifyTmpForms.formDto")!!
		if (formDto as? Collection<*> == null) {
			formDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpForms") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<FormDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = formDto as? Collection<FormDto> ?: emptyList<FormDto>() as Collection<FormDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpForms") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpForms(formDto)

        val testFileName = "TmpApi.modifyTmpForms"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<FormDto>? != null) {
                if ("kotlin.collections.List<FormDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<FormDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpForms", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a healthElement
     *
     * Returns the modified healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpHealthElementTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpHealthElement")) {
			assert(true)
			println("Endpoint modifyTmpHealthElement skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpHealthElement")
        val healthElementDto: HealthElementDto = TestUtils.getParameter(fileName, "modifyTmpHealthElement.healthElementDto")!!
		if (healthElementDto as? Collection<*> == null) {
			healthElementDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpHealthElement") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = HealthElementDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthElementDto as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpHealthElement") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpHealthElement(healthElementDto)

        val testFileName = "TmpApi.modifyTmpHealthElement"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("HealthElementDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpHealthElement", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpHealthElementsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpHealthElements")) {
			assert(true)
			println("Endpoint modifyTmpHealthElements skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpHealthElements")
        val healthElementDto: kotlin.collections.List<HealthElementDto> = TestUtils.getParameter(fileName, "modifyTmpHealthElements.healthElementDto")!!
		if (healthElementDto as? Collection<*> == null) {
			healthElementDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpHealthElements") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<HealthElementDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthElementDto as? Collection<HealthElementDto> ?: emptyList<HealthElementDto>() as Collection<HealthElementDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpHealthElements") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpHealthElements(healthElementDto)

        val testFileName = "TmpApi.modifyTmpHealthElements"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<HealthElementDto>? != null) {
                if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<HealthElementDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpHealthElements", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a invoice
     *
     * Returns the modified invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpInvoiceTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpInvoice")) {
			assert(true)
			println("Endpoint modifyTmpInvoice skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpInvoice")
        val invoiceDto: InvoiceDto = TestUtils.getParameter(fileName, "modifyTmpInvoice.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpInvoice") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = InvoiceDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpInvoice") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpInvoice(invoiceDto)

        val testFileName = "TmpApi.modifyTmpInvoice"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("InvoiceDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpInvoice", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpInvoicesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpInvoices")) {
			assert(true)
			println("Endpoint modifyTmpInvoices skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpInvoices")
        val invoiceDto: kotlin.collections.List<InvoiceDto> = TestUtils.getParameter(fileName, "modifyTmpInvoices.invoiceDto")!!
		if (invoiceDto as? Collection<*> == null) {
			invoiceDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpInvoices") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<InvoiceDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = invoiceDto as? Collection<InvoiceDto> ?: emptyList<InvoiceDto>() as Collection<InvoiceDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpInvoices") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpInvoices(invoiceDto)

        val testFileName = "TmpApi.modifyTmpInvoices"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<InvoiceDto>? != null) {
                if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<InvoiceDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpInvoices", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a message
     *
     * Returns the modified message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpMessageTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpMessage")) {
			assert(true)
			println("Endpoint modifyTmpMessage skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpMessage")
        val messageDto: MessageDto = TestUtils.getParameter(fileName, "modifyTmpMessage.messageDto")!!
		if (messageDto as? Collection<*> == null) {
			messageDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpMessage") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = MessageDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpMessage") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpMessage(messageDto)

        val testFileName = "TmpApi.modifyTmpMessage"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("MessageDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpMessage", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpMessagesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpMessages")) {
			assert(true)
			println("Endpoint modifyTmpMessages skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpMessages")
        val messageDto: kotlin.collections.List<MessageDto> = TestUtils.getParameter(fileName, "modifyTmpMessages.messageDto")!!
		if (messageDto as? Collection<*> == null) {
			messageDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpMessages") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<MessageDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = messageDto as? Collection<MessageDto> ?: emptyList<MessageDto>() as Collection<MessageDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpMessages") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpMessages(messageDto)

        val testFileName = "TmpApi.modifyTmpMessages"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<MessageDto>? != null) {
                if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<MessageDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpMessages", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a patient
     *
     * Returns the modified patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpPatientTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpPatient")) {
			assert(true)
			println("Endpoint modifyTmpPatient skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpPatient")
        val patientDto: PatientDto = TestUtils.getParameter(fileName, "modifyTmpPatient.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpPatient") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = PatientDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpPatient") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpPatient(patientDto)

        val testFileName = "TmpApi.modifyTmpPatient"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("PatientDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpPatient", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyTmpPatientsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyTmpPatients")) {
			assert(true)
			println("Endpoint modifyTmpPatients skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpPatients")
        val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter(fileName, "modifyTmpPatients.patientDto")!!
		if (patientDto as? Collection<*> == null) {
			patientDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyTmpPatients") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<PatientDto>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = patientDto as? Collection<PatientDto> ?: emptyList<PatientDto>() as Collection<PatientDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyTmpPatients") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyTmpPatients(patientDto)

        val testFileName = "TmpApi.modifyTmpPatients"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PatientDto>? != null) {
                if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PatientDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyTmpPatients", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * Hard delete items.
     *
     * Response is a set containing the ID&#39;s of deleted items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun purgeTmpItemsTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "purgeTmpItems")) {
			assert(true)
			println("Endpoint purgeTmpItems skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "purgeTmpItems")
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "purgeTmpItems.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "purgeTmpItems") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "purgeTmpItems") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.purgeTmpItems(requestBody)

        val testFileName = "TmpApi.purgeTmpItems"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("purgeTmpItems", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun replicateToTmpDatabaseTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "replicateToTmpDatabase")) {
			assert(true)
			println("Endpoint replicateToTmpDatabase skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "replicateToTmpDatabase")
        val from: kotlin.String = TestUtils.getParameter(fileName, "replicateToTmpDatabase.from")!!
		if (from as? Collection<*> == null) {
			from.also {
            if (TestUtils.isAutoRev(fileName, "replicateToTmpDatabase") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = from as? Collection<ReplicatorDocument> ?: emptyList<ReplicatorDocument>() as Collection<ReplicatorDocument>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "replicateToTmpDatabase") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter(fileName, "replicateToTmpDatabase.requestBody")!!
		if (requestBody as? Collection<*> == null) {
			requestBody.also {
            if (TestUtils.isAutoRev(fileName, "replicateToTmpDatabase") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getTmp(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List<kotlin.String>::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = requestBody as? Collection<ReplicatorDocument> ?: emptyList<ReplicatorDocument>() as Collection<ReplicatorDocument>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "replicateToTmpDatabase") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getTmp(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.replicateToTmpDatabase(from,requestBody)

        val testFileName = "TmpApi.replicateToTmpDatabase"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<ReplicatorDocument>? != null) {
                if ("ReplicatorDocument".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<ReplicatorDocument>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("replicateToTmpDatabase", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }
    


    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
