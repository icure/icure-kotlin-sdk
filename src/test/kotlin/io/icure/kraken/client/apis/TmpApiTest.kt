/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis

import io.icure.kraken.client.models.ClassificationDto
import io.icure.kraken.client.models.ContactDto
import io.icure.kraken.client.models.DocIdentifier
import io.icure.kraken.client.models.DocumentDto
import io.icure.kraken.client.models.EntityTemplateDto
import io.icure.kraken.client.models.FormDto
import io.icure.kraken.client.models.HealthElementDto
import io.icure.kraken.client.models.InvoiceDto
import io.icure.kraken.client.models.MessageDto
import io.icure.kraken.client.models.PaginatedListClassificationDto
import io.icure.kraken.client.models.PaginatedListDocumentDto
import io.icure.kraken.client.models.PaginatedListEntityTemplateDto
import io.icure.kraken.client.models.PaginatedListFormDto
import io.icure.kraken.client.models.PaginatedListHealthElementDto
import io.icure.kraken.client.models.PaginatedListInvoiceDto
import io.icure.kraken.client.models.PaginatedListPatientDto
import io.icure.kraken.client.models.PatientDto
import io.icure.kraken.client.models.ReplicatorDocumentDto
import assertk.assertThat
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule
import io.icure.kraken.client.infrastructure.*

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import io.icure.kraken.client.models.filter.AbstractFilterDto

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

import kotlinx.coroutines.runBlocking
import io.icure.kraken.client.infrastructure.TestUtils
import io.icure.kraken.client.infrastructure.TestUtils.Companion.basicAuth
import io.icure.kraken.client.infrastructure.differences
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.fold
import java.nio.ByteBuffer
import kotlin.reflect.full.callSuspendBy
import kotlin.reflect.javaType
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.toList

/**
 * API tests for TmpApi
 */
@ExperimentalStdlibApi
class TmpApiTest() {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        fun fileNames() = listOf("TmpApi.json")
    }

    // http://127.0.0.1:16043
    fun api(fileName: String) = TmpApi(basePath = java.lang.System.getProperty("API_URL"), authHeader = fileName.basicAuth())
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper()
        .registerModule(KotlinModule())
        .registerModule(object:SimpleModule() {
            override fun setupModule(context: SetupContext?) {
                addDeserializer(AbstractFilterDto::class.java, FilterDeserializer())
                addDeserializer(ByteArrayWrapper::class.java, ByteArrayWrapperDeserializer())
                addSerializer(ByteArrayWrapper::class.java, ByteArrayWrapperSerializer())
                super.setupModule(context)
            }
        })
        .registerModule(JavaTimeModule())
        .apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
        configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true)
    }

    suspend fun createForModification(fileName: String){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api(credentialsFile)::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    val parameters = createFunction!!.parameters.mapNotNull {
                        when(it.type.javaType) {
                            TmpDto::class.java -> it to objectMapper.convertValue(body, TmpDto::class.java)
                            TmpApi::class.java -> it to api(credentialsFile)
                            else -> null
                        }
                    }.toMap()

                    createFunction.callSuspendBy(parameters)
                    println("created")
                }
            }
        }
    }

    
    /**
     * Create a classification with the current user
     *
     * Returns an instance of created classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpClassificationTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpClassification")) {
            assertTrue(true, "Test of createTmpClassification endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpClassification")
                val classificationDto: ClassificationDto = TestUtils.getParameter<ClassificationDto>(fileName, "createTmpClassification.classificationDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpClassification") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ClassificationDto ?: it
                    }

                val response = api(credentialsFile).createTmpClassification(classificationDto = classificationDto)

                val testFileName = "TmpApi.createTmpClassification"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ClassificationDto>? != null) {
                        if ("ClassificationDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ClassificationDto>() {}
                    })
                    assertAreEquals("createTmpClassification", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a classification with the current user
     *
     * Returns an instance of created classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpClassificationsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpClassifications")) {
            assertTrue(true, "Test of createTmpClassifications endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpClassifications")
                val classificationDto: kotlin.collections.List<ClassificationDto> = TestUtils.getParameter<kotlin.collections.List<ClassificationDto>>(fileName, "createTmpClassifications.classificationDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpClassifications") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<ClassificationDto>

                val response = api(credentialsFile).createTmpClassifications(classificationDto = classificationDto)

                val testFileName = "TmpApi.createTmpClassifications"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ClassificationDto>? != null) {
                        if ("kotlin.collections.List<ClassificationDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<ClassificationDto>>() {}
                    })
                    assertAreEquals("createTmpClassifications", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a contact with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpContactTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpContact")) {
            assertTrue(true, "Test of createTmpContact endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpContact")
                val contactDto: ContactDto = TestUtils.getParameter<ContactDto>(fileName, "createTmpContact.contactDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpContact") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ContactDto ?: it
                    }

                val response = api(credentialsFile).createTmpContact(contactDto = contactDto)

                val testFileName = "TmpApi.createTmpContact"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContactDto>? != null) {
                        if ("ContactDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContactDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ContactDto>() {}
                    })
                    assertAreEquals("createTmpContact", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a contact with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpContactsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpContacts")) {
            assertTrue(true, "Test of createTmpContacts endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpContacts")
                val contactDto: kotlin.collections.List<ContactDto> = TestUtils.getParameter<kotlin.collections.List<ContactDto>>(fileName, "createTmpContacts.contactDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpContacts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<ContactDto>

                val response = api(credentialsFile).createTmpContacts(contactDto = contactDto)

                val testFileName = "TmpApi.createTmpContacts"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContactDto>? != null) {
                        if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContactDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<ContactDto>>() {}
                    })
                    assertAreEquals("createTmpContacts", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create tmp database for current user
     *
     * Nothing happens if the database already exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpDatabaseTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpDatabase")) {
            assertTrue(true, "Test of createTmpDatabase endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpDatabase")

                val response = api(credentialsFile).createTmpDatabase()

                val testFileName = "TmpApi.createTmpDatabase"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.Any>? != null) {
                        if ("kotlin.Any".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.Any>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.Any>() {}
                    })
                    assertAreEquals("createTmpDatabase", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a document with the current user
     *
     * Returns an instance of created document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpDocumentTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpDocument")) {
            assertTrue(true, "Test of createTmpDocument endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpDocument")
                val documentDto: DocumentDto = TestUtils.getParameter<DocumentDto>(fileName, "createTmpDocument.documentDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpDocument") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? DocumentDto ?: it
                    }

                val response = api(credentialsFile).createTmpDocument(documentDto = documentDto)

                val testFileName = "TmpApi.createTmpDocument"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocumentDto>? != null) {
                        if ("DocumentDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<DocumentDto>() {}
                    })
                    assertAreEquals("createTmpDocument", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a document with the current user
     *
     * Returns an instance of created document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpDocumentsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpDocuments")) {
            assertTrue(true, "Test of createTmpDocuments endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpDocuments")
                val documentDto: kotlin.collections.List<DocumentDto> = TestUtils.getParameter<kotlin.collections.List<DocumentDto>>(fileName, "createTmpDocuments.documentDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpDocuments") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<DocumentDto>

                val response = api(credentialsFile).createTmpDocuments(documentDto = documentDto)

                val testFileName = "TmpApi.createTmpDocuments"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocumentDto>? != null) {
                        if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocumentDto>>() {}
                    })
                    assertAreEquals("createTmpDocuments", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a entityTemplate with the current user
     *
     * Returns an instance of created entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpEntityTemplateTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpEntityTemplate")) {
            assertTrue(true, "Test of createTmpEntityTemplate endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpEntityTemplate")
                val entityTemplateDto: EntityTemplateDto = TestUtils.getParameter<EntityTemplateDto>(fileName, "createTmpEntityTemplate.entityTemplateDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpEntityTemplate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? EntityTemplateDto ?: it
                    }

                val response = api(credentialsFile).createTmpEntityTemplate(entityTemplateDto = entityTemplateDto)

                val testFileName = "TmpApi.createTmpEntityTemplate"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<EntityTemplateDto>? != null) {
                        if ("EntityTemplateDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<EntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<EntityTemplateDto>() {}
                    })
                    assertAreEquals("createTmpEntityTemplate", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a entityTemplate with the current user
     *
     * Returns an instance of created entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpEntityTemplatesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpEntityTemplates")) {
            assertTrue(true, "Test of createTmpEntityTemplates endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpEntityTemplates")
                val entityTemplateDto: kotlin.collections.List<EntityTemplateDto> = TestUtils.getParameter<kotlin.collections.List<EntityTemplateDto>>(fileName, "createTmpEntityTemplates.entityTemplateDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpEntityTemplates") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<EntityTemplateDto>

                val response = api(credentialsFile).createTmpEntityTemplates(entityTemplateDto = entityTemplateDto)

                val testFileName = "TmpApi.createTmpEntityTemplates"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<EntityTemplateDto>? != null) {
                        if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<EntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<EntityTemplateDto>>() {}
                    })
                    assertAreEquals("createTmpEntityTemplates", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a form with the current user
     *
     * Returns an instance of created form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpFormTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpForm")) {
            assertTrue(true, "Test of createTmpForm endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpForm")
                val formDto: FormDto = TestUtils.getParameter<FormDto>(fileName, "createTmpForm.formDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpForm") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? FormDto ?: it
                    }

                val response = api(credentialsFile).createTmpForm(formDto = formDto)

                val testFileName = "TmpApi.createTmpForm"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<FormDto>? != null) {
                        if ("FormDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<FormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<FormDto>() {}
                    })
                    assertAreEquals("createTmpForm", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a form with the current user
     *
     * Returns an instance of created form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpFormsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpForms")) {
            assertTrue(true, "Test of createTmpForms endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpForms")
                val formDto: kotlin.collections.List<FormDto> = TestUtils.getParameter<kotlin.collections.List<FormDto>>(fileName, "createTmpForms.formDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpForms") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<FormDto>

                val response = api(credentialsFile).createTmpForms(formDto = formDto)

                val testFileName = "TmpApi.createTmpForms"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<FormDto>? != null) {
                        if ("kotlin.collections.List<FormDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<FormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<FormDto>>() {}
                    })
                    assertAreEquals("createTmpForms", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a healthElement with the current user
     *
     * Returns an instance of created healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpHealthElementTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpHealthElement")) {
            assertTrue(true, "Test of createTmpHealthElement endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpHealthElement")
                val healthElementDto: HealthElementDto = TestUtils.getParameter<HealthElementDto>(fileName, "createTmpHealthElement.healthElementDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpHealthElement") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? HealthElementDto ?: it
                    }

                val response = api(credentialsFile).createTmpHealthElement(healthElementDto = healthElementDto)

                val testFileName = "TmpApi.createTmpHealthElement"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthElementDto>? != null) {
                        if ("HealthElementDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<HealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<HealthElementDto>() {}
                    })
                    assertAreEquals("createTmpHealthElement", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a healthElement with the current user
     *
     * Returns an instance of created healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpHealthElementsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpHealthElements")) {
            assertTrue(true, "Test of createTmpHealthElements endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpHealthElements")
                val healthElementDto: kotlin.collections.List<HealthElementDto> = TestUtils.getParameter<kotlin.collections.List<HealthElementDto>>(fileName, "createTmpHealthElements.healthElementDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpHealthElements") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<HealthElementDto>

                val response = api(credentialsFile).createTmpHealthElements(healthElementDto = healthElementDto)

                val testFileName = "TmpApi.createTmpHealthElements"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthElementDto>? != null) {
                        if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<HealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<HealthElementDto>>() {}
                    })
                    assertAreEquals("createTmpHealthElements", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a invoice with the current user
     *
     * Returns an instance of created invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpInvoiceTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpInvoice")) {
            assertTrue(true, "Test of createTmpInvoice endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpInvoice")
                val invoiceDto: InvoiceDto = TestUtils.getParameter<InvoiceDto>(fileName, "createTmpInvoice.invoiceDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpInvoice") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? InvoiceDto ?: it
                    }

                val response = api(credentialsFile).createTmpInvoice(invoiceDto = invoiceDto)

                val testFileName = "TmpApi.createTmpInvoice"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<InvoiceDto>? != null) {
                        if ("InvoiceDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<InvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<InvoiceDto>() {}
                    })
                    assertAreEquals("createTmpInvoice", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a invoice with the current user
     *
     * Returns an instance of created invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpInvoicesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpInvoices")) {
            assertTrue(true, "Test of createTmpInvoices endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpInvoices")
                val invoiceDto: kotlin.collections.List<InvoiceDto> = TestUtils.getParameter<kotlin.collections.List<InvoiceDto>>(fileName, "createTmpInvoices.invoiceDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpInvoices") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<InvoiceDto>

                val response = api(credentialsFile).createTmpInvoices(invoiceDto = invoiceDto)

                val testFileName = "TmpApi.createTmpInvoices"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<InvoiceDto>? != null) {
                        if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<InvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<InvoiceDto>>() {}
                    })
                    assertAreEquals("createTmpInvoices", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a message with the current user
     *
     * Returns an instance of created message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpMessageTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpMessage")) {
            assertTrue(true, "Test of createTmpMessage endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpMessage")
                val messageDto: MessageDto = TestUtils.getParameter<MessageDto>(fileName, "createTmpMessage.messageDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpMessage") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? MessageDto ?: it
                    }

                val response = api(credentialsFile).createTmpMessage(messageDto = messageDto)

                val testFileName = "TmpApi.createTmpMessage"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<MessageDto>? != null) {
                        if ("MessageDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<MessageDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<MessageDto>() {}
                    })
                    assertAreEquals("createTmpMessage", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a message with the current user
     *
     * Returns an instance of created message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpMessagesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpMessages")) {
            assertTrue(true, "Test of createTmpMessages endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpMessages")
                val messageDto: kotlin.collections.List<MessageDto> = TestUtils.getParameter<kotlin.collections.List<MessageDto>>(fileName, "createTmpMessages.messageDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpMessages") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<MessageDto>

                val response = api(credentialsFile).createTmpMessages(messageDto = messageDto)

                val testFileName = "TmpApi.createTmpMessages"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<MessageDto>? != null) {
                        if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<MessageDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<MessageDto>>() {}
                    })
                    assertAreEquals("createTmpMessages", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a patient with the current user
     *
     * Returns an instance of created patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpPatient")) {
            assertTrue(true, "Test of createTmpPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpPatient")
                val patientDto: PatientDto = TestUtils.getParameter<PatientDto>(fileName, "createTmpPatient.patientDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? PatientDto ?: it
                    }

                val response = api(credentialsFile).createTmpPatient(patientDto = patientDto)

                val testFileName = "TmpApi.createTmpPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("createTmpPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Create a patient with the current user
     *
     * Returns an instance of created patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun createTmpPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "createTmpPatients")) {
            assertTrue(true, "Test of createTmpPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createTmpPatients")
                val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter<kotlin.collections.List<PatientDto>>(fileName, "createTmpPatients.patientDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "createTmpPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<PatientDto>

                val response = api(credentialsFile).createTmpPatients(patientDto = patientDto)

                val testFileName = "TmpApi.createTmpPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("createTmpPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Soft delete items.
     *
     * Response is a set containing the ID&#39;s of deleted items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun deleteTmpItemsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "deleteTmpItems")) {
            assertTrue(true, "Test of deleteTmpItems endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteTmpItems")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "deleteTmpItems.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "deleteTmpItems") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).deleteTmpItems(requestBody = requestBody)

                val testFileName = "TmpApi.deleteTmpItems"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocIdentifier>? != null) {
                        if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocIdentifier>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocIdentifier>>() {}
                    })
                    assertAreEquals("deleteTmpItems", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Destroy tmp database for current user
     *
     * Nothing happens if the database does not exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun destroyTmpDatabaseTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "destroyTmpDatabase")) {
            assertTrue(true, "Test of destroyTmpDatabase endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "destroyTmpDatabase")

                val response = api(credentialsFile).destroyTmpDatabase()

                val testFileName = "TmpApi.destroyTmpDatabase"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<kotlin.Any>? != null) {
                        if ("kotlin.Any".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<kotlin.Any>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.Any>() {}
                    })
                    assertAreEquals("destroyTmpDatabase", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a classification by id
     *
     * Returns an instance of classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpClassificationTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpClassification")) {
            assertTrue(true, "Test of getTmpClassification endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpClassification")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpClassification.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpClassification") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpClassification(id = id)

                val testFileName = "TmpApi.getTmpClassification"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ClassificationDto>? != null) {
                        if ("ClassificationDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ClassificationDto>() {}
                    })
                    assertAreEquals("getTmpClassification", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get classifications by ids with the current user
     *
     * Returns an instance of created classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpClassificationsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpClassifications")) {
            assertTrue(true, "Test of getTmpClassifications endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpClassifications")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpClassifications.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpClassifications") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpClassifications(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpClassifications"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ClassificationDto>? != null) {
                        if ("kotlin.collections.List<ClassificationDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<ClassificationDto>>() {}
                    })
                    assertAreEquals("getTmpClassifications", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a contact by id
     *
     * Returns an instance of contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpContactTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpContact")) {
            assertTrue(true, "Test of getTmpContact endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpContact")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpContact.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpContact") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpContact(id = id)

                val testFileName = "TmpApi.getTmpContact"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContactDto>? != null) {
                        if ("ContactDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContactDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ContactDto>() {}
                    })
                    assertAreEquals("getTmpContact", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get contacts by ids with the current user
     *
     * Returns an instance of created contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpContactsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpContacts")) {
            assertTrue(true, "Test of getTmpContacts endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpContacts")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpContacts.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpContacts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpContacts(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpContacts"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContactDto>? != null) {
                        if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContactDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<ContactDto>>() {}
                    })
                    assertAreEquals("getTmpContacts", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a document by id
     *
     * Returns an instance of document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpDocumentTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpDocument")) {
            assertTrue(true, "Test of getTmpDocument endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpDocument")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpDocument.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpDocument") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpDocument(id = id)

                val testFileName = "TmpApi.getTmpDocument"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocumentDto>? != null) {
                        if ("DocumentDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<DocumentDto>() {}
                    })
                    assertAreEquals("getTmpDocument", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get documents by ids with the current user
     *
     * Returns an instance of created document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpDocumentsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpDocuments")) {
            assertTrue(true, "Test of getTmpDocuments endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpDocuments")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpDocuments.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpDocuments") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpDocuments(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpDocuments"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocumentDto>? != null) {
                        if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocumentDto>>() {}
                    })
                    assertAreEquals("getTmpDocuments", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a entityTemplate by id
     *
     * Returns an instance of entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpEntityTemplateTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpEntityTemplate")) {
            assertTrue(true, "Test of getTmpEntityTemplate endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpEntityTemplate")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpEntityTemplate.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpEntityTemplate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpEntityTemplate(id = id)

                val testFileName = "TmpApi.getTmpEntityTemplate"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<EntityTemplateDto>? != null) {
                        if ("EntityTemplateDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<EntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<EntityTemplateDto>() {}
                    })
                    assertAreEquals("getTmpEntityTemplate", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get entityTemplates by ids with the current user
     *
     * Returns an instance of created entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpEntityTemplatesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpEntityTemplates")) {
            assertTrue(true, "Test of getTmpEntityTemplates endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpEntityTemplates")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpEntityTemplates.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpEntityTemplates") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpEntityTemplates(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpEntityTemplates"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<EntityTemplateDto>? != null) {
                        if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<EntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<EntityTemplateDto>>() {}
                    })
                    assertAreEquals("getTmpEntityTemplates", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a form by id
     *
     * Returns an instance of form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpFormTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpForm")) {
            assertTrue(true, "Test of getTmpForm endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpForm")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpForm.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpForm") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpForm(id = id)

                val testFileName = "TmpApi.getTmpForm"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<FormDto>? != null) {
                        if ("FormDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<FormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<FormDto>() {}
                    })
                    assertAreEquals("getTmpForm", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get forms by ids with the current user
     *
     * Returns an instance of created form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpFormsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpForms")) {
            assertTrue(true, "Test of getTmpForms endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpForms")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpForms.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpForms") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpForms(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpForms"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<FormDto>? != null) {
                        if ("kotlin.collections.List<FormDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<FormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<FormDto>>() {}
                    })
                    assertAreEquals("getTmpForms", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a healthElement by id
     *
     * Returns an instance of healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpHealthElementTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpHealthElement")) {
            assertTrue(true, "Test of getTmpHealthElement endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpHealthElement")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpHealthElement.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpHealthElement") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpHealthElement(id = id)

                val testFileName = "TmpApi.getTmpHealthElement"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthElementDto>? != null) {
                        if ("HealthElementDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<HealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<HealthElementDto>() {}
                    })
                    assertAreEquals("getTmpHealthElement", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get healthElements by ids with the current user
     *
     * Returns an instance of created healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpHealthElementsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpHealthElements")) {
            assertTrue(true, "Test of getTmpHealthElements endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpHealthElements")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpHealthElements.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpHealthElements") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpHealthElements(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpHealthElements"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthElementDto>? != null) {
                        if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<HealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<HealthElementDto>>() {}
                    })
                    assertAreEquals("getTmpHealthElements", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a invoice by id
     *
     * Returns an instance of invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpInvoiceTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpInvoice")) {
            assertTrue(true, "Test of getTmpInvoice endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpInvoice")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpInvoice.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpInvoice") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpInvoice(id = id)

                val testFileName = "TmpApi.getTmpInvoice"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<InvoiceDto>? != null) {
                        if ("InvoiceDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<InvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<InvoiceDto>() {}
                    })
                    assertAreEquals("getTmpInvoice", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get invoices by ids with the current user
     *
     * Returns an instance of created invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpInvoicesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpInvoices")) {
            assertTrue(true, "Test of getTmpInvoices endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpInvoices")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpInvoices.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpInvoices") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpInvoices(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpInvoices"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<InvoiceDto>? != null) {
                        if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<InvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<InvoiceDto>>() {}
                    })
                    assertAreEquals("getTmpInvoices", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a message by id
     *
     * Returns an instance of message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpMessageTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpMessage")) {
            assertTrue(true, "Test of getTmpMessage endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpMessage")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpMessage.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpMessage") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpMessage(id = id)

                val testFileName = "TmpApi.getTmpMessage"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<MessageDto>? != null) {
                        if ("MessageDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<MessageDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<MessageDto>() {}
                    })
                    assertAreEquals("getTmpMessage", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get messages by ids with the current user
     *
     * Returns an instance of created message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpMessagesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpMessages")) {
            assertTrue(true, "Test of getTmpMessages endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpMessages")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpMessages.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpMessages") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpMessages(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpMessages"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<MessageDto>? != null) {
                        if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<MessageDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<MessageDto>>() {}
                    })
                    assertAreEquals("getTmpMessages", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get a patient by id
     *
     * Returns an instance of patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpPatient")) {
            assertTrue(true, "Test of getTmpPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpPatient")
                val id: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "getTmpPatient.id")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }

                val response = api(credentialsFile).getTmpPatient(id = id)

                val testFileName = "TmpApi.getTmpPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("getTmpPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Get patients by ids with the current user
     *
     * Returns an instance of created patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun getTmpPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "getTmpPatients")) {
            assertTrue(true, "Test of getTmpPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "getTmpPatients")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "getTmpPatients.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "getTmpPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).getTmpPatients(requestBody = requestBody)

                val testFileName = "TmpApi.getTmpPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("getTmpPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List classifications with the current user
     *
     * Returns paginated classifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpClassificationsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpClassifications")) {
            assertTrue(true, "Test of listTmpClassifications endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpClassifications")
                val firstClassificationId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpClassifications.firstClassificationId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpClassifications") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpClassifications.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpClassifications") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpClassifications(firstClassificationId = firstClassificationId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpClassifications"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListClassificationDto>? != null) {
                        if ("PaginatedListClassificationDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListClassificationDto>() {}
                    })
                    assertAreEquals("listTmpClassifications", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List contacts with the current user
     *
     * Returns paginated contacts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpContactsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpContacts")) {
            assertTrue(true, "Test of listTmpContacts endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpContacts")
                val firstContactId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpContacts.firstContactId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpContacts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpContacts.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpContacts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpContacts(firstContactId = firstContactId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpContacts"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListInvoiceDto>? != null) {
                        if ("PaginatedListInvoiceDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListInvoiceDto>() {}
                    })
                    assertAreEquals("listTmpContacts", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List documents with the current user
     *
     * Returns paginated documents.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpDocumentsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpDocuments")) {
            assertTrue(true, "Test of listTmpDocuments endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpDocuments")
                val firstDocumentId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpDocuments.firstDocumentId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpDocuments") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpDocuments.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpDocuments") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpDocuments(firstDocumentId = firstDocumentId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpDocuments"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListDocumentDto>? != null) {
                        if ("PaginatedListDocumentDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListDocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListDocumentDto>() {}
                    })
                    assertAreEquals("listTmpDocuments", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List entityTemplates with the current user
     *
     * Returns paginated entityTemplates.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpEntityTemplatesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpEntityTemplates")) {
            assertTrue(true, "Test of listTmpEntityTemplates endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpEntityTemplates")
                val firstEntityTemplateId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpEntityTemplates.firstEntityTemplateId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpEntityTemplates") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpEntityTemplates.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpEntityTemplates") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpEntityTemplates(firstEntityTemplateId = firstEntityTemplateId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpEntityTemplates"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListEntityTemplateDto>? != null) {
                        if ("PaginatedListEntityTemplateDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListEntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListEntityTemplateDto>() {}
                    })
                    assertAreEquals("listTmpEntityTemplates", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List forms with the current user
     *
     * Returns paginated forms.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpFormsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpForms")) {
            assertTrue(true, "Test of listTmpForms endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpForms")
                val firstFormId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpForms.firstFormId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpForms") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpForms.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpForms") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpForms(firstFormId = firstFormId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpForms"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListFormDto>? != null) {
                        if ("PaginatedListFormDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListFormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListFormDto>() {}
                    })
                    assertAreEquals("listTmpForms", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List healthElements with the current user
     *
     * Returns paginated healthElements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpHealthElementsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpHealthElements")) {
            assertTrue(true, "Test of listTmpHealthElements endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpHealthElements")
                val firstHealthElementId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpHealthElements.firstHealthElementId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpHealthElements") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpHealthElements.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpHealthElements") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpHealthElements(firstHealthElementId = firstHealthElementId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpHealthElements"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListHealthElementDto>? != null) {
                        if ("PaginatedListHealthElementDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListHealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListHealthElementDto>() {}
                    })
                    assertAreEquals("listTmpHealthElements", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List invoices with the current user
     *
     * Returns paginated invoices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpInvoicesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpInvoices")) {
            assertTrue(true, "Test of listTmpInvoices endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpInvoices")
                val firstInvoiceId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpInvoices.firstInvoiceId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpInvoices") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpInvoices.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpInvoices") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpInvoices(firstInvoiceId = firstInvoiceId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpInvoices"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListInvoiceDto>? != null) {
                        if ("PaginatedListInvoiceDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListInvoiceDto>() {}
                    })
                    assertAreEquals("listTmpInvoices", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List messages with the current user
     *
     * Returns paginated messages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpMessagesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpMessages")) {
            assertTrue(true, "Test of listTmpMessages endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpMessages")
                val firstMessageId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpMessages.firstMessageId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpMessages") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpMessages.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpMessages") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpMessages(firstMessageId = firstMessageId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpMessages"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListInvoiceDto>? != null) {
                        if ("PaginatedListInvoiceDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListInvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListInvoiceDto>() {}
                    })
                    assertAreEquals("listTmpMessages", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * List patients with the current user
     *
     * Returns paginated patients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun listTmpPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "listTmpPatients")) {
            assertTrue(true, "Test of listTmpPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "listTmpPatients")
                val firstPatientId: kotlin.String? = TestUtils.getParameter<kotlin.String>(fileName, "listTmpPatients.firstPatientId")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val pageSize: kotlin.Int? = TestUtils.getParameter<kotlin.Int>(fileName, "listTmpPatients.pageSize")?.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "listTmpPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.Int ?: it
                    }

                val response = api(credentialsFile).listTmpPatients(firstPatientId = firstPatientId,pageSize = pageSize)

                val testFileName = "TmpApi.listTmpPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PaginatedListPatientDto>? != null) {
                        if ("PaginatedListPatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PaginatedListPatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PaginatedListPatientDto>() {}
                    })
                    assertAreEquals("listTmpPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a classification
     *
     * Returns the modified classification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpClassificationTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpClassification")) {
            assertTrue(true, "Test of modifyTmpClassification endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpClassification")
                val classificationDto: ClassificationDto = TestUtils.getParameter<ClassificationDto>(fileName, "modifyTmpClassification.classificationDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpClassification") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ClassificationDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpClassification(classificationDto = classificationDto)

                val testFileName = "TmpApi.modifyTmpClassification"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ClassificationDto>? != null) {
                        if ("ClassificationDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ClassificationDto>() {}
                    })
                    assertAreEquals("modifyTmpClassification", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpClassificationsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpClassifications")) {
            assertTrue(true, "Test of modifyTmpClassifications endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpClassifications")
                val classificationDto: kotlin.collections.List<ClassificationDto> = TestUtils.getParameter<kotlin.collections.List<ClassificationDto>>(fileName, "modifyTmpClassifications.classificationDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpClassifications") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<ClassificationDto>

                val response = api(credentialsFile).modifyTmpClassifications(classificationDto = classificationDto)

                val testFileName = "TmpApi.modifyTmpClassifications"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ClassificationDto>? != null) {
                        if ("kotlin.collections.List<ClassificationDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ClassificationDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<ClassificationDto>>() {}
                    })
                    assertAreEquals("modifyTmpClassifications", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a contact
     *
     * Returns the modified contact.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpContactTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpContact")) {
            assertTrue(true, "Test of modifyTmpContact endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpContact")
                val contactDto: ContactDto = TestUtils.getParameter<ContactDto>(fileName, "modifyTmpContact.contactDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpContact") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? ContactDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpContact(contactDto = contactDto)

                val testFileName = "TmpApi.modifyTmpContact"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContactDto>? != null) {
                        if ("ContactDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContactDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ContactDto>() {}
                    })
                    assertAreEquals("modifyTmpContact", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpContactsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpContacts")) {
            assertTrue(true, "Test of modifyTmpContacts endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpContacts")
                val contactDto: kotlin.collections.List<ContactDto> = TestUtils.getParameter<kotlin.collections.List<ContactDto>>(fileName, "modifyTmpContacts.contactDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpContacts") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<ContactDto>

                val response = api(credentialsFile).modifyTmpContacts(contactDto = contactDto)

                val testFileName = "TmpApi.modifyTmpContacts"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ContactDto>? != null) {
                        if ("kotlin.collections.List<ContactDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ContactDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<ContactDto>>() {}
                    })
                    assertAreEquals("modifyTmpContacts", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a document
     *
     * Returns the modified document.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpDocumentTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpDocument")) {
            assertTrue(true, "Test of modifyTmpDocument endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpDocument")
                val documentDto: DocumentDto = TestUtils.getParameter<DocumentDto>(fileName, "modifyTmpDocument.documentDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpDocument") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? DocumentDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpDocument(documentDto = documentDto)

                val testFileName = "TmpApi.modifyTmpDocument"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocumentDto>? != null) {
                        if ("DocumentDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<DocumentDto>() {}
                    })
                    assertAreEquals("modifyTmpDocument", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpDocumentsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpDocuments")) {
            assertTrue(true, "Test of modifyTmpDocuments endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpDocuments")
                val documentDto: kotlin.collections.List<DocumentDto> = TestUtils.getParameter<kotlin.collections.List<DocumentDto>>(fileName, "modifyTmpDocuments.documentDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpDocuments") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<DocumentDto>

                val response = api(credentialsFile).modifyTmpDocuments(documentDto = documentDto)

                val testFileName = "TmpApi.modifyTmpDocuments"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocumentDto>? != null) {
                        if ("kotlin.collections.List<DocumentDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocumentDto>>() {}
                    })
                    assertAreEquals("modifyTmpDocuments", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a entityTemplate
     *
     * Returns the modified entityTemplate.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpEntityTemplateTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpEntityTemplate")) {
            assertTrue(true, "Test of modifyTmpEntityTemplate endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpEntityTemplate")
                val entityTemplateDto: EntityTemplateDto = TestUtils.getParameter<EntityTemplateDto>(fileName, "modifyTmpEntityTemplate.entityTemplateDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpEntityTemplate") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? EntityTemplateDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpEntityTemplate(entityTemplateDto = entityTemplateDto)

                val testFileName = "TmpApi.modifyTmpEntityTemplate"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<EntityTemplateDto>? != null) {
                        if ("EntityTemplateDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<EntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<EntityTemplateDto>() {}
                    })
                    assertAreEquals("modifyTmpEntityTemplate", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpEntityTemplatesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpEntityTemplates")) {
            assertTrue(true, "Test of modifyTmpEntityTemplates endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpEntityTemplates")
                val entityTemplateDto: kotlin.collections.List<EntityTemplateDto> = TestUtils.getParameter<kotlin.collections.List<EntityTemplateDto>>(fileName, "modifyTmpEntityTemplates.entityTemplateDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpEntityTemplates") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<EntityTemplateDto>

                val response = api(credentialsFile).modifyTmpEntityTemplates(entityTemplateDto = entityTemplateDto)

                val testFileName = "TmpApi.modifyTmpEntityTemplates"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<EntityTemplateDto>? != null) {
                        if ("kotlin.collections.List<EntityTemplateDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<EntityTemplateDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<EntityTemplateDto>>() {}
                    })
                    assertAreEquals("modifyTmpEntityTemplates", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a form
     *
     * Returns the modified form.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpFormTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpForm")) {
            assertTrue(true, "Test of modifyTmpForm endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpForm")
                val formDto: FormDto = TestUtils.getParameter<FormDto>(fileName, "modifyTmpForm.formDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpForm") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? FormDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpForm(formDto = formDto)

                val testFileName = "TmpApi.modifyTmpForm"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<FormDto>? != null) {
                        if ("FormDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<FormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<FormDto>() {}
                    })
                    assertAreEquals("modifyTmpForm", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpFormsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpForms")) {
            assertTrue(true, "Test of modifyTmpForms endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpForms")
                val formDto: kotlin.collections.List<FormDto> = TestUtils.getParameter<kotlin.collections.List<FormDto>>(fileName, "modifyTmpForms.formDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpForms") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<FormDto>

                val response = api(credentialsFile).modifyTmpForms(formDto = formDto)

                val testFileName = "TmpApi.modifyTmpForms"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<FormDto>? != null) {
                        if ("kotlin.collections.List<FormDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<FormDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<FormDto>>() {}
                    })
                    assertAreEquals("modifyTmpForms", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a healthElement
     *
     * Returns the modified healthElement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpHealthElementTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpHealthElement")) {
            assertTrue(true, "Test of modifyTmpHealthElement endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpHealthElement")
                val healthElementDto: HealthElementDto = TestUtils.getParameter<HealthElementDto>(fileName, "modifyTmpHealthElement.healthElementDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpHealthElement") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? HealthElementDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpHealthElement(healthElementDto = healthElementDto)

                val testFileName = "TmpApi.modifyTmpHealthElement"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthElementDto>? != null) {
                        if ("HealthElementDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<HealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<HealthElementDto>() {}
                    })
                    assertAreEquals("modifyTmpHealthElement", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpHealthElementsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpHealthElements")) {
            assertTrue(true, "Test of modifyTmpHealthElements endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpHealthElements")
                val healthElementDto: kotlin.collections.List<HealthElementDto> = TestUtils.getParameter<kotlin.collections.List<HealthElementDto>>(fileName, "modifyTmpHealthElements.healthElementDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpHealthElements") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<HealthElementDto>

                val response = api(credentialsFile).modifyTmpHealthElements(healthElementDto = healthElementDto)

                val testFileName = "TmpApi.modifyTmpHealthElements"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<HealthElementDto>? != null) {
                        if ("kotlin.collections.List<HealthElementDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<HealthElementDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<HealthElementDto>>() {}
                    })
                    assertAreEquals("modifyTmpHealthElements", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a invoice
     *
     * Returns the modified invoice.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpInvoiceTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpInvoice")) {
            assertTrue(true, "Test of modifyTmpInvoice endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpInvoice")
                val invoiceDto: InvoiceDto = TestUtils.getParameter<InvoiceDto>(fileName, "modifyTmpInvoice.invoiceDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpInvoice") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? InvoiceDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpInvoice(invoiceDto = invoiceDto)

                val testFileName = "TmpApi.modifyTmpInvoice"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<InvoiceDto>? != null) {
                        if ("InvoiceDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<InvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<InvoiceDto>() {}
                    })
                    assertAreEquals("modifyTmpInvoice", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpInvoicesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpInvoices")) {
            assertTrue(true, "Test of modifyTmpInvoices endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpInvoices")
                val invoiceDto: kotlin.collections.List<InvoiceDto> = TestUtils.getParameter<kotlin.collections.List<InvoiceDto>>(fileName, "modifyTmpInvoices.invoiceDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpInvoices") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<InvoiceDto>

                val response = api(credentialsFile).modifyTmpInvoices(invoiceDto = invoiceDto)

                val testFileName = "TmpApi.modifyTmpInvoices"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<InvoiceDto>? != null) {
                        if ("kotlin.collections.List<InvoiceDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<InvoiceDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<InvoiceDto>>() {}
                    })
                    assertAreEquals("modifyTmpInvoices", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a message
     *
     * Returns the modified message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpMessageTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpMessage")) {
            assertTrue(true, "Test of modifyTmpMessage endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpMessage")
                val messageDto: MessageDto = TestUtils.getParameter<MessageDto>(fileName, "modifyTmpMessage.messageDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpMessage") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? MessageDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpMessage(messageDto = messageDto)

                val testFileName = "TmpApi.modifyTmpMessage"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<MessageDto>? != null) {
                        if ("MessageDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<MessageDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<MessageDto>() {}
                    })
                    assertAreEquals("modifyTmpMessage", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpMessagesTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpMessages")) {
            assertTrue(true, "Test of modifyTmpMessages endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpMessages")
                val messageDto: kotlin.collections.List<MessageDto> = TestUtils.getParameter<kotlin.collections.List<MessageDto>>(fileName, "modifyTmpMessages.messageDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpMessages") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<MessageDto>

                val response = api(credentialsFile).modifyTmpMessages(messageDto = messageDto)

                val testFileName = "TmpApi.modifyTmpMessages"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<MessageDto>? != null) {
                        if ("kotlin.collections.List<MessageDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<MessageDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<MessageDto>>() {}
                    })
                    assertAreEquals("modifyTmpMessages", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a patient
     *
     * Returns the modified patient.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpPatientTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpPatient")) {
            assertTrue(true, "Test of modifyTmpPatient endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpPatient")
                val patientDto: PatientDto = TestUtils.getParameter<PatientDto>(fileName, "modifyTmpPatient.patientDto")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpPatient") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? PatientDto ?: it
                    }

                val response = api(credentialsFile).modifyTmpPatient(patientDto = patientDto)

                val testFileName = "TmpApi.modifyTmpPatient"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("PatientDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<PatientDto>() {}
                    })
                    assertAreEquals("modifyTmpPatient", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Modify a batch of healthcare elements
     *
     * Returns the modified healthcare elements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun modifyTmpPatientsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "modifyTmpPatients")) {
            assertTrue(true, "Test of modifyTmpPatients endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyTmpPatients")
                val patientDto: kotlin.collections.List<PatientDto> = TestUtils.getParameter<kotlin.collections.List<PatientDto>>(fileName, "modifyTmpPatients.patientDto")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "modifyTmpPatients") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<PatientDto>

                val response = api(credentialsFile).modifyTmpPatients(patientDto = patientDto)

                val testFileName = "TmpApi.modifyTmpPatients"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<PatientDto>? != null) {
                        if ("kotlin.collections.List<PatientDto>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<PatientDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<PatientDto>>() {}
                    })
                    assertAreEquals("modifyTmpPatients", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * Hard delete items.
     *
     * Response is a set containing the ID&#39;s of deleted items.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun purgeTmpItemsTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "purgeTmpItems")) {
            assertTrue(true, "Test of purgeTmpItems endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "purgeTmpItems")
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "purgeTmpItems.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "purgeTmpItems") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).purgeTmpItems(requestBody = requestBody)

                val testFileName = "TmpApi.purgeTmpItems"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<DocIdentifier>? != null) {
                        if ("kotlin.collections.List<DocIdentifier>".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<DocIdentifier>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<kotlin.collections.List<DocIdentifier>>() {}
                    })
                    assertAreEquals("purgeTmpItems", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	fun replicateToTmpDatabaseTest(fileName: String) = runBlocking {

        if (TestUtils.skipEndpoint(fileName, "replicateToTmpDatabase")) {
            assertTrue(true, "Test of replicateToTmpDatabase endpoint has been skipped")
        } else {
            try{
                createForModification(fileName)
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "replicateToTmpDatabase")
                val from: kotlin.String = TestUtils.getParameter<kotlin.String>(fileName, "replicateToTmpDatabase.from")!!.let {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "replicateToTmpDatabase") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } as? kotlin.String ?: it
                    }
                val requestBody: kotlin.collections.List<kotlin.String> = TestUtils.getParameter<kotlin.collections.List<kotlin.String>>(fileName, "replicateToTmpDatabase.requestBody")!!.map {
                    (it as? TmpDto)?.takeIf { TestUtils.isAutoRev(fileName, "replicateToTmpDatabase") }?.let {
                    val id = it::class.memberProperties.first { it.name == "id" }
                    val currentRev = api(credentialsFile).getTmp(id.getter.call(it) as String).rev
                    it.copy(rev = currentRev)
                    } ?: it
                    } as kotlin.collections.List<kotlin.String>

                val response = api(credentialsFile).replicateToTmpDatabase(from = from,requestBody = requestBody)

                val testFileName = "TmpApi.replicateToTmpDatabase"
                val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
                try {
                    val objectFromFile = (response as? Flow<ByteBuffer>)?.let { file.readAsFlow() } ?: objectMapper.readValue(file,  if (response as? List<ReplicatorDocumentDto>? != null) {
                        if ("ReplicatorDocumentDto".contains("String>")) {
                            object : TypeReference<List<String>>() {}
                        } else {
                            object : TypeReference<List<ReplicatorDocumentDto>>() {}
                        }
                    } else if(response as? kotlin.collections.Map<String, String>? != null){
                        object : TypeReference<Map<String,String>>() {}
                    } else {
                        object : TypeReference<ReplicatorDocumentDto>() {}
                    })
                    assertAreEquals("replicateToTmpDatabase", objectFromFile, response)
                    println("Comparison successful")
                }
                catch (e: Exception) {
                    when (e) {
                        is FileNotFoundException, is java.nio.file.NoSuchFileException -> {
                            file.parentFile.mkdirs()
                            file.createNewFile()
                            (response as? Flow<ByteBuffer>)
                                ?.let { it.writeToFile(file) }
                                ?: objectMapper.writeValue(file, response)
                            assert(true)
                            println("File written")
                        }
                    }
                }
            }
            finally {
                TestUtils.deleteAfterElements(fileName)
                alreadyCreatedObjects.remove(fileName)
            }
        }
    }
    

    private suspend fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        when {
            objectFromFile as? Iterable<Any> != null -> {
                val toSkip : kotlin.collections.List<String> = when {
                    functionName.let { name -> listOf("listContact", "modifyContacts").any { name.startsWith(it) } } -> listOf("subContacts.[created, rev, modified]", "services.[openingDate]", "groupId", "created", "modified", "rev")
                    functionName.let { name -> listOf("getServices").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "openingDate")
                    functionName.let { name -> listOf("create", "new", "get", "list", "set").any { name.startsWith(it) } } -> listOf("rev", "created", "modified")
                    functionName.let { name -> listOf("modify", "delete", "undelete").any { name.startsWith(it) } } -> listOf("rev")
                    functionName.let { name -> listOf("append").any { name.startsWith(it) } } -> listOf("id", "created", "modified")
                    functionName.let { name -> listOf("find", "filter").any { name.startsWith(it) } } -> listOf("rows.[created, rev, modified]", "created", "modified", "rev")
                    else -> emptyList()
                }

                val diffs = objectFromFile
                    .takeUnless { (it as ArrayList<Any>).size != (response as ArrayList<Any>).size }
                    ?.let { objectFromFile
                        .zip(response as Iterable<Any>)
                        .map { pair -> filterDiffs(pair.first, pair.second, pair.first.differences(pair.second), toSkip) }
                        .flatten()
                        .toList()
                    }
                    ?: listOf(Diff("Lists are of different sizes ${(objectFromFile as ArrayList<Any>).size} <-> ${(response as ArrayList<Any>).size}", PropertyType.ListItem, listOf(), objectFromFile, response))
                assertTrue(diffs.isEmpty(), diffs.joinToString { it.toString() })
            }
            objectFromFile as? Flow<ByteBuffer> != null -> {
                assertTrue(objectFromFile.toList().let {
                    it.fold(0 to ByteArray(it.sumOf { it.remaining() })) { (pos, a), b ->
                        val siz = b.remaining()
                        (pos + siz) to a.also {
                            b.get(a, pos, siz)
                        }
                    }.second
                }.contentEquals(
                    (response as Flow<ByteBuffer>).toList().let {
                        it.fold(0 to ByteArray(it.sumOf { it.remaining() })) { (pos, a), b ->
                            val siz = b.remaining()
                            (pos + siz) to a.also {
                                b.get(a, pos, siz)
                            }
                        }.second
                    }
                )
                )}
            else -> {
                val toSkip : kotlin.collections.List<String> = when {
                    functionName.let { name -> listOf("modifyContact").any { name.startsWith(it) } } -> listOf("subContacts.[created, rev, modified]", "services.[openingDate]", "groupId", "created", "modified", "rev")
                    functionName.let { name -> listOf("modifyPatientReferral").any { name.startsWith(it) } } -> listOf("rev", "patientHealthCareParties.[referralPeriods]", "created", "modified")
                    functionName.let { name -> listOf("createContact").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "deletionDate", "groupId")
                    functionName.let { name -> listOf("newContactDelegations").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "groupId")
                    functionName.let { name -> listOf("create", "get", "modify", "new").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "deletionDate")
                    functionName.let { name -> listOf("set", "delete", "merge").any { name.startsWith(it) } } -> listOf("rev", "created", "modified")
                    functionName.let { name -> listOf("validate").any { name.startsWith(it) } } -> listOf("rev", "created", "modified", "sentDate")
                    functionName.let { name -> listOf("reassign").any { name.startsWith(it) } } -> listOf("id", "created", "invoicingCodes.id")
                    functionName.let { name -> listOf("find").any { name.startsWith(it) } } -> listOf("rows.[created, rev, modified]")
                    else -> emptyList()
                }
                val diffs = filterDiffs(objectFromFile, response, response.differences(objectFromFile), toSkip)
                assertTrue(diffs.isEmpty(), diffs.joinToString { it.toString() })
            }
        }
    }
}
