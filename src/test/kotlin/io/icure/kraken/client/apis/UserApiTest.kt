/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

package io.icure.kraken.client.apis;

import io.icure.kraken.client.models.DocIdentifier;
import io.icure.kraken.client.models.EmailTemplateDto;
import io.icure.kraken.client.models.PaginatedListUserDto;
import io.icure.kraken.client.models.PropertyStubDto;
import io.icure.kraken.client.models.UserDto;
import io.icure.kraken.client.models.UserGroupDto;
import assertk.Assert
import assertk.assertThat
import assertk.assertions.hasSameSizeAs
import assertk.assertions.isEqualToIgnoringGivenProperties
import java.io.*

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.core.json.JsonReadFeature
import com.fasterxml.jackson.core.type.TypeReference
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule
import com.fasterxml.jackson.module.kotlin.KotlinModule

import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.junit.jupiter.api.Assertions.assertEquals

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import kotlin.reflect.KProperty1
import kotlin.reflect.KMutableProperty
import kotlin.reflect.full.memberFunctions
import kotlin.reflect.full.memberProperties

/**
 * API tests for UserApi
 */
@ExperimentalStdlibApi
class UserApiTest(private val fileName: String) {

    companion object {
        private val alreadyCreatedObjects = mutableSetOf<String>()
        fun canCreateForModificationObjects(fileName: String) = alreadyCreatedObjects.add(fileName)

        @JvmStatic
        @AfterAll
        fun afterAllTests(){
        TestUtils.deleteAfterElements("UserApi.json")
        }

        @JvmStatic
        fun fileNames() = listOf("UserApi.json")
    }

    private val api = UserApi()
    private val workingFolder = "/tmp/icureTests/"
    private val objectMapper = ObjectMapper().registerModule(KotlinModule()).registerModule(JavaTimeModule()).apply {
        setSerializationInclusion(JsonInclude.Include.NON_NULL)
        configure(JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS.mappedFeature(), true)
    }
    @BeforeEach
    fun createForModification(){
        if (canCreateForModificationObjects(fileName)) {
            TestUtils.getParameters<Any>(fileName, "beforeElements.bodies")?.let {bodies ->
                val credentialsFile = TestUtils.getCredentialsFile(fileName, "createDto")
                val createFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3; it.name.startsWith("create") }
                val deleteFunction = api::class.memberFunctions
                    .firstOrNull { it.parameters.size == 3 && it.name.startsWith("delete") }
                bodies.forEach {body ->
                    //deleteFunction?.call(api, body?.id)
                    createFunction!!.call(api, body)
					println("created")
                }
            }
        }
    }


    /**
     * Assign a healthcare party ID to current user
     *
     * UserDto gets returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun assignHealthcarePartyTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "assignHealthcareParty")) {
			assert(true)
			println("Endpoint assignHealthcareParty skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "assignHealthcareParty")
        val healthcarePartyId: kotlin.String = TestUtils.getParameter(fileName, "assignHealthcareParty.healthcarePartyId")!!
		if (healthcarePartyId as? Collection<*> == null) {
			healthcarePartyId.also {
            if (TestUtils.isAutoRev(fileName, "assignHealthcareParty") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = healthcarePartyId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "assignHealthcareParty") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.assignHealthcareParty(healthcarePartyId)

        val testFileName = "UserApi.assignHealthcareParty"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("assignHealthcareParty", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     *
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun checkPasswordTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "checkPassword")) {
			assert(true)
			println("Endpoint checkPassword skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "checkPassword")
        val password: kotlin.String = TestUtils.getParameter(fileName, "checkPassword.password")!!
		if (password as? Collection<*> == null) {
			password.also {
            if (TestUtils.isAutoRev(fileName, "checkPassword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = password as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "checkPassword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.checkPassword(password)

        val testFileName = "UserApi.checkPassword"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Boolean>? != null) {
                if ("kotlin.Boolean".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Boolean>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("checkPassword", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Create a user
     *
     * Create a user. HealthcareParty ID should be set. Email or Login have to be set. If login hasn&#39;t been set, Email will be used for Login instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createUserTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createUser")) {
			assert(true)
			println("Endpoint createUser skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createUser")
        val userDto: UserDto = TestUtils.getParameter(fileName, "createUser.userDto")!!
		if (userDto as? Collection<*> == null) {
			userDto.also {
            if (TestUtils.isAutoRev(fileName, "createUser") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = UserDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createUser") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createUser(userDto)

        val testFileName = "UserApi.createUser"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createUser", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Create a user
     *
     * Create a user. HealthcareParty ID should be set. Email has to be set and the Login has to be null. On server-side, Email will be used for Login.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun createUserInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "createUserInGroup")) {
			assert(true)
			println("Endpoint createUserInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "createUserInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "createUserInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "createUserInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createUserInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val userDto: UserDto = TestUtils.getParameter(fileName, "createUserInGroup.userDto")!!
		if (userDto as? Collection<*> == null) {
			userDto.also {
            if (TestUtils.isAutoRev(fileName, "createUserInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = UserDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "createUserInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.createUserInGroup(groupId,userDto)

        val testFileName = "UserApi.createUserInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("createUserInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Delete a User based on his/her ID.
     *
     * Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteUserTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteUser")) {
			assert(true)
			println("Endpoint deleteUser skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteUser")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "deleteUser.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "deleteUser") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<DocIdentifier> ?: emptyList<DocIdentifier>() as Collection<DocIdentifier>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteUser") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteUser(userId)

        val testFileName = "UserApi.deleteUser"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<DocIdentifier>? != null) {
                if ("DocIdentifier".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<DocIdentifier>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteUser", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Delete a User based on his/her ID.
     *
     * Delete a User based on his/her ID. The return value is an array containing the ID of deleted user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun deleteUserInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "deleteUserInGroup")) {
			assert(true)
			println("Endpoint deleteUserInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "deleteUserInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "deleteUserInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "deleteUserInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteUserInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val userId: kotlin.String = TestUtils.getParameter(fileName, "deleteUserInGroup.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "deleteUserInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<kotlin.Any> ?: emptyList<kotlin.Any>() as Collection<kotlin.Any>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "deleteUserInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.deleteUserInGroup(groupId,userId)

        val testFileName = "UserApi.deleteUserInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Any>? != null) {
                if ("kotlin.Any".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Any>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("deleteUserInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     *
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun encodePasswordTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "encodePassword")) {
			assert(true)
			println("Endpoint encodePassword skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "encodePassword")
        val password: kotlin.String = TestUtils.getParameter(fileName, "encodePassword.password")!!
		if (password as? Collection<*> == null) {
			password.also {
            if (TestUtils.isAutoRev(fileName, "encodePassword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = password as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "encodePassword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.encodePassword(password)

        val testFileName = "UserApi.encodePassword"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.String".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("encodePassword", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get the list of users by healthcare party id
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun findByHcpartyIdTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "findByHcpartyId")) {
			assert(true)
			println("Endpoint findByHcpartyId skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "findByHcpartyId")
        val id: kotlin.String = TestUtils.getParameter(fileName, "findByHcpartyId.id")!!
		if (id as? Collection<*> == null) {
			id.also {
            if (TestUtils.isAutoRev(fileName, "findByHcpartyId") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = id as? Collection<kotlin.String> ?: emptyList<kotlin.String>() as Collection<kotlin.String>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "findByHcpartyId") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.findByHcpartyId(id)

        val testFileName = "UserApi.findByHcpartyId"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.collections.List<kotlin.String>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("findByHcpartyId", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Send a forgotten email message to an user
     *
     *
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun forgottenPasswordTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "forgottenPassword")) {
			assert(true)
			println("Endpoint forgottenPassword skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "forgottenPassword")
        val email: kotlin.String = TestUtils.getParameter(fileName, "forgottenPassword.email")!!
		if (email as? Collection<*> == null) {
			email.also {
            if (TestUtils.isAutoRev(fileName, "forgottenPassword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = email as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "forgottenPassword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val emailTemplateDto: EmailTemplateDto = TestUtils.getParameter(fileName, "forgottenPassword.emailTemplateDto")!!
		if (emailTemplateDto as? Collection<*> == null) {
			emailTemplateDto.also {
            if (TestUtils.isAutoRev(fileName, "forgottenPassword") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = EmailTemplateDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = emailTemplateDto as? Collection<kotlin.Boolean> ?: emptyList<kotlin.Boolean>() as Collection<kotlin.Boolean>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "forgottenPassword") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.forgottenPassword(email,emailTemplateDto)

        val testFileName = "UserApi.forgottenPassword"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.Boolean>? != null) {
                if ("kotlin.Boolean".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.Boolean>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("forgottenPassword", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get Currently logged-in user session.
     *
     * Get current user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCurrentSessionTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCurrentSession")) {
			assert(true)
			println("Endpoint getCurrentSession skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCurrentSession")

        val response = api.getCurrentSession()

        val testFileName = "UserApi.getCurrentSession"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<kotlin.String>? != null) {
                if ("kotlin.String".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<kotlin.String>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCurrentSession", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get presently logged-in user.
     *
     * Get current user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getCurrentUserTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getCurrentUser")) {
			assert(true)
			println("Endpoint getCurrentUser skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getCurrentUser")

        val response = api.getCurrentUser()

        val testFileName = "UserApi.getCurrentUser"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getCurrentUser", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get presently logged-in user.
     *
     * Get current user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getMatchingUsersTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getMatchingUsers")) {
			assert(true)
			println("Endpoint getMatchingUsers skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getMatchingUsers")

        val response = api.getMatchingUsers()

        val testFileName = "UserApi.getMatchingUsers"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserGroupDto>? != null) {
                if ("kotlin.collections.List<UserGroupDto>".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserGroupDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getMatchingUsers", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get a user by his ID
     *
     * General information about the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getUserTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getUser")) {
			assert(true)
			println("Endpoint getUser skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getUser")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "getUser.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "getUser") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getUser") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getUser(userId)

        val testFileName = "UserApi.getUser"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getUser", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Get a user by his Email/Login
     *
     * General information about the user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun getUserByEmailTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "getUserByEmail")) {
			assert(true)
			println("Endpoint getUserByEmail skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "getUserByEmail")
        val email: kotlin.String = TestUtils.getParameter(fileName, "getUserByEmail.email")!!
		if (email as? Collection<*> == null) {
			email.also {
            if (TestUtils.isAutoRev(fileName, "getUserByEmail") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = email as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "getUserByEmail") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.getUserByEmail(email)

        val testFileName = "UserApi.getUserByEmail"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("getUserByEmail", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List users with(out) pagination
     *
     * Returns a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listUsersTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listUsers")) {
			assert(true)
			println("Endpoint listUsers skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listUsers")
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "listUsers.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listUsers") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsers") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "listUsers.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listUsers") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsers") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "listUsers.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listUsers") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsers") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listUsers(startKey,startDocumentId,limit)

        val testFileName = "UserApi.listUsers"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListUserDto>? != null) {
                if ("PaginatedListUserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListUserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listUsers", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * List users with(out) pagination
     *
     * Returns a list of users.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun listUsersInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "listUsersInGroup")) {
			assert(true)
			println("Endpoint listUsersInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "listUsersInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "listUsersInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startKey: kotlin.String = TestUtils.getParameter(fileName, "listUsersInGroup.startKey")!!
		if (startKey as? Collection<*> == null) {
			startKey.also {
            if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startKey as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val startDocumentId: kotlin.String = TestUtils.getParameter(fileName, "listUsersInGroup.startDocumentId")!!
		if (startDocumentId as? Collection<*> == null) {
			startDocumentId.also {
            if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = startDocumentId as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val limit: kotlin.Int = TestUtils.getParameter(fileName, "listUsersInGroup.limit")!!
		if (limit as? Collection<*> == null) {
			limit.also {
            if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.Int::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = limit as? Collection<PaginatedListUserDto> ?: emptyList<PaginatedListUserDto>() as Collection<PaginatedListUserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "listUsersInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.listUsersInGroup(groupId,startKey,startDocumentId,limit)

        val testFileName = "UserApi.listUsersInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<PaginatedListUserDto>? != null) {
                if ("PaginatedListUserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<PaginatedListUserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("listUsersInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a User property
     *
     * Modify a User properties based on his/her ID. The return value is the modified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyPropertiesTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyProperties")) {
			assert(true)
			println("Endpoint modifyProperties skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyProperties")
        val userId: kotlin.String = TestUtils.getParameter(fileName, "modifyProperties.userId")!!
		if (userId as? Collection<*> == null) {
			userId.also {
            if (TestUtils.isAutoRev(fileName, "modifyProperties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyProperties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val propertyStubDto: kotlin.collections.List<PropertyStubDto> = TestUtils.getParameter(fileName, "modifyProperties.propertyStubDto")!!
		if (propertyStubDto as? Collection<*> == null) {
			propertyStubDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyProperties") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.collections.List::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = propertyStubDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyProperties") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyProperties(userId,propertyStubDto)

        val testFileName = "UserApi.modifyProperties"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyProperties", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a user.
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyUserTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyUser")) {
			assert(true)
			println("Endpoint modifyUser skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyUser")
        val userDto: UserDto = TestUtils.getParameter(fileName, "modifyUser.userDto")!!
		if (userDto as? Collection<*> == null) {
			userDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyUser") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = UserDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyUser") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyUser(userDto)

        val testFileName = "UserApi.modifyUser"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyUser", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }

    /**
     * Modify a user.
     *
     * No particular return value. It&#39;s just a message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @ParameterizedTest
    @MethodSource("fileNames") // six numbers
	suspend fun modifyUserInGroupTest(fileName: String) {
		if (TestUtils.skipEndpoint(fileName, "modifyUserInGroup")) {
			assert(true)
			println("Endpoint modifyUserInGroup skipped")
			return
		}
        val credentialsFile = TestUtils.getCredentialsFile(fileName, "modifyUserInGroup")
        val groupId: kotlin.String = TestUtils.getParameter(fileName, "modifyUserInGroup.groupId")!!
		if (groupId as? Collection<*> == null) {
			groupId.also {
            if (TestUtils.isAutoRev(fileName, "modifyUserInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = kotlin.String::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = groupId as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyUserInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}
        val userDto: UserDto = TestUtils.getParameter(fileName, "modifyUserInGroup.userDto")!!
		if (userDto as? Collection<*> == null) {
			userDto.also {
            if (TestUtils.isAutoRev(fileName, "modifyUserInGroup") && it != null) {
                val id = it::class.memberProperties.first { it.name == "id" }
                val currentRev = api.getUser(id.getter.call(it) as String).rev
                val rev = UserDto::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                rev.setter.call(it, currentRev)
                }
			}
		} else {
			val paramAsCollection = userDto as? Collection<UserDto> ?: emptyList<UserDto>() as Collection<UserDto>
			paramAsCollection.forEach {
                if (TestUtils.isAutoRev(fileName, "modifyUserInGroup") && it != null) {
                    val id = it::class.memberProperties.first { it.name == "id" }

                    val currentRev = api.getUser(id.getter.call(it) as String).rev
                    val rev = it::class.memberProperties.filterIsInstance<KMutableProperty<*>>().first { it.name == "rev" }
                    rev.setter.call(it, currentRev)
                }
			}
		}

        val response = api.modifyUserInGroup(groupId,userDto)

        val testFileName = "UserApi.modifyUserInGroup"
        val file = File(workingFolder + File.separator + this::class.simpleName + File.separator + fileName, "$testFileName.json")
        try {
            val objectFromFile = objectMapper.readValue(file,  if (response as? kotlin.collections.List<UserDto>? != null) {
                if ("UserDto".contains("String>")) {
                    object : TypeReference<List<String>>() {}
                } else {
                    object : TypeReference<List<UserDto>>() {}
                }
            } else if(response as? kotlin.collections.Map<String, String>? != null){
                object : TypeReference<Map<String,String>>() {}
            } else {
            object : TypeReference<Void>() {}
            })
            assertAreEquals("modifyUserInGroup", objectFromFile, response)
			println("Comparison successful")
        } catch (e:FileNotFoundException) {
            file.parentFile.mkdirs()
            file.createNewFile()
            objectMapper.writeValue(file, response)
			assert(true)
			println("File written")
        }
    }



    private fun assertAreEquals(functionName: String, objectFromFile: Any?, response: Any) {
        if (objectFromFile as? Iterable<Any> != null) {
            val iterableResponse = (response as? Collection<Any> ?: (emptyList<Any>()))
            if (functionName.startsWith("create") || functionName.startsWith("new")) { // new
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(fileElement, null)
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "id" }?.setter?.call(responseElement, null)
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            } else if (functionName.startsWith("modify") || functionName.startsWith("set") || functionName.startsWith("delete")) { // + set + delete
                for (fileElement in objectFromFile) {
                    fileElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(fileElement, null)
                }
                for (responseElement in iterableResponse) {
                    responseElement::class.memberProperties.filterIsInstance<KMutableProperty<*>>().firstOrNull { it.name == "rev" }?.setter?.call(responseElement, null)
                }
            }
            assertEquals(response, objectFromFile)
        } else {
            if (functionName.startsWith("create") || functionName.startsWith("modify")) {
                assertThat(objectFromFile as Any).isEqualToIgnoringGivenProperties(response, *(response::class.memberProperties.filter { it.name == "rev" || it.name == "id" || it.name == "created"  || it.name == "modified" }.mapNotNull { it as? KProperty1<Any, Any> }.toTypedArray()))
            } else {
                assertEquals(objectFromFile, response)
            }
        }
    }

}
